@using System.Globalization
@using Zermos_Web.Models.zermelo
@model Zermos_Web.Models.zermelo.ZermeloRoosterModel

@{
    ViewData["title"] = "title";
}

<link rel="stylesheet" href="~/css/zermelo.css" />

<div class="main-container">
    
    <div class="MondayOfAppointmentsWeek" style="display: none">@Model.response.data[0].MondayOfAppointmentsWeek.ToUnixTime()</div>
    <div class="Week" style="display: none">@Model.response.data[0].MondayOfAppointmentsWeek.GetWeekNumber()</div>
    
    <div class="times-container">
        <ul>
            <!--        20 horizontal lines-->
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
        </ul>
    </div>
    <div class="days-container">
        <ul>
            <li></li>
            <li>Ma</li>
            <li>Di</li>
            <li>Wo</li>
            <li>Do</li>
            <li>Vr</li>
        </ul>
    </div>
    <div class="hours-container">
        <ul>
            <li></li>
            <li>08:20</li> <!-- 1st hour -->
            <li>09:10</li> <!-- 2nd hour -->
            <li>10:00</li> <!-- break -->
            <li>10:15</li> <!-- 3rd hour -->
            <li>11:05</li> <!-- 4th hour -->
            <li>11:55</li> <!-- break -->
            <li>12:25</li> <!-- 5th hour -->
            <li>13:15</li> <!-- 6th hour -->
            <li>14:05</li> <!-- 7th hour -->
            <li>14:55</li> <!-- break -->
            <li>15:10</li> <!-- 8th hour -->
            <li>16:00</li> <!-- 9th hour -->
            <li></li> <!-- end schoolday -->
        </ul>
    </div>
    <div class="lessons-container">
        <ul>
            @foreach (DayOfWeek day in Enum.GetValues(typeof(DayOfWeek)))
            {
                @if (Model.response.data[0].appointments.Count == 0)
                {
                    <li class="empty">Wow, de hele week vrij!</li>
                    break;
                }

                if (day != DayOfWeek.Saturday && day != DayOfWeek.Sunday)
                {
                    <li class="lesdag">
                        @{
                            IEnumerable<Appointment> appointmentList = Model.response.data[0].appointments.Where(a => a.start.ToDateTime().DayOfWeek == day).ToList();

                            if (appointmentList.Count() == 0)
                                continue;

                            //100 means 100% of the height of the container
                            //510 means 510 minutes between 08:20 and 16:50
                            float minuteHeight = 100f / 510f;

                            //get the date of the day that the appointments are for
                            //8 * 60 + 20 = 500 minutes
                            int dayStartUnix = appointmentList.ElementAt(0).start.ToDateTime().Date.ToDayTimeSavingDate().AddMinutes(6 * 60 + 20).ToUnixTime();

                        }

                        @foreach (var appointment in appointmentList)
                        {
                            //percentage from top = (appointment start time - dayStartUnix) * minuteHeight *@
                            //appointment height = (appointment end time - appointment start time) * minuteHeight

                            float appointmentHeight = ((appointment.end - appointment.start) / 60f) * minuteHeight;
                            float appointmentTop = ((appointment.start - dayStartUnix) / 60f) * minuteHeight;

                            <div class="lesson-time-based @(appointment.cancelled ? "canceled" : "") @appointment.appointmentType" style="top: @(appointmentTop.ToString("0.000", CultureInfo.InvariantCulture))%; height: calc(@(appointmentHeight.ToString("0.000", CultureInfo.InvariantCulture))% - 8px);">
                                @(appointment.subjects.Count > 0 ? appointment.subjects[0] : "Geen les") - @(appointment.teachers.Count > 0 ? appointment.teachers[0] : "Geen docent") - @(appointment.locations.Count > 0 ? appointment.locations[0] : "Geen lokaal")
                            </div>
                        }
                    </li>
                }
            }
        </ul>

    </div>
</div>

<script>
    loadDatepicker();

    function goToWeek(week) {
        $.ajax({
            url: '/Zermelo/Rooster?week=' + week + '&asPartial=true',
            success: async function (data) {   
               
                var mainContainer = document.getElementsByClassName('main-container')[0];
                mainContainer.style.opacity = '0';
                await new Promise(res => setTimeout(res, 250));
                //set mainContainer.innerHTML to the data, but remove <div class="main-container"> and </div>
                mainContainer.innerHTML = data.substring(35, data.length - 6);
                mainContainer.style.opacity = '1'; 
                loadDatepicker();                    
            },
            //when an error happens, alert the user with the text of the error
            error: function (xhr, status, error) { 
              alert(xhr.responseText);
              window.location.href = "/";
              
             },
            cache: false,
            type: 'GET'
        });
        
        modifyUrl('Rooster', '/Zermelo/Rooster?week=' + week);
    }
    
    function modifyUrl(title, url) {
     if (typeof (history.pushState) != "undefined") {
      var obj = {
       Title: title,
       Url: url
      };
      history.pushState(obj, obj.Title, obj.Url);
     }
    }
    
    //onload
    function loadDatepicker () {
        
        
        //if the datepicker is already loaded, don't load it again
        if (document.getElementsByClassName('datepicker').length > 0)
            document.getElementsByClassName('datepicker')[0].remove();
        
        let week = document.getElementsByClassName('Week')[0].innerHTML;
        let MondayOfAppointmentsWeek = new Date(document.getElementsByClassName('MondayOfAppointmentsWeek')[0].innerHTML * 1000);
                               
        //create a div
        var datepickerParent = document.createElement('div');
        datepickerParent.className = 'datepicker';
        
        //create a div
        var backbutton = document.createElement('div');
        backbutton.className = 'backbutton';
        backbutton.style.position = 'unset';
        backbutton.onclick = function() {               
            PreviousWeek();
        };
        //create an i
        var backbuttonI = document.createElement('i');
        backbuttonI.className = 'fa-solid fa-angle-left';
        //append the i to the div
        backbutton.appendChild(backbuttonI);
        //append the div to 'datepickerParent'
        datepickerParent.appendChild(backbutton);
        
        //create a p
        var weektext = document.createElement('p');
        weektext.innerHTML = 'Week ' + week;
        //append the p to 'datepickerParent'
        datepickerParent.appendChild(weektext);
        
        //create a p
        var date = document.createElement('p');
        date.className = 'date';
        date.innerHTML = ', ' + MondayOfAppointmentsWeek.getDate() + ' - ' + (MondayOfAppointmentsWeek.getDate() + 6) + ' ' + MondayOfAppointmentsWeek.toLocaleString('nl-NL', { month: 'long' }) + ' ' + MondayOfAppointmentsWeek.getFullYear();
        //append the p to 'datepickerParent'
        datepickerParent.appendChild(date);
        
        //create a div
        var forwardbutton = document.createElement('div');
        forwardbutton.className = 'forewardbutton';
        forwardbutton.style.position = 'unset';
        forwardbutton.onclick = function() {
            NextWeek();
        };
        //create an i
        var forwardbuttonI = document.createElement('i');
        forwardbuttonI.className = 'fa-solid fa-angle-right';
        //append the i to the div
        forwardbutton.appendChild(forwardbuttonI);
        //append the div to 'datepickerParent'
        datepickerParent.appendChild(forwardbutton);
        
        //append the div to 'top-bar'
        document.getElementsByClassName('top-bar')[0].appendChild(datepickerParent);
    }
    
    function NextWeek() {
        var week = document.getElementsByClassName('Week')[0].innerHTML;
        goToWeek(Number(week) + 1);
    }
    
    function PreviousWeek() {
        var week = document.getElementsByClassName('Week')[0].innerHTML;
        goToWeek(week - 1);
    }

    let touchstartX = 0
    let touchendX = 0
    let threshold = 100 //px
        
    function checkDirection() {
      if (touchendX < touchstartX && Math.abs(touchstartX - touchendX) > threshold) {
          NextWeek();
      } 
      else if (touchendX > touchstartX && Math.abs(touchstartX - touchendX) > threshold) {
          PreviousWeek();
      }
    }
    
    document.addEventListener('touchstart', e => {
      touchstartX = e.changedTouches[0].screenX
    })
    
    document.addEventListener('touchend', e => {
      touchendX = e.changedTouches[0].screenX
      checkDirection()
    })
</script>
