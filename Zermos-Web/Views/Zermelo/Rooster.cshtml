@using Zermos_Web.Models.zermelo
@model Zermos_Web.Models.zermelo.ZermeloRoosterModel

@{
    var zermeloTodayLessons = Model.appointments.Where(x => x.start.ToDateTime().Date == DateTime.Now.Date).ToList();
}

<link rel="stylesheet" href="/css/zermelo.css" preload/>

<div class="main-container">
    <div class="week-carousel" id="week-carousel" style="transform: translateX(-0%);">
        @(await Html.PartialAsync("../Zermelo/Rooster-week", Model))
    </div>
    <div class="notCurrentWeek" style="bottom: -50px;">
        Dit is niet de huidige week!
    </div>
</div>

<script minimize>
@Context.Items["dmjs"]

var todayLine = document.getElementById('today');
var lineInterval = undefined;
var weeks = document.getElementsByClassName('week');
var weekCarousel = document.getElementById('week-carousel');
var weeksArray = [{week: Number(weeks[0].dataset.week), year: Number(weeks[0].dataset.year)}];
var currentWeek = weeksArray[0].week;

function NextWeek() {
    //fetch the next week (weeksArray[weeksArray.length - 1] + 1)
    var weekToFetch = weeksArray[weeks.length - 1].week + 1;
    var yearToFetch = weeksArray[weeks.length - 1].year;
    
    currentWeek++;

    if (weekToFetch === 53) {
        weekToFetch = 1;
        yearToFetch += 1;
    }
    
    if (!elementHasNextNextSibling(getCurrentWeekElement())) {
        fetchWeek(weekToFetch, yearToFetch, true);
    }
}


function PreviousWeek() {
    //fetch the previous week (weeksArray[0] - 1)
    var weekToFetch = weeksArray[0].week - 1;
    var yearToFetch = weeksArray[0].year;
    
    currentWeek--;
    
    if (weekToFetch === 0) {
        weekToFetch = 52;
        yearToFetch -= 1;
    }

    if (!elementHasPreviousPreviousSibling(getCurrentWeekElement())) {
        fetchWeek(weekToFetch, yearToFetch, false);
    }

}

async function fetchWeek(week, year, append, retry = false) {        
    if (!isUserOnline) return;
    
    var newWeek = {week: week, year: year};
    
    //if append is true, add the new week to the end of the array and add it to the carousel
    if (append) {
        weeksArray.push(newWeek);
        weekCarousel.append(getLoadingSpinner(week, year));
    }
    else { //if append is false, add the new week to the start of the array and add it to the start of the carousel
        weeksArray.unshift(newWeek);
        weekCarousel.insertBefore(getLoadingSpinner(week, year), weekCarousel.firstChild);
        ScollToWeek(1);
    }
    
    //don't scroll, as long as the user is dragging
    
    
    fetch('/@(Model.roosterOrigin)/rooster?week=' + newWeek.week + '&year=' + newWeek.year + '&compact=true&no-framework=true')
    .then(response => {
    
        if (!response.ok && !retry){
            fetchWeek(week, year, append, true);
        }
        
        return response.text();
    })
    .then((html) => {    
        var weekElement = document.querySelector(`.week[data-week="${week}"]`);
        weekElement.style.transition = '0.25s';
        weekElement.style.opacity = 0;
        setTimeout(() => {
            weekElement.outerHTML = html;
            //fade in the new week
            weekElement = document.querySelector(`.week[data-week="${week}"]`);
            weekElement.style.opacity = 0;
            setTimeout(() => {
                //fade in the new week
                weekElement.style.transition = '0.25s';
                weekElement.style.opacity = 1;
                
                setTimeout(() => {
                    //remove style attribute
                    weekElement.style = "";
                    loadCustomAppointments(week, year);
                }, 250);
            }, 100);
        }, 100);
    });

}

function getLoadingSpinner(week, year) {
var html = `
<div class="week" data-week="${week}" data-year="${year}">    
    <div style="width: 100%;display: flex;flex-direction: column;justify-content: center;align-items: center;">
        <div class="loader-text">Rooster inladen</div>
        <div class="loading-dots-container">
            <div class="loading-dots"></div>
            <div class="loading-dots"></div>
            <div class="loading-dots"></div>
        </div>
    </div>
</div>
`;

return new DOMParser().parseFromString(html, 'text/html').body.firstChild;
}

Zermos.mainAfterLoad = () => {
    
    if (HasPreview('zermelo_smartwatch')) {
        ReplacePage('/@(Model.roosterOrigin)/Smartwatch');
    }

    loadCustomAppointments(@Model.MondayOfAppointmentsWeek.GetWeekNumber(), @Model.MondayOfAppointmentsWeek.Year); //load the custom appointments for the current week
    
    let nextWeek = weeksArray[weeksArray.length - 1].week + 1;
    let nextYear = weeksArray[weeksArray.length - 1].year;
    if (nextWeek === 53) {
        nextWeek = 1;
        nextYear += 1;
    }
    
    fetchWeek(nextWeek, nextYear, true);
    
    let previousWeek = weeksArray[0].week - 1;
    let previousYear = weeksArray[0].year;
    
    if (previousWeek === 0) {
        previousWeek = 52;
        previousYear -= 1;
    }
    
    fetchWeek(previousWeek, previousYear, false);
};

var animating = false;

//when i click and drag, the carousel should move. When the threshold of 30% of the width of the carousel is reached and the user let's go, the carousel should move to the next week (or previous week)
Zermos.mainBeforeLoad = () => {
    let startXTransform, endXTransform = 0;
    const minSwipePercentage = 30;
        
    var container = document.getElementsByClassName("week-carousel")[0];
    var dragging = false;
    var startX, scrollLeft;

    
    //MOUSE DOWN
    container.addEventListener("touchstart", function(e) {e.pageX = e.touches[0].pageX; mouseDown(e);}, {passive: true});
    container.addEventListener("mousedown", mouseDown);
    function mouseDown(e) {
        if (animating) return;
        dragging = true;
        startX = e.pageX || e.touches[0].pageX;
        startXTransform = Math.round(Number(weekCarousel.style.transform.match(/-?\d+/g)[0]) / 100) * 100;
        endXTransform = 0;
    }

    //MOUSE UP
    container.addEventListener("touchend", mouseUp);
    container.addEventListener("mouseup", mouseUp);
    function mouseUp() {
        if (!dragging) return;
        
        endXTransform = weekCarousel.style.transform.match(/-?\d+/g)[0];
        
        //startXTransform and endXTransform
        var otherXDif = startXTransform - endXTransform;      
        if (otherXDif > minSwipePercentage) {
            dragging = false;
            NextWeekAnim();
        }
        else if (otherXDif < -minSwipePercentage) {
            dragging = false;            
            PrevWeekAnim();
        }
        else
        {
            animating = true;
            ease(endXTransform, startXTransform, 250, (value) => {
                weekCarousel.style.transform = `translateX(${value}%)`;
            });
            
            dragging = false;
            animating = false;
        }
    }

    //MOUSE MOVE
    container.addEventListener("touchmove", function (e) {e.pageX = e.touches[0].pageX; mouseMove(e);}, {passive: true});
    container.addEventListener("mousemove", mouseMove);
    function mouseMove(e) {
        if (!dragging) return;
        var x = e.pageX || e.touches[0].pageX;
        
        //log xdiff
        var xDiff = x - startX;
        var xDiffPercentage = xDiff / container.offsetWidth * -100;
        
        var endXTransform = startXTransform - xDiffPercentage;
        
        if (endXTransform > 0) {
            endXTransform = 0;
        }
        else if (endXTransform < -100 * (weeksArray.length - 1)) {
            endXTransform = -100 * (weeksArray.length - 1);
        }
        
        weekCarousel.style.transform = `translateX(${endXTransform}%)`;
    }
    
    //when touch or mouse leaves the container, handle the mouseup event
    container.addEventListener("touchleave", mouseUp);
    container.addEventListener("mouseleave", mouseUp);
    
    
    //Current Time Line
    var now = new Date();
    var seconds = now.getHours() * 3600 + now.getMinutes() * 60 + now.getSeconds();
    var percentage = (seconds - todayLine.dataset.start) / (todayLine.dataset.end - todayLine.dataset.start) * 100;
    todayLine.style.top = percentage + "%";
    
    lineInterval = setInterval(() => {
        var now = new Date();
        var seconds = now.getHours() * 3600 + now.getMinutes() * 60 + now.getSeconds();
        var percentage = (seconds - todayLine.dataset.start) / (todayLine.dataset.end - todayLine.dataset.start) * 100;
        todayLine.style.top = percentage + "%";
    }, 15000);
};

Zermos.mainUnload(() => {
    clearInterval(lineInterval);
});

function ScollToWeek(amount) {
    //0% is the first child, -100% second child, -200% third child, etc.
    var current = weekCarousel.style.transform.match(/-?\d+/g);
    var currentWeek = Math.round(current[0] / 1);
    //this returns 0, -100, -200, -300, etc.
    //when amount is 1, it should go subtract 100 from the currentWeek, when amount is -1, it should add 100 to the currentWeek
    var newWeek = currentWeek - amount * 100;
    weekCarousel.style.transform = `translateX(${newWeek}%)`;
}

var isEasing = false;

function ease(start, end, time, callback) {
    isEasing = true;
    start = Number(start);
    end = Number(end);
    const startTime = Date.now();
    const duration = time;
    
    function update() {
        const currentTime = Date.now();
        const elapsed = currentTime - startTime;
    
        if (elapsed >= duration) {
          clearInterval(interval);
          callback(end);
          isEasing = false;
        } 
        else {
            const progress = elapsed / duration;
            const easedValue = start + (end - start) * (progress * (2 - progress));
            if (!isEasing) return;
            callback(easedValue);
        }
    }
    
    const interval = setInterval(update, 10); // Update approximately every 16 milliseconds
}

if (isUserOnline && !HasPreview('hide_zermelo_navigation')) {
    addButtonToPage('fa-arrow-right', NextWeekAnim, VerticalAlignment.BL);
    addButtonToPage('fa-arrow-left', PrevWeekAnim, VerticalAlignment.BL);
}

function NextWeekAnim() {
    disableButtons();
    
    //check if there is less or equal to 1 week between the current and one of the outer weeks
    var currentWeekElement = getCurrentWeekElement();
    var hasNextNextSibling = elementHasNextNextSibling(currentWeekElement);
    if (!hasNextNextSibling) {
        NextWeek();
    }
    
    //ease the carousel to the next week
    var current = Number(weekCarousel.style.transform.match(/-?\d+/g)[0]);
    var newWeek = current - 100;
    newWeek = Math.ceil(newWeek / 100) * 100;
    
    animating = true;
    ease(current, newWeek, 500, (value) => {
        weekCarousel.style.transform = `translateX(${value}%)`;
                
        if (value === newWeek) {
            enableButtons();
            animating = false;
        }
    });
}

function PrevWeekAnim() {
    disableButtons();
    
    //check if there is less or equal to 1 week between the current and one of the outer weeks
    var currentWeekElement = getCurrentWeekElement();
    var hasPreviousPreviousSibling = elementHasPreviousPreviousSibling(currentWeekElement);
    if (!hasPreviousPreviousSibling) {
        PreviousWeek();
    }
    
    //ease the carousel to the previous week
    var current = Number(weekCarousel.style.transform.match(/-?\d+/g)[0]);
    var newWeek = current + 100;
    newWeek = Math.floor(newWeek / 100) * 100;
    
    animating = true;
    ease(current, newWeek, 500, (value) => {
        weekCarousel.style.transform = `translateX(${value}%)`;
        
        if (value === newWeek) {
            enableButtons();
            animating = false;
        }
    });
}
    

function disableButtons() {
    var rightButtons = document.querySelectorAll('.fa-arrow-right');
    var leftButtons = document.querySelectorAll('.fa-arrow-left');
    
    // Enable the right buttons
    rightButtons.forEach(function(button) {
        button.classList.add("disabled")
    });

    // Enable the left buttons
    leftButtons.forEach(function(button) {
        button.classList.add("disabled")
    });
}

function enableButtons() {
    // Get all buttons with the specified classes
    var rightButtons = document.querySelectorAll('.fa-arrow-right');
    var leftButtons = document.querySelectorAll('.fa-arrow-left');

    // Disable the right buttons
    rightButtons.forEach(function(button) {
        button.classList.remove("disabled");
    });

    // Disable the left buttons
    leftButtons.forEach(function(button) {
        button.classList.remove("disabled");
    });
}

function OpenLessonDetail(base64){    
    const json = JSON.parse(atob(base64));
    
    var lessonDetail = new ZermosModal();
    if (json.id > 0) {
        lessonDetail.addHeading({text: (json.subject ?? '?') + " - " + new Date(json.start).toLocaleDateString("nl-NL", { weekday: 'long', month: 'short', day: 'numeric'})});
    }
    else {
        lessonDetail.addHeading({text: (json.subjects[0] ?? '?') + " - " + new Date(json.start * 1000).toLocaleDateString("nl-NL", { weekday: 'long', month: 'short', day: 'numeric'})});
    }
           
    lessonDetail.addText({text: "Je hebt:"});
    if (json.teachers && json.teachers.length > 0) 
        lessonDetail.addText({text: "• les van " + json.teachers.join(", ") + "."});
    if (json.locations && json.locations.length > 0) 
        lessonDetail.addText({text: "• in lokaal " + json.locations.join(", ") + "."});
    // if (json.groups.length > 0) 
    //     lessonDetail.addHeading({text: "• met groep " + json.groups.join(", ") + "."});
    else if (json.location) 
        lessonDetail.addText({text: "• in lokaal " + json.location + "."});

    if (json.description)
        lessonDetail.addText({text: json.description});

    // Check if actions array exists
    if (json.actions && json.actions.length > 0 && json.appointmentType !== "activity") {
        lessonDetail.addText({text: "Je hebt keuze uit de volgende vakken:"});
        // Loop through each action appointment
        json.actions.forEach((action) => {
            action = action.appointment;
            lessonDetail.addText({text: "• " + (action.subjects[0] ?? '?') + " van " + action.teachers.join(", ") + " in lokaal " + action.locations.join(", ")});
        });
    }
    
    
    if (json.id > 0) {
        var startDate = new Date(json.start);
        var endDate = new Date(json.end);
        //string is HH:MM
        var startDateString = startDate.getHours().toString().padStart(2, '0') + ":" + startDate.getMinutes().toString().padStart(2, '0');
        var endDateString = endDate.getHours().toString().padStart(2, '0') + ":" + endDate.getMinutes().toString().padStart(2, '0');
        lessonDetail.addText({text: "De les is van: " + startDateString + " tot " + endDateString});
        
        lessonDetail.addSpacer({height: 'var(--padding)'})
        .addButton({text: "Verwijder afspraak", onClick: () => {
            fetch('/Api/Afspraken/Verwijder?id=' + json.id, {
                method: 'DELETE'
            })
            .then(response => {
                if (response.ok) {
                    document.getElementById("custom-appointment-" + json.id).remove();                
                    lessonDetail.close();
                }
            });
        }});
    }
    //else json.start and json.end are in this format: 2024-09-11T12:00:00
    else {
        lessonDetail.addText({text: "De les is van: " + new Date(json.start * 1000).toLocaleDateString("nl-NL", {hour: '2-digit', minute:'2-digit'}).split(" ")[1] + " tot " + new Date(json.end * 1000).toLocaleDateString("nl-NL", {hour: '2-digit', minute:'2-digit'}).split(" ")[1]})

        lessonDetail.addSpacer({height: 'var(--padding)'})
        .addButton({text: "Bekijk huiswerk (indien beschikbaar)", onClick: () => {
                ReplacePage('/Somtoday/Huiswerk?les=' + json.start);
            }});
    }
    

    lessonDetail.open();
}

// add appointment button
addButtonToPage('fa-plus', () => {
    new ZermosModal()
    .addHeading({text: "Afspraak toevoegen"})
    .addText({text: "Voeg een afspraak toe aan je rooster."})
    .addLabel({text: "Datum van de afspraak"})
    .addDatePicker({required: true, initialDate: new Date()}) //
    .addLabel({text: "begintijd van de afspraak"})
    .addTimePicker({required: true}) //
    .addLabel({text: "eindtijd van de afspraak"})
    .addTimePicker({required: true}) //
    .addLabel({text: "Onderwerp"})
    .addTextInput({required: true}) //
    .addLabel({text: "Beschrijving (optioneel)"})
    .addTextInput({required: false}) //
    .addLabel({text: "Waar (optioneel)"})
    .addTextInput({required: false}) //
    .addButton({text: "Voeg toe", onClick: (ctx) => {
        
        var values = ctx.getComponentsValue().values;
        
        if (values.correct === false) return;
        
        var date = values[0].value;
        var startTime = values[1].value;
        var endTime = values[2].value;
        var subject = values[3].value;
        var description = values[4].value;    
        var location = values[5].value;    
        
        var dateObject = new Date(date);
        var startTimeObject = dateObject.setHours(startTime.split(":")[0], startTime.split(":")[1]);
        var endTimeObject = dateObject.setHours(endTime.split(":")[0], endTime.split(":")[1]);
        var startTimeString = new Date(startTimeObject).toLocaleDateString("nl-NL", {day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit'}).replace(",", "");
        var endTimeString = new Date(endTimeObject).toLocaleDateString("nl-NL", {day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit'}).replace(",", "");

        var formData = new FormData();
        formData.append("start", startTimeString);
        formData.append("end", endTimeString);
        formData.append("appointmentType", "custom");
        formData.append("subject", subject);
        formData.append("location", location);
        formData.append("description", description);
        
        fetch('/Api/Afspraken/Nieuw', {
            method: 'POST',
            body: formData
        })
        .then(response => {
            if (response.ok) {
                ctx.close();
                var week = getWeekNumber(dateObject);
                var year = dateObject.getFullYear();
                loadCustomAppointments(week, year);
            }
        });
    }})
    .open();

}, !HasPreview('hide_zermelo_navigation') ? VerticalAlignment.TL : VerticalAlignment.BT, !HasPreview('hide_zermelo_navigation') ? Background.Primary : Background.Accent);

// share button
if (isUserOnline) {
    addButtonToPage('fa-share-from-square', () => {
       
        new ZermosModal()
        .addHeading({text: "Deel je rooster"})
        .addText({text: "Deel je rooster met je vrienden! De pagina die je nu ziet wordt als link gedeeld, zij hoeven geen account hiervoor te hebben."})
        .addDatePicker({required: true, initialDate: new Date(Date.now() + 604800000)}) // 7 days from now
        .addButton({text: "Deel", onClick: (ctx) => {
            
            var values = ctx.getComponentsValue().values;
            
            if (values.correct === false) return;
            
            
            const date = values[0].value;
            const dateObject = new Date(date);
            const currentYear = new Date().getFullYear();
            var expires_at = Math.floor(dateObject.getTime() / 1000);
            
            //return's an plan string url
            fetch('/@(Model.roosterOrigin)/rooster/genereer-token?year=' + currentYear+ '&week=' + currentWeek + '&expires_at=' + expires_at)
            .then(response => response.text())
            .then((url) => {
                new ZermosModal()
                .addHeading({text: "Deel je rooster"})
                .addText({text: "Deel je rooster met je vrienden! De pagina die je nu ziet wordt als link gedeeld, zij hoeven geen account hiervoor te hebben."})
                .addUrl({url: "/gedeeld/" + url, showFull: false, copyButton: true})
                .open();
            });
        }})
        .open();
        
    }, VerticalAlignment.TL, Background.Primary);
}

// share button
addButtonToPage('fa-list', () => {
    
    var vakkenLijst = [];
    @foreach (var item in zermeloTodayLessons)
    {
        if (item.subjects != null && item.teachers != null && item.subjects.Count > 0 && item.teachers.Count > 0)
        {
            <text>vakkenLijst.push('@item.subjects[0] van @item.teachers[0]');</text>
        }
        else if (item.subjects != null && item.subjects.Count > 0)
        {
            <text>vakkenLijst.push('@item.subjects[0]');</text>
        }
    }
   
   
    var paklijst = new ZermosModal()
    .addHeading({text: "Je paklijst"})
    .addText({text: "Je hebt vandaag de volgende vakken:"});

    if (vakkenLijst === null || vakkenLijst.length === 0) {
        paklijst.addText({text: "Je hebt vandaag geen vakken of er is iets fout gegaan bij het ophalen van de vakken."});
    }
    else {
        vakkenLijst = vakkenLijst.filter((item, index) => vakkenLijst.indexOf(item) === index);
        paklijst.addList({items: vakkenLijst, listType: "ul"});
    }

    paklijst.addButton({text: "Ok!", onClick: (ctx) => {ctx.close()}})
    .open();

}, VerticalAlignment.TL, Background.Primary);

var notCurrentWeek = document.getElementsByClassName('notCurrentWeek')[0];
var clicked = 5;

notCurrentWeek.addEventListener('click', () => {
    if (clicked <= 1) {
        HideNotCurrentWeek()
        new ZermosModal()
        .addHeading({text: "Dit is niet deze week!"})
        .addText({text: "Je zit nu in week " + weeks[1].dataset.week + " van " + weeks[1].dataset.year + "."})
        .addText({text: "De huidige datum is " + new Date().toLocaleDateString("nl-NL", { weekday: 'long', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric'}) + "."})
        .addText({text: "Handig om te weten, toch Teun?"})
        .addButton({text: "Ja dat klopt...", onClick: (ctx) => {
            ShowNotCurrentWeek();
            ctx.close();
        }})
        .open();
        
        clicked = 5;
    }
    else 
        clicked--;
});

function ShowNotCurrentWeek() {
    if (!HasPreview('zermelo_not_current_week')) {
        HideNotCurrentWeek();
        return;
    }
    notCurrentWeek.style.bottom = "";
}

function HideNotCurrentWeek() {
    if (!HasPreview('zermelo_not_current_week')) 
        return;
   
    notCurrentWeek.style.bottom = "-50px";
}

function getCurrentWeek() {
    var date = new Date();
    var onejan = new Date(date.getFullYear(), 0, 1);
    var week = Math.ceil((((date - onejan) / 86400000) + onejan.getDay() + 1) / 7);
    return week;
}

var getCurrentWeekElement = () => {
    let index = (Number(weekCarousel.style.transform.match(/-?\d+/g)[0]) * -1) / 100;
    index = Math.floor(index);
    return (index >= 0 && index < weeks?.length) ? weeks[index] : null;
};

var elementHasNextNextSibling = (element) => {
    return element?.nextElementSibling?.nextElementSibling !== null && element?.nextElementSibling?.nextElementSibling !== undefined;
};

var elementHasPreviousPreviousSibling = (element) => {
    return element?.previousElementSibling?.previousElementSibling !== null && element?.previousElementSibling?.previousElementSibling !== undefined;
};

function getWeekNumber(date) {
    var d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
    var dayNum = d.getUTCDay() || 7;
    d.setUTCDate(d.getUTCDate() + 4 - dayNum);
    var yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
    return Math.ceil((((d - yearStart) / 86400000) + 1) / 7);
}


function loadCustomAppointments(week, year) {

    var curr = undefined;
    var start = 8 * 3600; // 8:00
    var end = 17 * 3600; // 17:00
    if (week && year) {
        curr = document.querySelector(`.week[data-week="${week}"][data-year="${year}"]`);
    }
    else {
        curr = getCurrentWeekElement();
        week = curr.dataset.week;
        year = curr.dataset.year;
    }
    
    if (!curr) return;
    
    start = curr.dataset.start;
    end = curr.dataset.end;
    
    fetch("/api/Afspraken/AlleAfspraken?jaarWeek=" + year + week)
    .then(response => response.json())
    .then(data => {
        data.forEach(item => {
            let startDate = new Date(item.start);
            let endDate = new Date(item.end);

            // Helper function to get the number of seconds from midnight
            function getSecondsFromMidnight(date) {
                return date.getHours() * 3600 + date.getMinutes() * 60 + date.getSeconds();
            }

            let startSeconds = getSecondsFromMidnight(startDate);
            let endSeconds = getSecondsFromMidnight(endDate);

            let dayOfWeek = startDate.getDay(); // Sunday is 0, Monday is 1, etc.
            let index = (dayOfWeek + 6) % 7; // Adjust so that Monday is 0 and Sunday is 6

            var lesdag = curr.querySelector(".lessons-container .lesdag:nth-child(" + (index + 1) + ")");
            
            if (lesdag) {
                var les = document.createElement("div");
                les.className = "lesson-time-based custom";
                les.id = "custom-appointment-" + item.id;
                les.style.top = (startSeconds - start) / (end - start) * 100 + "%";
                les.style.height = "calc(" + (endSeconds - startSeconds) / (end - start) * 100 + "% - 8px)";
                les.style.backgroundColor = item.color;
                les.setAttribute("onclick", "OpenLessonDetail('" + btoa(JSON.stringify(item)) + "')");
                
                var title = document.createElement("p");
                title.innerText = item.subject ?? "";
                
                var description = document.createElement("p");
                description.innerText = item.description ?? "";
                
                les.appendChild(title);
                les.appendChild(description);      
                
                les.style.opacity = 0;
                les.style.transition = "opacity 0.25s ease";
                setTimeout(() => {
                    les.style.opacity = 1;
                }, 100);
                          
                lesdag.appendChild(les);
            }
        });
    })
    .catch(error => {
        console.error("Error fetching data:", error);
    });
}

</script>