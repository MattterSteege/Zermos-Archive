@using System.Globalization
@using Newtonsoft.Json
@using Zermos_Web.Models.zermelo
@using Zermos_Web.Utilities
@model Zermos_Web.Models.zermelo.ZermeloRoosterModel

@{
    var zermeloTodayLessons = Model.appointments.Where(x => x.start.ToDateTime().Date == DateTime.Now.Date).ToList();
}

<link rel="stylesheet" href="/css/zermelo.css"/>

<div class="main-container">
    <div class="week-carousel" id="week-carousel" style="transform: translateX(-0%);">
        @(await Html.PartialAsync("Rooster-week", Model))
    </div>
    <div class="notCurrentWeek" style="bottom: -50px;">
        Dit is niet de huidige week!
    </div>
</div>

<script>
var weeks = document.getElementsByClassName('week');
var weekCarousel = document.getElementById('week-carousel');
var weeksArray = [{week: Number(weeks[0].dataset.week), year: Number(weeks[0].dataset.year)}];
var currentWeek = weeksArray[0].week;

function NextWeek() {
    //fetch the next week (weeksArray[weeksArray.length - 1] + 1)
    var weekToFetch = weeksArray[weeks.length - 1].week + 1;
    var yearToFetch = weeksArray[weeks.length - 1].year;
    
    console.log(weekToFetch, currentWeek);
    
    if (weekToFetch === 53) {
        weekToFetch = 1;
        yearToFetch += 1;
    }
    
    //check if current week is the same as the week to fetch
    //if (weekToFetch === currentWeek + 1) {
        fetchWeek(weekToFetch, yearToFetch, true);
    //}
}


function PreviousWeek() {
    //fetch the previous week (weeksArray[0] - 1)
    var weekToFetch = weeksArray[0].week - 1;
    var yearToFetch = weeksArray[0].year;
    
    if (weekToFetch === 0) {
        weekToFetch = 52;
        yearToFetch -= 1;
    }
    
    //check if current week is the same as the week to fetch
    //if (weekToFetch === currentWeek - 1) {
        fetchWeek(weekToFetch, yearToFetch, false);
    //}

}

async function fetchWeek(week, year, append) {        
    
    var newWeek = {week: week, year: year};
    
    //if append is true, add the new week to the end of the array and add it to the carousel
    if (append) {
        weeksArray.push(newWeek);
        weekCarousel.append(getLoadingSpinner(week, year));
    }
    else { //if append is false, add the new week to the start of the array and add it to the start of the carousel
        weeksArray.unshift(newWeek);
        weekCarousel.insertBefore(getLoadingSpinner(week, year), weekCarousel.firstChild);
        ScollToWeek(1);
    }
    
    //don't scroll, as long as the user is dragging
    
    
    fetch('/zermelo/rooster?week=' + newWeek.week + '&year=' + newWeek.year + '&compact=true&no-framework=true')
    .then(response => response.text())
    .then((html) => {
        var weekElement = document.querySelector(`.week[data-week="${week}"]`);
        weekElement.style.transition = '0.25s';
        weekElement.style.opacity = 0;
        setTimeout(() => {
            weekElement.outerHTML = html;
            //fade in the new week
            weekElement = document.querySelector(`.week[data-week="${week}"]`);
            weekElement.style.opacity = 0;
            setTimeout(() => {
                //fade in the new week
                weekElement.style.transition = '0.25s';
                weekElement.style.opacity = 1;
                
                setTimeout(() => {
                    //remove style attribute
                    weekElement.attributes.removeNamedItem('style');
                }, 250);
            }, 100);
        }, 100);
    });
}

function getLoadingSpinner(week, year) {
var html = `
<div class="week" data-week="${week}" data-year="${year}">    
    <div style="width: 100%;display: flex;flex-direction: column;justify-content: center;align-items: center;">
        <div class="loader-text">Rooster inladen</div>
        <div class="loading-dots-container">
            <div class="loading-dots"></div>
            <div class="loading-dots"></div>
            <div class="loading-dots"></div>
        </div>
    </div>
</div>
`;

return new DOMParser().parseFromString(html, 'text/html').body.firstChild;
}

Zermos.mainAfterLoad = () => {
    
    if (HasPreview('zermelo_smartwatch')) {
        ReplacePage('/Zermelo/Smartwatch');
    }
    
    let nextWeek = weeksArray[weeksArray.length - 1].week + 1;
    let nextYear = weeksArray[weeksArray.length - 1].year;
    if (nextWeek === 53) {
        nextWeek = 1;
        nextYear += 1;
    }
    
    fetchWeek(nextWeek, nextYear, true);
    
    let previousWeek = weeksArray[0].week - 1;
    let previousYear = weeksArray[0].year;
    
    if (previousWeek === 0) {
        previousWeek = 52;
        previousYear -= 1;
    }
    
    fetchWeek(previousWeek, previousYear, false);
};

var animating = false;

//when i click and drag, the carousel should move. When the threshold of 30% of the width of the carousel is reached and the user let's go, the carousel should move to the next week (or previous week)
Zermos.mainBeforeLoad = () => {
    let startXTransform, endXTransform = 0;
    const minSwipePercentage = 30;
        
    var container = document.getElementsByClassName("week-carousel")[0];
    var dragging = false;
    var startX, scrollLeft;

    
    //MOUSE DOWN
    container.addEventListener("touchstart", function(e) {e.pageX = e.touches[0].pageX; mouseDown(e);}, {passive: true});
    container.addEventListener("mousedown", mouseDown);
    function mouseDown(e) {
        if (animating) return;
        dragging = true;
        startX = e.pageX || e.touches[0].pageX;
        startXTransform = Math.round(Number(weekCarousel.style.transform.match(/-?\d+/g)[0]) / 100) * 100;
        endXTransform = 0;
    }

    //MOUSE UP
    container.addEventListener("touchend", mouseUp);
    container.addEventListener("mouseup", mouseUp);
    function mouseUp() {
        if (!dragging) return;
        
        endXTransform = weekCarousel.style.transform.match(/-?\d+/g)[0];
        
        //startXTransform and endXTransform
        var otherXDif = startXTransform - endXTransform;      
        if (otherXDif > minSwipePercentage) {
            //var newX = startXTransform - 100;
            //animating = true;
            dragging = false;
            // ease(endXTransform, newX, 500, (value) => {
            //     weekCarousel.style.transform = `translateX(${value}%)`;
            //    
            //     if (value === newX) {
            //         dragging = false;
            //         animating = false;
            //        
            //         if (newX === -100 * (weeksArray.length - 1)) {
            //             NextWeek();
            //         }
            //     }
            // });
            
            NextWeekAnim();           
            return;
        }
        else if (otherXDif < -minSwipePercentage) {
            //var newX = startXTransform + 100;
            //animating = true;
            dragging = false;
            //animating = false;
            // ease(endXTransform, newX, 500, (value) => {
            //     weekCarousel.style.transform = `translateX(${value}%)`;
            //    
            //     if (value === newX) {
            //         dragging = false;
            //         animating = false;
            //        
            //         if (newX === 0) {
            //             PreviousWeek();
            //         }
            //     }
            // });
            
            PrevWeekAnim();          
            return;
        }
        else
        {
            animating = true;
            ease(endXTransform, startXTransform, 250, (value) => {
                weekCarousel.style.transform = `translateX(${value}%)`;
            });
            
            dragging = false;
            animating = false;
            
            return;
        }
    }

    //MOUSE MOVE
    container.addEventListener("touchmove", function (e) {e.pageX = e.touches[0].pageX; mouseMove(e);}, {passive: true});
    container.addEventListener("mousemove", mouseMove);
    function mouseMove(e) {
        if (!dragging) return;
        var x = e.pageX || e.touches[0].pageX;
        
        //log xdiff
        var xDiff = x - startX;
        var xDiffPercentage = xDiff / container.offsetWidth * -100;
        
        var endXTransform = startXTransform - xDiffPercentage;
        
        if (endXTransform > 0) {
            endXTransform = 0;
        }
        else if (endXTransform < -100 * (weeksArray.length - 1)) {
            endXTransform = -100 * (weeksArray.length - 1);
        }
        
        weekCarousel.style.transform = `translateX(${endXTransform}%)`;
    }
    
    //when touch or mouse leaves the container, handle the mouseup event
    container.addEventListener("touchleave", mouseUp);
    container.addEventListener("mouseleave", mouseUp);
};

function ScollToWeek(amount) {
    //0% is the first child, -100% second child, -200% third child, etc.
    var current = weekCarousel.style.transform.match(/-?\d+/g);
    var currentWeek = Math.round(current[0] / 1);
    //this returns 0, -100, -200, -300, etc.
    //when amount is 1, it should go subtract 100 from the currentWeek, when amount is -1, it should add 100 to the currentWeek
    var newWeek = currentWeek - amount * 100;
    weekCarousel.style.transform = `translateX(${newWeek}%)`;
}

var isEasing = false;

function ease(start, end, time, callback) {
    isEasing = true;
    start = Number(start);
    end = Number(end);
    const startTime = Date.now();
    const duration = time;
    
    function update() {
        const currentTime = Date.now();
        const elapsed = currentTime - startTime;
    
        if (elapsed >= duration) {
          clearInterval(interval);
          callback(end);
          isEasing = false;
        } 
        else {
            const progress = elapsed / duration;
            const easedValue = start + (end - start) * (progress * (2 - progress));
            if (!isEasing) return;
            callback(easedValue);
        }
    }
    
    const interval = setInterval(update, 10); // Update approximately every 16 milliseconds
}

addButtonToPage('fa-arrow-right', NextWeekAnim, VerticalAlignment.BL);
addButtonToPage('fa-arrow-left', PrevWeekAnim, VerticalAlignment.BL);

function NextWeekAnim() {
    disableButtons();
    NextWeek();
    
    //ease the carousel to the next week
    var current = Number(weekCarousel.style.transform.match(/-?\d+/g)[0]);
    var newWeek = current - 100;
    newWeek = Math.ceil(newWeek / 100) * 100;
    
    console.log(current, newWeek);
    animating = true;
    ease(current, newWeek, 500, (value) => {
        weekCarousel.style.transform = `translateX(${value}%)`;
                
        if (value === newWeek) {
            enableButtons();
            animating = false;
        }
    });
}

function PrevWeekAnim() {
    disableButtons();
    PreviousWeek();
    
    //ease the carousel to the previous week
    var current = Number(weekCarousel.style.transform.match(/-?\d+/g)[0]);
    var newWeek = current + 100;
    newWeek = Math.floor(newWeek / 100) * 100;
    
    console.log(current, newWeek);
    animating = true;
    ease(current, newWeek, 500, (value) => {
        weekCarousel.style.transform = `translateX(${value}%)`;
        
        if (value === newWeek) {
            enableButtons();
            animating = false;
        }
    });
}
    

function disableButtons() {
    var rightButtons = document.querySelectorAll('.fa-arrow-right');
    var leftButtons = document.querySelectorAll('.fa-arrow-left');
    
    // Enable the right buttons
    rightButtons.forEach(function(button) {
        button.classList.add("disabled")
    });

    // Enable the left buttons
    leftButtons.forEach(function(button) {
        button.classList.add("disabled")
    });
}

function enableButtons() {
    // Get all buttons with the specified classes
    var rightButtons = document.querySelectorAll('.fa-arrow-right');
    var leftButtons = document.querySelectorAll('.fa-arrow-left');

    // Disable the right buttons
    rightButtons.forEach(function(button) {
        button.classList.remove("disabled");
    });

    // Disable the left buttons
    leftButtons.forEach(function(button) {
        button.classList.remove("disabled");
    });
}

function OpenLessonDetail(base64){    
    const json = JSON.parse(atob(base64));
    
    var lessonDetail = new ZermosModal()
    .setTitle((json.subjects[0] ?? '?') + " - " + new Date(json.start * 1000).toLocaleDateString("nl-NL", { weekday: 'long', month: 'short', day: 'numeric'}));
    
    lessonDetail.addText("Je hebt:");
    if (json.teachers.length > 0) 
        lessonDetail.addText("• les van " + json.teachers.join(", ") + ".");
    if (json.locations.length > 0) 
        lessonDetail.addText("• in lokaal " + json.locations.join(", ") + ".");
    // if (json.groups.length > 0) 
    //     lessonDetail.addText("• met groep " + json.groups.join(", ") + ".");   

    // Check if actions array exists
    if (json.actions && json.actions.length > 0 && json.appointmentType !== "activity") {
        lessonDetail.addText("Je hebt keuze uit de volgende vakken:");
        // Loop through each action appointment
        json.actions.forEach((action) => {
            action = action.appointment;
            lessonDetail.addText("• " + (action.subjects[0] ?? '?') + " van " + action.teachers.join(", ") + " in lokaal " + action.locations.join(", "));
        });
    }
    
    lessonDetail.addText("De les is van: " + new Date(json.start * 1000).toLocaleDateString("nl-NL", {hour: '2-digit', minute:'2-digit'}).split(" ")[1] + " tot " + new Date(json.end * 1000).toLocaleDateString("nl-NL", {hour: '2-digit', minute:'2-digit'}).split(" ")[1])
    
    lessonDetail.addText("&ZeroWidthSpace;")
    .setSubmitButtonLabel("Bekijk huiswerk")
    .onSubmit(() => {
        ReplacePage('/Somtoday/Huiswerk?les=' + json.start);
    });
       
    // for (var i = 0; i < json.status.length; i++) {
    //     var status = json.status[i];
    //
    //     if (status['code'] === 2002) continue;
    //    
    //     lessonDetail.addText("• " + status.nl);
    // }
    
    lessonDetail.open();
}

// share button
addButtonToPage('fa-share-from-square', () => {
   
    new ZermosModal()
    .setTitle("Deel je rooster")
    .addText("Deel je rooster met je vrienden! De pagina die je nu ziet wordt als link gedeeld, zij hoeven geen account hiervoor te hebben.")
    .addDateInput("Wat is de verval datum?", new Date(Date.now() + 604800000))
    .hideSubmitButton()
    .addButton("Deel", () => {
        
        const date = document.getElementById('input1').value;
        const dateObject = new Date(date);
        
        var expires_at = Math.floor(dateObject.getTime() / 1000);
        
        //return's an plan string url
        fetch('/zermelo/GenereerToken?year=' + weeks[1].dataset.year + '&week=' + weeks[1].dataset.week + '&expires_at=' + expires_at)
        .then(response => response.text())
        .then((url) => {
            new ZermosModal()
            .setTitle("Deel je rooster")
            .addText("Deel je rooster met je vrienden! De pagina die je nu ziet wordt als link gedeeld, zij hoeven geen account hiervoor te hebben.")
            .addText("De link is: " + url)
            .hideSubmitButton()
            .addButton("Kopieer link", () => {
                copyToClipboard(url);
            })
            .open();
        });
    })
    .open();
    
}, VerticalAlignment.TL, Background.Primary);

// share button
addButtonToPage('fa-list', () => {
   
    new ZermosModal()
    .setTitle("Je paklijst")
    .setSubmitButtonLabel("Oke")
    .addText("Je hebt vandaag de volgende vakken:")
    @{
        //foreach (Appointment les in zermeloTodayLessons.Distinct())
        //where zermeloTodayLessons[].subject is distinct
        foreach (Appointment les in zermeloTodayLessons.GroupBy(x => x.subjects[0]).Select(x => x.First()))
        {
            if (les.cancelled)
            {
                continue;
            }

            @Html.Raw("    .addText(\"" + (les.subjects.Count > 0 ? les.subjects[0] : "-") + " van " + (les.teachers.Count > 0 ? les.teachers[0] : "-") + "\")")
        }
    }
    
    .open();
    
}, VerticalAlignment.TL, Background.Primary);



var notCurrentWeek = document.getElementsByClassName('notCurrentWeek')[0];
var clicked = 5;

notCurrentWeek.addEventListener('click', () => {
    if (clicked <= 1) {
        HideNotCurrentWeek()
        new ZermosModal()
        .setTitle("Dit is niet deze week!")
        .addText("Je zit nu in week " + weeks[1].dataset.week + " van " + weeks[1].dataset.year + ".")
        .addText("De huidige datum is " + new Date().toLocaleDateString("nl-NL", { weekday: 'long', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric'}) + ".")
        .addText("Handig om te weten, toch Teun?")
        .setSubmitButtonLabel("Ja dat klopt...")
        .onSubmit(() => {
            ShowNotCurrentWeek();
        })
        .open();
        
        clicked = 5;
    }
    else 
        clicked--;
});

function ShowNotCurrentWeek() {
    if (!HasPreview('zermelo_not_current_week')) {
        HideNotCurrentWeek();
        return;
    }
    notCurrentWeek.style.bottom = "";
}

function HideNotCurrentWeek() {
    if (!HasPreview('zermelo_not_current_week')) 
        return;
   
    notCurrentWeek.style.bottom = "-50px";
}

function getCurrentWeek() {
    var date = new Date();
    var onejan = new Date(date.getFullYear(), 0, 1);
    var week = Math.ceil((((date - onejan) / 86400000) + onejan.getDay() + 1) / 7);
    return week;
}
</script>