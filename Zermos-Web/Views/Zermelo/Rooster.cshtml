@using System.Globalization
@using Newtonsoft.Json
@using Zermos_Web.Models.zermelo
@using Zermos_Web.Utilities
@model Zermos_Web.Models.zermelo.ZermeloRoosterModel

@{
    var zermeloTodayLessons = Model.appointments.Where(x => x.start.ToDateTime().Date == DateTime.Now.Date).ToList();
}

<link rel="stylesheet" href="/css/zermelo.css"/>
<script src="/js/dom-to-image.js"></script>

<div class="main-container">
    <div class="week-carousel" id="week-carousel">
        <div class="week" data-week="@Model.MondayOfAppointmentsWeek.GetWeekNumber()" data-year="@Model.MondayOfAppointmentsWeek.Year" data-unix="@Model.MondayOfAppointmentsWeek.ToUnixTime()"></div>
        <div class="week" data-week="@Model.MondayOfAppointmentsWeek.GetWeekNumber()" data-year="@Model.MondayOfAppointmentsWeek.Year" data-unix="@Model.MondayOfAppointmentsWeek.ToUnixTime()">
            <div class="times-container">
                <ul>
                    <!--        20 horizontal lines-->
                    <li></li>
                    <li></li>
                    <li></li>
                    <li></li>
                    <li></li>
                    <li></li>
                    <li></li>
                    <li></li>
                    <li></li>
                    <li></li>
                    <li></li>
                    <li></li>
                    <li></li>
                </ul>
            </div>
            <div class="days-container">
                <ul>
                    <li>@Model.MondayOfAppointmentsWeek.GetWeekNumber()</li>
                    <li>
                        Ma
                        <div class="date">@Model.MondayOfAppointmentsWeek.ToString("dd MMM")</div>
                    </li>
                    <li>
                        Di
                        <div class="date">@Model.MondayOfAppointmentsWeek.AddDays(1).ToString("dd MMM")</div>
                    </li>
                    <li>
                        Wo
                        <div class="date">@Model.MondayOfAppointmentsWeek.AddDays(2).ToString("dd MMM")</div>
                    </li>
                    <li>
                        Do
                        <div class="date">@Model.MondayOfAppointmentsWeek.AddDays(3).ToString("dd MMM")</div>
                    </li>
                    <li>
                        Vr
                        <div class="date">@Model.MondayOfAppointmentsWeek.AddDays(4).ToString("dd MMM")</div>
                    </li>
                </ul>
            </div>
            <div class="hours-container">
                <ul>
                    <li></li>
                    <li>08:20</li> <!-- 1st hour -->
                    <li>09:10</li> <!-- 2nd hour -->
                    <li>10:00</li> <!-- break -->
                    <li>10:15</li> <!-- 3rd hour -->
                    <li>11:05</li> <!-- 4th hour -->
                    <li>11:55</li> <!-- break -->
                    <li>12:25</li> <!-- 5th hour -->
                    <li>13:15</li> <!-- 6th hour -->
                    <li>14:05</li> <!-- 7th hour -->
                    <li>14:55</li> <!-- break -->
                    <li>15:10</li> <!-- 8th hour -->
                    <li>16:00</li> <!-- 9th hour -->
                    <li></li> <!-- end schoolday -->
                </ul>
            </div>
            <div class="lessons-container">
                <ul>
                    @foreach (DayOfWeek day in Enum.GetValues(typeof(DayOfWeek)))
                    {
                        @if (Model.appointments.Count == 0)
                        {
                            <li class="empty">Wow, de hele week vrij!</li>
                            break;
                        }

                        if (day != DayOfWeek.Saturday && day != DayOfWeek.Sunday)
                        {
                            <li class="lesdag">
                                @{
                                    IEnumerable<Appointment> appointmentList = Model.appointments.Where(a => a.start.ToDateTime().DayOfWeek == day).ToList();

                                    if (!appointmentList.Any())
                                        continue;

                                    //100 means 100% of the height of the container
                                    //510 means 510 minutes between 08:20 and 16:50
                                    var minuteHeight = 100f / 510f;

                                    //get the date of the day that the appointments are for
                                    //8 * 60 + 20 = 500 minutes means 08:20
                                    var dayStartUnix = appointmentList.First().start; // this is unix. make the unix time to be the same date but the time should be 08:20
                                    dayStartUnix -= dayStartUnix % 86400; // remove the time from the unix time
                                    dayStartUnix += 8 * 60 * 60 + 20 * 60; // add 8 hours and 20 min to the unix time (08:20)

                                    // Define the time zones for UTC and the Dutch timezone
                                    TimeZoneInfo dutchTimeZone = TimeZoneInfo.FindSystemTimeZoneById("W. Europe Standard Time"); // This ID represents the Dutch timezone
                                    DateTime utcDateTime = DateTimeOffset.FromUnixTimeSeconds(dayStartUnix).UtcDateTime;
                                    DateTime dutchDateTime = TimeZoneInfo.ConvertTimeFromUtc(utcDateTime, dutchTimeZone);
                                    TimeSpan timeDifference = dutchDateTime - utcDateTime;
                                    int timeDifferenceInSeconds = (int) timeDifference.TotalSeconds;

                                    dayStartUnix -= timeDifferenceInSeconds;
                                }

                                @foreach (var appointment in appointmentList)
                                {
                                    //percentage from top = (appointment start time - dayStartUnix) * minuteHeight *@
                                    //appointment height = (appointment end time - appointment start time) * minuteHeight

                                    var appointmentHeight = (appointment.end - appointment.start) / 60f * minuteHeight;
                                    var lessonStart = appointment.start;
                                    var appointmentTop = (lessonStart - dayStartUnix) / 60f * minuteHeight;

                                    if (appointment.actions.Count == 0)
                                    {
                                        <div class="lesson-time-based @(appointment.cancelled ? "canceled" : "") @appointment.appointmentType" style="top: @(appointmentTop.ToString("0.000", CultureInfo.InvariantCulture))%; height: calc(@(appointmentHeight.ToString("0.000", CultureInfo.InvariantCulture))% - 8px);" onclick="OpenLessonDetail('@(appointment.ObjectToBase64String())')">
                                            @(appointment.subjects.Count > 0 ? Html.Raw("<p>" + appointment.subjects[0] + "</p>") : "")
                                            @(appointment.locations.Count > 0 ? Html.Raw("<p>" + appointment.locations[0] + "</p>") : "")
                                        </div>
                                    }
                                    else if (appointment.appointmentType == "conflict")
                                    {
                                        <div class="lesson-time-based @(appointment.actions[0].appointment.cancelled ? "canceled" : "") conflict" style="top: @(appointmentTop.ToString("0.000", CultureInfo.InvariantCulture))%; height: calc(@(appointmentHeight.ToString("0.000", CultureInfo.InvariantCulture))% - 8px); width: calc(50% - 4px);" onclick="OpenLessonDetail('@(appointment.actions[0].appointment.ObjectToBase64String())')">
                                            @(appointment.actions[0].appointment.subjects.Count > 0 ? Html.Raw("<p>" + appointment.actions[0].appointment.subjects[0] + "</p>") : "")
                                            @(appointment.actions[0].appointment.locations.Count > 0 ? Html.Raw("<p>" + appointment.actions[0].appointment.locations[0] + "</p>") : "")
                                        </div>
                                        
                                        <div class="lesson-time-based @(appointment.actions[1].appointment.cancelled ? "canceled" : "")" style="top: @(appointmentTop.ToString("0.000", CultureInfo.InvariantCulture))%; height: calc(@(appointmentHeight.ToString("0.000", CultureInfo.InvariantCulture))% - 8px); width: calc(50% - 8px); left: 50%;" onclick="OpenLessonDetail('@(appointment.actions[1].appointment.ObjectToBase64String())')">
                                            @(appointment.actions[1].appointment.subjects.Count > 0 ? Html.Raw("<p>" + appointment.actions[1].appointment.subjects[0] + "</p>") : "")
                                            @(appointment.actions[1].appointment.locations.Count > 0 ? Html.Raw("<p>" + appointment.actions[1].appointment.locations[0] + "</p>") : "")
                                        </div>
                                    }
                                    else if (appointment.appointmentType == "choice" && appointment.actions.Count == 1)
                                    {
                                        <div class="lesson-time-based @(appointment.actions[0].appointment.cancelled ? "canceled" : "") choice" style="top: @(appointmentTop.ToString("0.000", CultureInfo.InvariantCulture))%; height: calc(@(appointmentHeight.ToString("0.000", CultureInfo.InvariantCulture))% - 8px);" onclick="OpenLessonDetail('@(appointment.actions[0].appointment.ObjectToBase64String())')">
                                            @(appointment.actions[0].appointment.subjects.Count > 0 ? Html.Raw("<p>" + appointment.actions[0].appointment.subjects[0] + "</p>") : "")
                                            @(appointment.actions[0].appointment.locations.Count > 0 ? Html.Raw("<p>" + appointment.actions[0].appointment.locations[0] + "</p>") : "")
                                        </div>
                                    }
                                    //choice of more than 1 actions
                                    // else (appointment.appointmentType == "choice" && appointment.actions.Count == 0)
                                    // {
                                    //     <div class="lesson-time-based @(appointment.cancelled ? "canceled" : "") @appointment.appointmentType" style="top: @(appointmentTop.ToString("0.000", CultureInfo.InvariantCulture))%; height: calc(@(appointmentHeight.ToString("0.000", CultureInfo.InvariantCulture))% - 8px);" onclick="OpenLessonDetail('@(appointment.ObjectToBase64String())')">
                                    //         @(appointment.subjects.Count > 0 ? Html.Raw("<p>" + appointment.subjects[0] + "</p>") : "")
                                    //         @(appointment.locations.Count > 0 ? Html.Raw("<p>" + appointment.locations[0] + "</p>") : "")
                                    //     </div>
                                    // }
                                }
                            </li>
                        }
                    }
                </ul>

            </div>
        </div>
        <div class="week" data-week="@Model.MondayOfAppointmentsWeek.GetWeekNumber()" data-year="@Model.MondayOfAppointmentsWeek.Year" data-unix="@Model.MondayOfAppointmentsWeek.ToUnixTime()"></div>
    </div>
</div>

<script>
var weeks = document.getElementsByClassName('week');
var weekCarousel = document.getElementById('week-carousel');
var isFetching = false; // Flag to track whether a fetch operation is in progress

function NextWeek(isInitial = false, noAnimation = false) {
    if (!isFetching || isInitial) {
        isFetching = true;
        disableButtons();
        
        if (!isInitial && !noAnimation) {
            ease('-33.3333', '-66.6666', 500, (value) => {
                weekCarousel.style.transform = 'translateX(' + value + '%)';
            });
        }
        
        var weekToFetch = Number(weeks[2].dataset.week) + 1;
        var yearToFetch = Number(weeks[2].dataset.year);
        
        if (weekToFetch === 53) {
            weekToFetch = 1;
            yearToFetch += 1;
        }

        fetchWeek(weekToFetch, yearToFetch, true, isInitial);
    }
}


function PreviousWeek(isInitial = false, noAnimation = false) {
    if (!isFetching || isInitial) {
        isFetching = true;
        disableButtons()
        
        if (!isInitial && !noAnimation) {
            //ease to translateX(0) using code
            ease('-33.3333', '0', 500, (value) => {
                weekCarousel.style.transform = 'translateX(' + value + '%)';
            });
        }
        
        var weekToFetch = Number(weeks[0].dataset.week) - 1;
        var yearToFetch = Number(weeks[0].dataset.year);
        
        if (weekToFetch === 0) {
            weekToFetch = 52;
            yearToFetch -= 1;
        }
        
        fetchWeek(weekToFetch, yearToFetch, false, isInitial);
    }
}

function ease(start, end, time, callback) {
    start = Number(start);
    end = Number(end);
    const startTime = Date.now();
    const duration = time;
    
    function update() {
        const currentTime = Date.now();
        const elapsed = currentTime - startTime;
    
        if (elapsed >= duration) {
          clearInterval(interval);
          callback(end);
        } 
        else {
            const progress = elapsed / duration;
            const easedValue = start + (end - start) * (progress * (2 - progress));
            callback(easedValue);
        }
    }
    
    const interval = setInterval(update, 10); // Update approximately every 16 milliseconds
}

function disableButtons() {
    var rightButtons = document.querySelectorAll('.fa-arrow-right');
    var leftButtons = document.querySelectorAll('.fa-arrow-left');
    
    // Enable the right buttons
    rightButtons.forEach(function(button) {
        button.classList.add("disabled")
    });

    // Enable the left buttons
    leftButtons.forEach(function(button) {
        button.classList.add("disabled")
    });
}

function enableButtons() {
    // Get all buttons with the specified classes
    var rightButtons = document.querySelectorAll('.fa-arrow-right');
    var leftButtons = document.querySelectorAll('.fa-arrow-left');

    // Disable the right buttons
    rightButtons.forEach(function(button) {
        button.classList.remove("disabled");
    });

    // Disable the left buttons
    leftButtons.forEach(function(button) {
        button.classList.remove("disabled");
    });
}

function fetchWeek(week, year, append, isInitial = false) {
    setTimeout(() => {
        fetch('/zermelo/rooster?week=' + week + '&year=' + year + '&compact=true&no-framework=true')
        .then(response => response.text())
        .then((html) => {
            //turn the html string into an html element
            var parser = new DOMParser();
            var newWeek = parser.parseFromString(html, 'text/html').getElementsByClassName('week')[0];
    
            if (isInitial) {
                if (append)
                    weeks[2].replaceWith(newWeek);
                else
                    weeks[0].replaceWith(newWeek);
            } else {
    
                //if append = true, add it after the last html item in the carousel, else add it before the first html item in the carousel
                if (append) {
                    weeks[0].replaceWith(newWeek);
                    //set as last in sibling hierarchy
                    weeks[2].after(weeks[0]);
                } else {
                    weeks[2].replaceWith(newWeek);
                    //set as first in sibling hierarchy
                    weeks[0].before(weeks[2]);
                }
                
                weekCarousel.style.transform = 'translateX(-33.3333%)';
            }
            
    
            isFetching = false; // Reset the flag after fetch is complete
            enableButtons();
        })
        .catch(error => {
            console.error('Error fetching week:', error);
            isFetching = false; // Reset the flag on error\
            enableButtons();
        });
    }, 500);
}

Zermos.mainAfterLoad = () => {
    NextWeek(true);
    PreviousWeek(true);
};


//when i click and drag, the carousel should move. When the threshold of 30% of the width of the carousel is reached and the user let's go, the carousel should move to the next week (or previous week)
Zermos.mainBeforeLoad = () => {
    var touchstartX;
    var touchmoveX;
    var touchendX;
    var threshold = weekCarousel.offsetWidth * 0.1;
    var isDragging = false;

    addEventListenerToMain('mousedown', e => handleDragStart(e.clientX));
    addEventListenerToMain('touchstart', e => handleDragStart(e.touches[0].clientX), {passive: true});

    addEventListenerToMain('mousemove', e => handleDragMove(e.clientX));
    addEventListenerToMain('touchmove', e => handleDragMove(e.touches[0].clientX), {passive: true});

    addEventListenerToMain('mouseup', e => handleDragEnd(e.clientX));
    addEventListenerToMain('touchend', e => handleDragEnd(e.changedTouches[0].clientX));
    
    addEventListenerToMain('mouseleave', e => handleDragEnd(e.clientX));
    addEventListenerToMain('touchcancel', e => handleDragEnd(e.changedTouches[0].clientX));

    function handleDragStart(clientX) {
        if (isFetching) return; // Stop dragging if a fetch is in progress
        isDragging = true;
        touchstartX = clientX;
        touchmoveX = clientX;
    }

    function handleDragMove(clientX) {
        if (!isDragging || isFetching) return; // Stop dragging if a fetch is in progress
        
        //log the current percentage of the main-container where the mosue is hovering (0% = left, 100% = right)
        var mainContainer = document.getElementsByClassName('main-container')[0];
        var percentageFromLeftStart = ((touchstartX - mainContainer.getBoundingClientRect().left) / mainContainer.offsetWidth * 100) / 3;
        var percentageFromLeft = ((clientX - mainContainer.getBoundingClientRect().left) / mainContainer.offsetWidth * 100) /3;

        weekCarousel.style.transform = 'translateX(' + -(33.3333 - (percentageFromLeft - percentageFromLeftStart)) + '%)';
        touchmoveX = clientX;
    }

    function handleDragEnd(clientX) {
        if (!isDragging || isFetching) return; // Stop dragging if a fetch is in progress

        isDragging = false;
        
        touchendX = clientX;
        
        var percentage = weekCarousel.style.transform;
        percentage = percentage.replace("translateX(", "").replace("%)", "");
        
        if (touchendX < touchstartX && Math.abs(touchstartX - touchendX) > threshold) {
            ease(percentage, '-66.6666', 200, (value) => {
                weekCarousel.style.transform = 'translateX(' + value + '%)';
            });
            NextWeek(false, true);
        } else if (touchendX > touchstartX && Math.abs(touchstartX - touchendX) > threshold) {
            ease(percentage, '0', 200, (value) => {
                weekCarousel.style.transform = 'translateX(' + value + '%)';
            });
            PreviousWeek(false, true);
        }
        else {
            ease(percentage, '-33.3333', 200, (value) => {
                weekCarousel.style.transform = 'translateX(' + value + '%)';
            });
        }
    }
};

//next week button
addButtonToPage('fa-arrow-right', () => {
    weekCarousel.style.transform = 'translateX(-66.6666%);'
    NextWeek();
}, VerticalAlignment.BL);

//previous week button
addButtonToPage('fa-arrow-left', () => {
    weekCarousel.style.transform = 'translateX(0%);'
    PreviousWeek();
}, VerticalAlignment.BL);

function OpenLessonDetail(base64){
    if (isFetching) return; // showing a lesson detail while fetching a week will cause a bug
    
    const json = JSON.parse(atob(base64));
    
    var lessonDetail = new ZermosModal()
    .setTitle((json.subjects[0] ?? '?') + " - " + new Date(json.start * 1000).toLocaleDateString("nl-NL", { weekday: 'long', month: 'short', day: 'numeric'}));
    
    lessonDetail.addText("Je hebt:");
    if (json.teachers.length > 0) 
        lessonDetail.addText("• les van " + json.teachers.join(", ") + ".");
    if (json.locations.length > 0) 
        lessonDetail.addText("• in lokaal " + json.locations.join(", ") + ".");
    // if (json.groups.length > 0) 
    //     lessonDetail.addText("• met groep " + json.groups.join(", ") + ".");   
    
    // Check if actions array exists
    if (json.actions && json.actions.length > 0) {
        lessonDetail.addText("Je hebt keuze uit de volgende vakken:");
        // Loop through each action appointment
        json.actions.forEach((action) => {
            action = action.appointment;
            lessonDetail.addText("• " + (action.subjects[0] ?? '?') + " van " + action.teachers.join(", ") + " in lokaal " + action.locations.join(", "));
        });
    }
    
    lessonDetail.addText("De les is van: " + new Date(json.start * 1000).toLocaleDateString("nl-NL", {hour: '2-digit', minute:'2-digit'}).split(" ")[1] + " tot " + new Date(json.end * 1000).toLocaleDateString("nl-NL", {hour: '2-digit', minute:'2-digit'}).split(" ")[1])
    
    lessonDetail.addText("&ZeroWidthSpace;")
    .setSubmitButtonLabel("Bekijk huiswerk")
    .onSubmit(() => {
        ReplacePage('/Somtoday/Huiswerk?les=' + json.start);
    });
       
    // for (var i = 0; i < json.status.length; i++) {
    //     var status = json.status[i];
    //
    //     if (status['code'] === 2002) continue;
    //    
    //     lessonDetail.addText("• " + status.nl);
    // }
    
    lessonDetail.open();
}

// share button
addButtonToPage('fa-share-from-square', () => {
   
    new ZermosModal()
    .setTitle("Deel je rooster")
    .addText("Deel je rooster met je vrienden! De pagina die je nu ziet wordt als link gedeeld, zij hoeven geen account hiervoor te hebben.")
    .addDateInput("Wat is de verval datum?", new Date(Date.now() + 604800000))
    .hideSubmitButton()
    .addButton("Deel", () => {
        
        const date = document.getElementById('input1').value;
        const dateObject = new Date(date);
        
        var expires_at = Math.floor(dateObject.getTime() / 1000);
        
        //return's an plan string url
        fetch('/zermelo/GenereerToken?year=' + weeks[1].dataset.year + '&week=' + weeks[1].dataset.week + '&expires_at=' + expires_at)
        .then(response => response.text())
        .then((url) => {
            new ZermosModal()
            .setTitle("Deel je rooster")
            .addText("Deel je rooster met je vrienden! De pagina die je nu ziet wordt als link gedeeld, zij hoeven geen account hiervoor te hebben.")
            .addText("De link is: " + url)
            .hideSubmitButton()
            .addButton("Kopieer link", () => {
                copyToClipboard(url);
            })
            .open();
        });
    })
    .open();
    
}, VerticalAlignment.TL, Background.Primary);

// share button
addButtonToPage('fa-list', () => {
   
    new ZermosModal()
    .setTitle("Je paklijst")
    .setSubmitButtonLabel("Oke")
    .addText("Je hebt vandaag de volgende vakken:")
    @{
        //foreach (Appointment les in zermeloTodayLessons.Distinct())
        //where zermeloTodayLessons[].subject is distinct
        foreach (Appointment les in zermeloTodayLessons.GroupBy(x => x.subjects[0]).Select(x => x.First()))
        {
            if (les.cancelled)
            {
                continue;
            }

            @Html.Raw("    .addText(\"" + (les.subjects.Count > 0 ? les.subjects[0] : "-") + " van " + (les.teachers.Count > 0 ? les.teachers[0] : "-") + "\")")
        }
    }
    
    .open();
    
}, VerticalAlignment.TL, Background.Primary);
</script>