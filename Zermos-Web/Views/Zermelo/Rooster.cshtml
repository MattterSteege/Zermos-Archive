@using System.Globalization
@model ZermeloRoosterModel

@{
    ViewData["title"] = "title";
}


<div class="main-container">
    <div class="times-container">
        <ul>
            <!--        20 horizontal lines-->
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
        </ul>
    </div>
    <div class="days-container">
        <ul>
            <li></li>
            <li>Ma</li>
            <li>Di</li>
            <li>Wo</li>
            <li>Do</li>
            <li>Vr</li>
        </ul>
    </div>
    <div class="hours-container">
        <ul>
            <li></li>
            <li>08:20</li> <!-- 1st hour -->
            <li>09:10</li> <!-- 2nd hour -->
            <li>10:00</li> <!-- break -->
            <li>10:15</li> <!-- 3rd hour -->
            <li>11:05</li> <!-- 4th hour -->
            <li>11:55</li> <!-- break -->
            <li>12:25</li> <!-- 5th hour -->
            <li>13:15</li> <!-- 6th hour -->
            <li>14:05</li> <!-- 7th hour -->
            <li>14:55</li> <!-- break -->
            <li>15:10</li> <!-- 8th hour -->
            <li>16:00</li> <!-- 9th hour -->
            <li></li> <!-- end schoolday -->
        </ul>
    </div>
    <div class="lessons-container">
        <ul>
            @foreach (DayOfWeek day in Enum.GetValues(typeof(DayOfWeek)))
            {
                @if (Model.response.data[0].appointments.Count == 0)
                {
                    <li class="empty">Wow, de hele week vrij!</li>
                    break;
                }
                
                if (day != DayOfWeek.Saturday && day != DayOfWeek.Sunday)
                {
                    <li class="lesdag">
                        @{
                            IEnumerable<Appointment> appointmentList = Model.response.data[0].appointments.Where(a => a.start.ToDateTime().DayOfWeek == day).ToList();

                            //100 means 100% of the height of the container
                            //510 means 510 minutes between 08:20 and 16:50
                            float minuteHeight = 100f / 510f;

                            //get the date of the day that the appointments are for
                            //8 * 60 + 20 = 500 minutes
                            int dayStartUnix = appointmentList.ElementAt(0).start.ToDateTime().Date.AddMinutes(6 * 60 + 20).ToUnixTime();

                        }

                        @foreach (var appointment in appointmentList)
                        {
                            //percentage from top = (appointment start time - dayStartUnix) * minuteHeight *@
                            //appointment height = (appointment end time - appointment start time) * minuteHeight

                            float appointmentHeight = ((appointment.end - appointment.start) / 60f) * minuteHeight;
                            float appointmentTop = ((appointment.start - dayStartUnix) / 60f) * minuteHeight;

                            <div class="lesson-time-based @(appointment.cancelled ? "canceled" : "") @appointment.appointmentType" style="top: @(appointmentTop.ToString("0.000", CultureInfo.InvariantCulture))%; height: calc(@(appointmentHeight.ToString("0.000", CultureInfo.InvariantCulture))% - 8px);">
                                @(appointment.subjects.Count > 0 ? appointment.subjects[0] : "Geen les") - @(appointment.teachers.Count > 0 ? appointment.teachers[0] : "Geen docent") - @(appointment.locations.Count > 0 ? appointment.locations[0] : "Geen lokaal")
                            </div>
                        }
                    </li>
                }
            }
        </ul>

    </div>
</div>