@using Zermos_Web.Models.zermelo
@using Zermos_Web.Utilities
@using System.Globalization
@model Zermos_Web.Models.zermelo.ZermeloRoosterModel

@{
    var times = new List<int>();
    var timesString = new List<string>(); //hh:mm
    var timesAlreadySet = false;
    var minuteHeight = 0f;
}

<div class="week" data-week="@Model.MondayOfAppointmentsWeek.GetWeekNumber()" data-year="@Model.MondayOfAppointmentsWeek.Year" data-unix="@Model.MondayOfAppointmentsWeek.ToUnixTime()">
    <div class="days-container">
        <ul>
            <li>@Model.MondayOfAppointmentsWeek.GetWeekNumber()</li>
            <li>Ma<div class="date">@Model.MondayOfAppointmentsWeek.ToString("dd MMM")</div></li>
            <li>Di<div class="date">@Model.MondayOfAppointmentsWeek.AddDays(1).ToString("dd MMM")</div></li>
            <li>Wo<div class="date">@Model.MondayOfAppointmentsWeek.AddDays(2).ToString("dd MMM")</div></li>
            <li>Do<div class="date">@Model.MondayOfAppointmentsWeek.AddDays(3).ToString("dd MMM")</div></li>
            <li>Vr<div class="date">@Model.MondayOfAppointmentsWeek.AddDays(4).ToString("dd MMM")</div></li>
        </ul>
    </div>
    <div class="lessons-container">
        <ul>
            @foreach (DayOfWeek day in Enum.GetValues(typeof(DayOfWeek)))
            {
                
                @if (Model.appointments.Count == 0)
                {
                    <li class="empty">Wow, de hele week vrij!</li>
                    break;
                }

                if (day != DayOfWeek.Saturday && day != DayOfWeek.Sunday)
                {
                    <li class="lesdag">
                        @{
                            IEnumerable<Appointment> appointmentList = Model.appointments.Where(a => a.start.ToDateTime().DayOfWeek == day).ToList();

                            if (!appointmentList.Any())
                                continue;

                            //100 means 100% of the height of the container
                            //540 means 540 minutes between 08:00 and 17:00
                            minuteHeight = 100f / (Model.timeStamps[1] - Model.timeStamps[0]) * 60; // 60 minutes in an hour

                            //get the date of the day that the appointments are for
                            //8 * 60 + 20 = 500 minutes means 08:20
                            var dayStartUnix = appointmentList.First().start; // this is unix. make the unix time to be the same date but the time should be 08:20
                            dayStartUnix -= dayStartUnix % 86400; // remove the time from the unix time
                            dayStartUnix += Model.timeStamps[0]; // add the start time of the day to the unix time

                            // Define the time zones for UTC and the Dutch timezone
                            TimeZoneInfo dutchTimeZone = TimeZoneInfo.FindSystemTimeZoneById("W. Europe Standard Time"); // This ID represents the Dutch timezone
                            DateTime utcDateTime = DateTimeOffset.FromUnixTimeSeconds(dayStartUnix).UtcDateTime;
                            DateTime dutchDateTime = TimeZoneInfo.ConvertTimeFromUtc(utcDateTime, dutchTimeZone);
                            TimeSpan timeDifference = dutchDateTime - utcDateTime;
                            int timeDifferenceInSeconds = (int) timeDifference.TotalSeconds;

                            dayStartUnix -= timeDifferenceInSeconds;
                            
                            if (times.Count != 0)
                            {
                                times.Add(0);
                                times = times.Distinct().OrderBy(t => t).ToList();
                                timesString = times.Select(t => DateTimeOffset.FromUnixTimeSeconds(dayStartUnix + timeDifferenceInSeconds + t * 60).ToString("HH:mm")).ToList();
                                if (times[^1] == (Model.timeStamps[1] / 60 - Model.timeStamps[0] / 60))
                                {
                                    timesString.RemoveAt(timesString.Count - 1);
                                }
                            }
                        }

                        @foreach (var appointment in appointmentList)
                        {
                            //add the amount of minutes from the start of the day to the start of the appointment and the start of the day to the end of the appointment
                            times.Add((appointment.start - dayStartUnix + timeDifference.Seconds) / 60);
                            times.Add((appointment.end - dayStartUnix + timeDifference.Seconds) / 60);
                            
                            //percentage from top = (appointment start time - dayStartUnix) * minuteHeight *@
                            //appointment height = (appointment end time - appointment start time) * minuteHeight

                            var appointmentHeight = (appointment.end - appointment.start) / 60f * minuteHeight;
                            var lessonStart = appointment.start;
                            var appointmentTop = (lessonStart - dayStartUnix) / 60f * minuteHeight;

                            if (appointment.actions.Count <= 1)
                            {
                                <div class="lesson-time-based @(appointment.cancelled ? "canceled" : "") @appointment.appointmentType" style="top: @(appointmentTop.ToString("0.000", CultureInfo.InvariantCulture))%; height: calc(@(appointmentHeight.ToString("0.000", CultureInfo.InvariantCulture))% - 8px);" onclick="OpenLessonDetail('@(appointment.ObjectToBase64String())')">
                                    @(appointment.subjects.Count > 0 ? Html.Raw("<p>" + appointment.subjects[0] + "</p>") : "")
                                    @(appointment.locations.Count > 0 ? Html.Raw("<p>" + appointment.locations[0] + "</p>") : "")
                                </div>
                            }
                            else if (appointment.appointmentType == "conflict")
                            {
                                <div class="lesson-time-based @(appointment.actions[0].appointment.cancelled ? "canceled" : "") conflict" style="top: @(appointmentTop.ToString("0.000", CultureInfo.InvariantCulture))%; height: calc(@(appointmentHeight.ToString("0.000", CultureInfo.InvariantCulture))% - 8px); width: calc(50% - 4px);" onclick="OpenLessonDetail('@(appointment.actions[0].appointment.ObjectToBase64String())')">
                                    @(appointment.actions[0].appointment.subjects.Count > 0 ? Html.Raw("<p>" + appointment.actions[0].appointment.subjects[0] + "</p>") : "")
                                    @(appointment.actions[0].appointment.locations.Count > 0 ? Html.Raw("<p>" + appointment.actions[0].appointment.locations[0] + "</p>") : "")
                                </div>
                                
                                <div class="lesson-time-based @(appointment.actions[1].appointment.cancelled ? "canceled" : "")" style="top: @(appointmentTop.ToString("0.000", CultureInfo.InvariantCulture))%; height: calc(@(appointmentHeight.ToString("0.000", CultureInfo.InvariantCulture))% - 8px); width: calc(50% - 8px); left: 50%;" onclick="OpenLessonDetail('@(appointment.actions[1].appointment.ObjectToBase64String())')">
                                    @(appointment.actions[1].appointment.subjects.Count > 0 ? Html.Raw("<p>" + appointment.actions[1].appointment.subjects[0] + "</p>") : "")
                                    @(appointment.actions[1].appointment.locations.Count > 0 ? Html.Raw("<p>" + appointment.actions[1].appointment.locations[0] + "</p>") : "")
                                </div>
                            }
                            else if (appointment.appointmentType == "choice" && appointment.actions.Count == 1)
                            {
                                <div class="lesson-time-based @(appointment.actions[0].appointment.cancelled ? "canceled" : "") choice" style="top: @(appointmentTop.ToString("0.000", CultureInfo.InvariantCulture))%; height: calc(@(appointmentHeight.ToString("0.000", CultureInfo.InvariantCulture))% - 8px);" onclick="OpenLessonDetail('@(appointment.actions[0].appointment.ObjectToBase64String())')">
                                    @(appointment.actions[0].appointment.subjects.Count > 0 ? Html.Raw("<p>" + appointment.actions[0].appointment.subjects[0] + "</p>") : "")
                                    @(appointment.actions[0].appointment.locations.Count > 0 ? Html.Raw("<p>" + appointment.actions[0].appointment.locations[0] + "</p>") : "")
                                </div>
                            }
                            else if (appointment.appointmentType == "activity")
                            {
                                <div class="lesson-time-based @(appointment.cancelled ? "canceled" : "") @appointment.appointmentType" style="top: @(appointmentTop.ToString("0.000", CultureInfo.InvariantCulture))%; height: calc(@(appointmentHeight.ToString("0.000", CultureInfo.InvariantCulture))% - 8px);" onclick="OpenLessonDetail('@(appointment.ObjectToBase64String())')">
                                    @(appointment.subjects.Count > 0 ? Html.Raw("<p>" + appointment.subjects[0] + "</p>") : "")
                                    @(appointment.locations.Count > 0 ? Html.Raw("<p>" + appointment.locations[0] + "</p>") : "")
                                </div>
                            }
                        }
                    </li>
                }
            }
        </ul>

    </div>
    @{
        times = times.Distinct().OrderBy(t => t).ToList();
        timesString = timesString.Distinct().ToList();
        var calcTime = new List<string>();
        string gridTemplateRows = "40px ";
        
        var minutesLeft = ((Model.timeStamps?[1] - Model.timeStamps?[0]) / 60) ?? 540;
        
        //calculate the diffrence between times[n] and times[n+1] for each n
        for (var i = 0; i < times.Count; i++)
        {
            if (i == times.Count - 1)
            {
                calcTime.Add((((Model.timeStamps[1] - Model.timeStamps[0]) / 60) - times[i]).ToString());
            }
            else
            {
                if (i >= 1)
                {
                    var diffPrev = times[i] - times[i - 1];
                    if (diffPrev <= 5)
                    {
                        timesString[i] = null;
                    }
                }
                
                calcTime.Add((times[i + 1] - times[i]).ToString());
                minutesLeft -= times[i + 1] - times[i];
            }
        }
        
        gridTemplateRows += string.Join("fr ", calcTime) + "fr";
    }
    <div class="times-container">
        <ul style="grid-template-rows: @gridTemplateRows">
            <li></li>
            @for (var i = 0; i < timesString.Count; i++)
            {
                <li></li>
            }
            <li></li>
        </ul>
    </div>
    <div class="hours-container">
        <ul style="grid-template-rows: @gridTemplateRows">
            <li></li>
            @foreach (var time in timesString)
            {
                if (time == null)
                {
                    <li></li>
                }
                else
                {
                    <li><p>@time</p></li>
                }
            }   
            <li></li> <!-- end schoolday -->
        </ul>
    </div>
</div>