@using Zermos_Web.Models.zermelo
@using Newtonsoft.Json
@using Zermos_Web.Models.SomtodayGradesModel
@model Infrastructure.Entities.user


@{
    ViewBag.Title = "title";

    List<Appointment> zermeloTodayLessons = null;
    Appointment zermeloNextLesson = null;
    
    Zermos_Web.Models.SomtodayGradesModel.Item somtodayLastGrade = null;
    DateTime nextLessonStart = DateTime.Now;

    IGrouping<Guid, Message> infowijsMessage = null;
    
    if (Model != null)
    {
        if (!string.IsNullOrEmpty(Model.cached_zermelo_schedule))
        {
            var zermeloRooster = JsonConvert.DeserializeObject<ZermeloRoosterModel>(Model.cached_zermelo_schedule);
            zermeloTodayLessons = zermeloRooster.response.data[0].appointments.Where(x => x.start.ToDateTime().Date == DateTime.Now.Date).ToList();
            zermeloNextLesson = zermeloTodayLessons.Where(x => x.end.ToDateTime() > DateTime.Now).MinBy(x => x.start.ToDateTime());
            nextLessonStart = zermeloNextLesson?.start.ToDateTime().ConvertToNormalDutchTime() ?? DateTime.MinValue;
        }

        if (!string.IsNullOrEmpty(Model.cached_somtoday_grades))
        {
            var somtodayGrades = JsonConvert.DeserializeObject<SomtodayGradesModel>(Model.cached_somtoday_grades);
            somtodayLastGrade = somtodayGrades.items[0];
        }
        
        if (!string.IsNullOrEmpty(Model.cached_infowijs_news))
        {
            var infowijsMessages = JsonConvert.DeserializeObject<InfowijsMessagesModel>(Model.cached_infowijs_news ?? string.Empty, Converter.Settings);
            infowijsMessage = infowijsMessages.Data.Messages.Where(x => x.Type != 12).GroupBy(x => x.GroupId).ToList()[^1];
        }
    }
}

<link rel="stylesheet" href="/css/main.css">

<div class="main-container">

    <div class="row-1">

        <div class="child next-lesson">
            <div class="information">
                <h1 class="heading">Volgende les:</h1>
                <div class="lesson-info">
                    @{
                        if (nextLessonStart != DateTime.MinValue)
                        {
                            <p class="lesson-subject">@(zermeloNextLesson?.subjects.Count > 0 ? zermeloNextLesson?.subjects[0] : "")</p>
                            <p class="lesson-teacher">@(zermeloNextLesson?.teachers.Count > 0 ? zermeloNextLesson?.teachers[0] : "")</p>
                            <p class="lesson-location" style="text-transform: unset;">@(zermeloNextLesson?.locations.Count > 0 ? zermeloNextLesson?.locations[0] : "")</p>
                            <p id="class_starts_at" class="lesson-location @nextLessonStart.GetDateDifference(DateTime.Now).ToUnixTime()">berekenen...</p>
                        }
                        else
                        {
                            <p class="lesson-subject">Geen les meer vandaag</p>
                        }
                    }
                </div>
            </div>
            <div class="icon">
                <i class="fa-solid fa-calendar-day fa-fw card-icon active"></i>
            </div>
        </div>

        <div class="child last-grade">
            <div class="information">
                <h1 class="heading">Laatste cijfer</h1>
                <div class="grade-info">
                    <p class="grade-subject">@somtodayLastGrade?.vak.naam:</p>
                    <p class="grade-number">@somtodayLastGrade?.geldendResultaat</p>
                    <p class="grade-number">@(somtodayLastGrade?.weging == 0 ? somtodayLastGrade.examenWeging : 0)x</p>
                </div>
            </div>
            <div class="icon">
                <i class="fa-solid fa-line-chart fa-fw card-icon active"></i>
            </div>
        </div>
        
        <div class="child last-news" onclick="ReplacePage('/Infowijs/Schoolnieuws')">
            <div class="information">
                <h1 class="heading">Laatste nieuws:</h1>
                <div class="news-info">
                    <p class="news-title">@(infowijsMessage.FirstOrDefault(m => m.Type == 30)?.Content.ContentClass?.Title)</p>
                    <p class="news-time">Verstuurd om: @(infowijsMessage.FirstOrDefault(m => m.Type == 30)?.CreatedAt.ToDateTime().ToString("HH:mm dd-MM-yyyy"))</p>
                </div>
            </div>
            <div class="icon">
                <i class="fa-solid fa-newspaper fa-fw card-icon active"></i>
            </div>
        </div>

    </div>

    <div class="row-2">
        <div class="child weather">
            <div class="header">
                <div class="information">
                    <h1 class="heading">Weer</h1>
                    <div class="weather-info">
                        <p class="weather-temp"></p>
                        <p class="weather-location">Gouda - John Mottstraat</p>
                    </div>
                </div>
                <div class="icon">
                    <i class="fa-solid fa-cloud fa-fw card-icon active"></i>
                </div>
            </div>
            <div class="weather-graph-underlay">
            </div>
            <div class="weather-graph">
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line current"></div>
            </div>
        </div>
        <div class="child paklijst">
            <h1 class="heading">Paklijst</h1>
            @foreach (var les in zermeloTodayLessons!.DistinctBy(x => x.subjects?[0]))
            {
                // toggle button that crosses out the lesson

                <div class="paklijst-item">
                    <div class="paklijst-item-text">
                        <p class="paklijst-item-text-title">@les.subjects?[0]</p>
                        <p class="paklijst-item-text-subtitle">@les.teachers?[0]</p>
                    </div>
                    <div class="paklijst-item-icon">
                        <i class="fa-solid fa-check fa-fw card-icon active"></i>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<script defer="defer">  
    RefreshWeer();
    SetUpPakLijst();
    CalculateLessonTimeLeft();

    function RefreshWeer() {
        fetch('https://cdn-secure.buienalarm.nl/api/3.4/forecast.php?lat=52.011194&lon=4.726696&region=nl&unit=mm/u')
        .then(response => response.json())
        .then(data => { 
            //temp text
            document.querySelector(".weather-temp").innerText = (data["temp"] + "°C - " + data["precip"][2] + "mm/u");
            
            
            
            //current time line
            let startUnix = data["start"];
            let endUnix = Number(data["start"]) + 7200;
            let currentUnix = Math.floor(Date.now() / 1000);
            let currentLine = document.querySelector(".current");
            let widthOfWorkingFieldInPixels = document.querySelector(".weather-graph").clientWidth;
            let widthOfASecondInPixels = widthOfWorkingFieldInPixels / 7200;
            let currentLinePosition = (currentUnix - startUnix) * widthOfASecondInPixels;         
            currentLine.style.left = (currentLinePosition + 12) + "px";
            
            //interval of 5 to recalculate the position of the current line
            var interval = setInterval(() => {
                currentLinePosition = (Math.floor(Date.now() / 1000) - startUnix) * widthOfASecondInPixels;
                currentLine.style.left = (currentLinePosition + 12) + "px";
            }, 5000);
            
            
            
            //array of 25 - 10 5-minute intervals4
            let precipitation = data["precip"];
            //let precipitation = [0,0.2,0.2,0.3,0.5,0.1,0,0,0,0,0,0,4,5,3,1.2,0,1,0.5,0,0,0,0.2,0.1,0]; //test data
           
            const svgContainer = document.getElementsByClassName('weather-graph-underlay')[0];
            const svg = createSmoothBezierCurve(precipitation);
            svgContainer.appendChild(svg);
        });
       
        function createSmoothBezierCurve(numbers) {       
            const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
            svg.setAttribute("preserveAspectRatio", "none");
            svg.setAttribute("class", "graph-chart");
            svg.setAttribute("viewBox", "0 0 250 300");
            
            const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
            path.setAttribute("d", createBezierPath(numbers));
            path.setAttribute("vector-effect", "non-scaling-stroke");
            path.setAttribute("fill", "#00B3FF");
            path.setAttribute("stroke", "#8ABAFF");
            path.setAttribute("stroke-width", "0");
            path.setAttribute("stroke-linecap", "butt");
            
            svg.appendChild(path);
            
            return svg;
            
            function createBezierPath(numbers) {
                // Just like before, create the starting point
                let path = "M" + (0) + " " + (300 - numbers[0] * 10);
            
                // Calculate the control points for the Bezier curves
                for (let i = 1; i < numbers.length - 1; i++) {
                    const x0 = (i - 1) * 10;
                    const y0 = 300 - numbers[i - 1] * 10;
            
                    const x1 = i * 10;
                    const y1 = 300 - numbers[i] * 10;
            
                    const x2 = (i + 1) * 10;
                    const y2 = 300 - numbers[i + 1] * 10;
            
                    const x3 = (i + 2) * 10;
                    const y3 = 300 - numbers[i + 2] * 10;
                    
                    if (isNaN(x0) || isNaN(y0) || isNaN(x1) || isNaN(y1) || isNaN(x2) || isNaN(y2) || isNaN(x3) || isNaN(y3)) {
                        continue;
                    }
            
                    const cp1x = Math.round(x1 + (x2 - x0) / 6);
                    const cp1y = Math.round(y1 + (y2 - y0) / 6);
            
                    const cp2x = Math.round(x2 - (x3 - x1) / 6);
                    const cp2y = Math.round(y2 - (y3 - y1) / 6);
            
                    path += "C" + cp1x + " " + cp1y + ", " + cp2x + " " + cp2y + ", " + x2 + " " + y2;
                }
            
                // Add the final line segment to complete the path
                path += "L" + (numbers.length * 10) + " " + (300 - numbers[numbers.length - 1] * 10);
            
                return path;
            }
        }
    }
    
    function CalculateLessonTimeLeft(){
        let timeLeft = document.getElementById("class_starts_at").classList[1];
        //set the time left to the element HH:MM:SS, but hide hours and minutes if they are 0, do this every second
        var interval = setInterval(() => {
            let hours = Math.floor(timeLeft / 3600);
            let minutes = Math.floor((timeLeft - (hours * 3600)) / 60);
            let seconds = timeLeft - (hours * 3600) - (minutes * 60);
            //seconds: 1 -> 01
            if (seconds < 10 && seconds !== 0) {
                seconds = "0" + seconds;
            }
            
            if (minutes < 10 && seconds !== 0) {
                minutes = "0" + minutes;
            }
            
            if (hours < 10 && hours !== 0) {
                hours = "0" + hours;
            }
            
            if (hours === 0) {
                document.getElementById("class_starts_at").innerText = minutes + ":" + seconds;
            }
            else {
                document.getElementById("class_starts_at").innerText = hours + ":" + minutes + ":" + seconds;
            }
            
            timeLeft--;
            
            if (timeLeft <= 0) {
                document.getElementById("class_starts_at").innerText = "nu";
                clearInterval(interval);
            }
        }, 1000);
    }
    
    function SetUpPakLijst() {
        var list_items = document.getElementsByClassName('paklijst-item');
        
        for (var i = 0; i < list_items.length; i++) {
          list_items[i].addEventListener("click", toggle);
        }
        
        function toggle() {
          this.classList.toggle("packed");
        }
    }
</script>