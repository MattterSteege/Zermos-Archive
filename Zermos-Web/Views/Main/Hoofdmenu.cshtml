@using Zermos_Web.Models.zermelo
@using Newtonsoft.Json
@using Zermos_Web.Models.SomtodayGradesModel
@using Zermos_Web.Models.somtodayHomeworkModel
@model Infrastructure.Entities.user


@{
    ViewBag.Title = "title";

    List<Appointment> zermeloTodayLessons = null;
    Appointment zermeloNextLesson = null;

    Zermos_Web.Models.SomtodayGradesModel.Item somtodayLastGrade = null;
    DateTime nextLessonStart = DateTime.Now;

    int somtodayHuiswerkCount = 0;
    string SomtodayHuiswerkSubjects = string.Empty;

    IGrouping<Guid, Message> infowijsMessage = null;

    if (Model != null)
    {
        if (!string.IsNullOrEmpty(Model.cached_zermelo_schedule))
        {
            var zermeloRooster = JsonConvert.DeserializeObject<ZermeloRoosterModel>(Model.cached_zermelo_schedule);
            zermeloTodayLessons = zermeloRooster.response.data[0].appointments.Where(x => x.start.ToDateTime().Date == DateTime.Now.Date).ToList();
            zermeloNextLesson = zermeloTodayLessons.Where(x => x.end.ToDateTime() > DateTime.Now).Where(x => !x.cancelled).MinBy(x => x.start.ToDateTime());
            nextLessonStart = zermeloNextLesson?.start.ConvertUnixTimestampToDutchTime() ?? DateTime.MinValue;
        }

        if (!string.IsNullOrEmpty(Model.cached_somtoday_grades))
        {
            var somtodayGrades = JsonConvert.DeserializeObject<SomtodayGradesModel>(Model.cached_somtoday_grades);
            somtodayLastGrade = somtodayGrades.items[^1];
        }

        if (!string.IsNullOrEmpty(Model.cached_somtoday_homework))
        {
            var somtodayHomework = JsonConvert.DeserializeObject<SomtodayHomeworkModel>(Model.cached_somtoday_homework).items.GroupBy(item => item.datumTijd.Date).Where(x => x.Key == DateTime.Now.Date.AddDays(1)).ToList();
            somtodayHuiswerkCount = somtodayHomework.Count > 0 ? somtodayHomework[0].Count() : 0;
            SomtodayHuiswerkSubjects = somtodayHomework.Count > 0 ? string.Join(", ", somtodayHomework[0].Select(x => x.lesgroep.vak.naam)) : string.Empty;
        }

        if (!string.IsNullOrEmpty(Model.cached_infowijs_news))
        {
            var infowijsMessages = JsonConvert.DeserializeObject<InfowijsMessagesModel>(Model.cached_infowijs_news ?? string.Empty, Converter.Settings);
            infowijsMessage = infowijsMessages.Data.Messages.Where(x => x.Type != 12).GroupBy(x => x.GroupId).ToList()[^1];
        }
    }
}

<link rel="stylesheet" href="/css/main.css">

<div class="main-container">

    <div class="row-1">

        <div class="child next-lesson">
            <div class="information">
                <h1 class="heading">Volgende les:</h1>
                <div class="lesson-info">
                    @{
                        if (nextLessonStart != DateTime.MinValue)
                        {
                            <p class="lesson-subject">@(zermeloNextLesson?.subjects.Count > 0 ? zermeloNextLesson.subjects[0] : "")</p>
                            <p class="lesson-teacher">@(zermeloNextLesson?.teachers.Count > 0 ? zermeloNextLesson.teachers[0] : "")</p>
                            <p class="lesson-location" style="text-transform: unset;">@(zermeloNextLesson?.locations.Count > 0 ? zermeloNextLesson.locations[0] : "")</p>
                            <p id="class_starts_at" class="lesson-location @nextLessonStart.GetDateDifference(DateTime.Now).ToUnixTime()">berekenen...</p>
                        }
                        else
                        {
                            <p class="lesson-subject">Geen les meer vandaag</p>
                            <p id="class_starts_at" class="lesson-location 0"></p>
                        }
                    }
                </div>
            </div>
            <div class="icon">
                <i class="fa-solid fa-calendar-day fa-fw card-icon active"></i>
            </div>
        </div>

        <div class="child last-grade">
            <div class="information">
                <h1 class="heading">Laatste cijfer</h1>
                <div class="grade-info">
                    <p class="grade-subject">@somtodayLastGrade?.vak.naam:</p>
                    <p class="grade-number">@somtodayLastGrade?.geldendResultaat</p>
                    <p class="grade-number">@(somtodayLastGrade?.weging == 0 ? somtodayLastGrade.examenWeging : somtodayLastGrade?.weging)x</p>
                </div>
            </div>
            <div class="icon">
                <i class="fa-solid fa-line-chart fa-fw card-icon active"></i>
            </div>
        </div>

        <div class="child last-news" onclick="ReplacePage('/Infowijs/Schoolnieuws')">
            <div class="information">
                <h1 class="heading">Laatste nieuws:</h1>
                <div class="news-info">
                    <p class="news-title">@(infowijsMessage?.FirstOrDefault(m => m.Type == 30)?.Content.ContentClass?.Title ?? "geen bericht gevonden")</p>
                    <p class="news-time">Verstuurd om: @(infowijsMessage?.FirstOrDefault(m => m.Type == 30)?.CreatedAt.ToDateTime().ToString("HH:mm dd-MM-yyyy") ?? "")</p>
                </div>
            </div>
            <div class="icon">
                <i class="fa-solid fa-newspaper fa-fw card-icon active"></i>
            </div>
        </div>

        <div class="child homewokr-count" onclick="ReplacePage('/Somtoday/Huiswerk')">
            <div class="information">
                <h1 class="heading">Huiswerk voor morgen:</h1>
                @if (somtodayHuiswerkCount == 0)
                {
                    <p class="homework-count">Je hebt geen huiswerk morgen, lekker zeg</p>
                }
                else if (somtodayHuiswerkCount == 1)
                {
                    <p class="homework-count">Je hebt morgen heb je alleen voor @SomtodayHuiswerkSubjects huiswerk.</p>
                }
                else
                {
                    <p class="homework-count">Je hebt morgen @somtodayHuiswerkCount huiswerk items, dat is voor de vakken: @SomtodayHuiswerkSubjects</p>
                }
            </div>
            <div class="icon">
                <i class="fa-solid fa-pen-to-square fa-fw card-icon active"></i>
            </div>
        </div>

    </div>

    <div class="row-2">
        <div class="child weather">
            <div class="header">
                <div class="information">
                    <h1 class="heading">Weer</h1>
                    <div class="weather-info">
                        <p class="weather-temp"></p>
                        <p class="weather-location">Gouda - John Mottstraat</p>
                    </div>
                </div>
                <div class="icon">
                    <i class="fa-solid fa-cloud fa-fw card-icon active"></i>
                </div>
            </div>
            <div class="weather-graph-container">
                <div class="weather-graph-underlay">
                </div>
                <div class="weather-graph">
                    <div class="line"></div>
                    <div class="line"></div>
                    <div class="line"></div>
                    <div class="line"></div>
                    <div class="line"></div>
                    <div class="line"></div>
                    <div class="line"></div>
                    <div class="line"></div>
                    <div class="line"></div>
                    <div class="line"></div>
                    <div class="line"></div>
                    <div class="line"></div>
                    <div class="line"></div>
                    <div class="line"></div>
                    <div class="line"></div>
                    <div class="line"></div>
                    <div class="line"></div>
                    <div class="line"></div>
                    <div class="line"></div>
                    <div class="line"></div>
                    <div class="line"></div>
                    <div class="line"></div>
                    <div class="line"></div>
                </div>
                <div class="line-overlay">
                    <div class="line current" style=""></div>
                </div>
            </div>
        </div>
        <div class="child paklijst">
            <h1 class="heading">Paklijst</h1>
            @foreach (var les in zermeloTodayLessons!.DistinctBy(x => x.subjects?[0]))
            {
                if(les.cancelled){ continue;}
                
                
                // toggle button that crosses out the lesson

                <div class="paklijst-item">
                    <div class="paklijst-item-text">
                        <p class="paklijst-item-text-title">@(les.subjects.Count > 0 ? les.subjects[0] : "-")</p>
                        <p class="paklijst-item-text-subtitle">@(les.teachers.Count > 0 ? les.teachers[0] : "-")</p>
                    </div>
                    <div class="paklijst-item-icon">
                        <i class="fa-solid fa-check fa-fw card-icon active"></i>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<script defer="defer">  
RefreshWeer();
SetUpPakLijst();
CalculateLessonTimeLeft();

function RefreshWeer() {
    let precipitation;

    fetch("https://cdn-secure.buienalarm.nl/api/3.4/forecast.php?lat=52.011194&lon=4.726696&region=nl&unit=mm/u")
        .then((response) => response.json())
        .then((data) => {
            //temp text
            main.querySelector(".weather-temp").innerText =
                data["temp"] + "°C - " + data["precip"][2] + "mm/u";

            //current time line
            let startUnix = data["start"];
            let endUnix = Number(data["start"]) + 7200;
            let currentUnix = Math.floor(Date.now() / 1000);
            let currentLine = main.querySelector(".current");
            //get the percentage of the current time in the time line
            let percentage =
                ((currentUnix - startUnix) / (endUnix - startUnix)) * 100;
            //percentage + var(--padding)
            currentLine.style.left = percentage + "%";

            //update the time line every second
            let timeLineInterval = setInterval(() => {
                let currentUnix = Math.floor(Date.now() / 1000);
                let percentage =
                    ((currentUnix - startUnix) / (endUnix - startUnix)) * 100;
                currentLine.style.left = percentage + "%";

                //log which precipitation value is hovered over
                let index = Math.round(percentage / 4.166666666666667);
                main.querySelector(".weather-temp").innerText =
                    data["temp"] + "°C - " + precipitation[index] + "mm/u";
            }, 1000);
            
            main.addEventListener("main:unload", () => {
                clearInterval(timeLineInterval);
            });

            //when hovering over the .weather element
            main.addEventListener("mousemove", (event) => {
                MoveWeatherLine(event)
            });
            main.querySelector(".weather").addEventListener("mouseleave", DefaultLineMovement);
            
            //also for mobile users
            main.querySelector(".weather").addEventListener("touchmove", (event) => {
                MoveWeatherLine(event)
            });
            main.querySelector(".weather").addEventListener("touchend", DefaultLineMovement);
            
            function MoveWeatherLine(event) {
                                
                //let xOfMouse = mousex, if null or undefined, get the first touch, if null or undefined, set to 0
                let xOfMouse = event?.touches?.[0]?.clientX ?? event?.clientX ?? 0;
                let yOfMouse = event?.touches?.[0]?.clientY ?? event?.clientY ?? 0;
                let xOfWeather = getOffset(main.querySelector(".weather-graph")).left;
                let yOfWeather = getOffset(main.querySelector(".weather-graph")).top;
                let weatherWidth = main.querySelector(".weather-graph").getBoundingClientRect().width;
                let weatherHeight = main.querySelector(".weather-graph").getBoundingClientRect().height;
                
                //only if user mouse x and y are within bounds of the weather element
                if (xOfMouse < xOfWeather || xOfMouse > xOfWeather + weatherWidth || yOfMouse < yOfWeather || yOfMouse > yOfWeather + weatherHeight)
                {
                    return;
                }
                
                //get the --padding value and remove the px
                let padding = Number(getComputedStyle(main.querySelector(".weather-graph")).getPropertyValue("--padding").replace("px", ""));
                //get the percentage of xOfMouse between xOfWeather and xOfWeather + weatherWidth
                let percentage = ((xOfMouse - xOfWeather) / (weatherWidth - padding * 2)) * 100;
                percentage = Math.max(0, Math.min(percentage, 100));
                //set the current time line to the mouse position
                //round to 1/24th of the time line
                //so snap 1 should be 0 to 2.083333333333333, snap 2 should be 2.083333333333333 to 4.166666666666667, etc.
                percentage = Math.round(percentage / 4.166666666666667) * 4.166666666666667;
                if (percentage === 100) 
                    currentLine.style.left =  'calc(100% - 3px)';
                else
                    currentLine.style.left = percentage + "%";
                

                //log which precipitation value is hovered over
                let index = Math.round(percentage / 4.166666666666667);
                main.querySelector(".weather-temp").innerText =
                    data["temp"] + "°C - " + precipitation[index] + "mm/u";

                //stop updating the time line every second
                clearInterval(timeLineInterval);
            }
            
            function DefaultLineMovement() {
                //start updating the time line every second
                clearInterval(timeLineInterval);
                timeLineInterval = setInterval(() => {
                    let currentUnix = Math.floor(Date.now() / 1000);
                    let percentage =
                        ((currentUnix - startUnix) / (endUnix - startUnix)) * 100;
                    currentLine.style.left = percentage + "%";

                    //log which precipitation value is hovered over
                    let index = Math.round(percentage / 4.166666666666667);
                    main.querySelector(".weather-temp").innerText =
                        data["temp"] + "°C - " + precipitation[index] + "mm/u";
                }, 1000);
                
                            
                main.addEventListener("main:unload", () => {
                    clearInterval(timeLineInterval);
                });
            }

            //array of 25 - 10 5-minute intervals
            precipitation = data["precip"];
            //precipitation = [2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2]; //test data

            const svgContainer = main.getElementsByClassName(
                "weather-graph-underlay"
            )[0];
            const svg = createSmoothBezierCurve(precipitation);
            svgContainer.appendChild(svg);
        });

    function createSmoothBezierCurve(data) {
        // Find the highest value in the data
        const topValue = Math.max(Math.max(...data), 3);

        // create a value with which to scale the data, topvalue is the highest value possible and that is on 90% of the height of the svg
        const scale = (300 / topValue) * 0.9;
        const scale2 = 240 / 230;

        // Create the path and set its stroke to the color of the line
        const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
        path.setAttribute("stroke", "var(--tint-color)");
        path.setAttribute("stroke-width", "0");
        path.setAttribute("fill", "var(--tint-color)");

        // Create the string that will hold all the coordinates
        let d = "M 0 " + (300 - data[0] * scale * scale2) + " ";

        // Loop over the data and add the coordinates to the string
        for (let i = 1; i < data.length; i++) {
            let x = i * 10;
            let y = 300 - data[i] * scale;
            d += "L " + x + " " + y + " ";
        }

        // d += "M 0 " + (300 - data[0] * scale * scale2) + " ";
        //
        // for (let i = 1; i < data.length; i++) {
        //   let x1 = (i - 1) * 10 * scale2;
        //   let y1 = 300 - data[i - 1] * scale;
        //   let x2 = i * 10 * scale2;
        //   let y2 = 300 - data[i] * scale;
        //   let x = (x1 + x2) / 2;
        //   let y = (y1 + y2) / 2;
        //   d += "Q " + x1 + " " + y1 + " " + x + " " + y + " ";
        // }

        d += "L 240 300 L 0 300";

        // Set the string as the path's data
        path.setAttribute("d", d);

        const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
        svg.setAttribute("preserveAspectRatio", "none");
        svg.setAttribute("class", "graph-chart");
        svg.setAttribute("viewBox", "0 0 240 300");
        svg.appendChild(path);
        return svg;
    }

    const getOffset = (el) => {
        const rect = el.getBoundingClientRect();
        return {
            left: rect.left + window.scrollX,
            top: rect.top + window.scrollY,
        };
    };
}

function CalculateLessonTimeLeft() {
    let timeLeft = document.getElementById("class_starts_at").classList[1];
    //set the time left to the element HH:MM:SS, but hide hours and minutes if they are 0, do this every second
    var interval = setInterval(() => {
        let hours = Math.floor(timeLeft / 3600);
        let minutes = Math.floor((timeLeft - (hours * 3600)) / 60);
        let seconds = timeLeft - (hours * 3600) - (minutes * 60);
        //seconds: 1 -> 01
        if (seconds < 10 && seconds !== 0) {
            seconds = "0" + seconds;
        }

        if (minutes < 10 && seconds !== 0) {
            minutes = "0" + minutes;
        }

        if (hours < 10 && hours !== 0) {
            hours = "0" + hours;
        }

        if (hours === 0) {
            document.getElementById("class_starts_at").innerText = minutes + ":" + seconds;
        } else {
            document.getElementById("class_starts_at").innerText = hours + ":" + minutes + ":" + seconds;
        }

        timeLeft--;

        if (timeLeft <= 0) {
            document.getElementById("class_starts_at").innerText = "nu";
            clearInterval(interval);
        }
    }, 1000);
    main.addEventListener("main:unload", () => {
        clearInterval(interval);
    });
}

function SetUpPakLijst() {
    var list_items = main.getElementsByClassName('paklijst-item');

    for (var i = 0; i < list_items.length; i++) {
        list_items[i].addEventListener("click", toggle);
    }

    function toggle() {
        this.classList.toggle("packed");
    }
}
</script>