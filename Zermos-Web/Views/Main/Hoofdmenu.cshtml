@using Zermos_Web.Models.zermelo
@using Newtonsoft.Json
@using Zermos_Web.Models.SomtodayGradesModel
@model Infrastructure.Entities.user


@{
    ViewBag.Title = "title";

    Appointment zermelo_NextLesson = null;
    Zermos_Web.Models.SomtodayGradesModel.Item somtoday_LastGrade = null;

    if (Model != null)
    {
        if (!string.IsNullOrEmpty(Model.cached_zermelo_schedule))
        {
            var a = JsonConvert.DeserializeObject<ZermeloRoosterModel>(Model.cached_zermelo_schedule);
            zermelo_NextLesson = a.response.data[0].appointments?.Where(x => x.start.ToDateTime() > DateTime.Now).MinBy(x => x.start);
        }

        if (!string.IsNullOrEmpty(Model.cached_somtoday_grades))
        {
            var a = JsonConvert.DeserializeObject<SomtodayGradesModel>(Model.cached_somtoday_grades);
            somtoday_LastGrade = a.items[0];
        }
    }
}

<link rel="stylesheet" href="/css/hoofdmenu.css">

<div class="main-container">

    <div class="row-1">

        <div class="child next-lesson">
            <div class="information">
                <h1 class="heading">Volgende les:</h1>
                <div class="lesson-info">
                    <p class="lesson-subject">@zermelo_NextLesson?.subjects[0]</p>
                    <p class="lesson-teacher">@zermelo_NextLesson?.teachers[0]</p>
                    <p class="lesson-location">@zermelo_NextLesson?.locations[0]</p>
                </div>
            </div>
            <div class="icon">
                <i class="fa-solid fa-calendar fa-fw card-icon active"></i>
            </div>
        </div>

        <div class="child last-grade">
            <div class="information">
                <h1 class="heading">Laatste cijfer</h1>
                <div class="grade-info">
                    <p class="grade-subject">@somtoday_LastGrade?.vak.naam:</p>
                    <p class="grade-number">@somtoday_LastGrade?.geldendResultaat</p>
                    <p class="grade-number">@(somtoday_LastGrade?.weging == 0 ? somtoday_LastGrade.examenWeging : 0)x</p>
                </div>
            </div>
            <div class="icon">
                <i class="fa-solid fa-line-chart fa-fw card-icon active"></i>
            </div>
        </div>

        <div class="child last-grade">
            <div class="information">
                <h1 class="heading">Laatste cijfer</h1>
                <div class="grade-info">
                    <p class="grade-subject">@somtoday_LastGrade?.vak.naam:</p>
                    <p class="grade-number">@somtoday_LastGrade?.geldendResultaat</p>
                    <p class="grade-number">@(somtoday_LastGrade?.weging == 0 ? somtoday_LastGrade.examenWeging : 0)x</p>
                </div>
            </div>
            <div class="icon">
                <i class="fa-solid fa-line-chart fa-fw card-icon active"></i>
            </div>
        </div>

    </div>

    <div class="row-2">
        <div class="child weather">
            <div class="header">
                <div class="information">
                    <h1 class="heading">Weer</h1>
                    <div class="weather-info">
                        <p class="weather-temp"></p>
                        <p class="weather-location">Gouda - John Mottstraat</p>
                    </div>
                </div>
                <div class="icon">
                    <i class="fa-solid fa-cloud fa-fw card-icon active"></i>
                </div>
            </div>
            <div class="weather-graph-underlay">
            </div>
            <div class="weather-graph">
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line current"></div>
            </div>
        </div>
        <div class="child">

        </div>
    </div>
</div>

<script defer>  
    RefreshWeer();

    function RefreshWeer() {
        fetch('https://cdn-secure.buienalarm.nl/api/3.4/forecast.php?lat=52.011194&lon=4.726696&region=nl&unit=mm/u')
        .then(response => response.json())
        .then(data => { 
            //temp text
            document.querySelector(".weather-temp").innerText = (data["temp"] + "°C");
            
            
            
            //current time line
            let startUnix = data["start"];
            let endUnix = Number(data["start"]) + 7200;
            let currentUnix = Math.floor(Date.now() / 1000);
            let currentLine = document.querySelector(".current");
            let widthOfWorkingFieldInPixels = document.querySelector(".weather-graph").clientWidth;
            let widthOfASecondInPixels = widthOfWorkingFieldInPixels / 7200;
            let currentLinePosition = (currentUnix - startUnix) * widthOfASecondInPixels;         
            currentLine.style.left = (currentLinePosition + 12) + "px";
            
            //interval of 5 to recalculate the position of the current line
            setInterval(() => {
                currentLinePosition = (Math.floor(Date.now() / 1000) - startUnix) * widthOfASecondInPixels;
                currentLine.style.left = (currentLinePosition + 12) + "px";
            }, 5000);
            
            
            
            //array of 25 - 10 5-minute intervals4
            let precipitation = data["precip"];
            //let precipitation = [0,0.2,0.2,0.3,0.5,0.1,0,0,0,0,0,0,4,5,3,1.2,0,1,0.5,0,0,0,0.2,0.1,0]; //test data
           
            const svgContainer = document.getElementsByClassName('weather-graph-underlay')[0];
            const svg = createSmoothBezierCurve(precipitation);
            console.log(svg);
            svgContainer.appendChild(svg);
        });
    }
       
    function createSmoothBezierCurve(numbers) {       
        const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
        svg.setAttribute("preserveAspectRatio", "none");
        svg.setAttribute("class", "graph-chart");
        svg.setAttribute("viewBox", "0 0 250 300");
        
        const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
        path.setAttribute("d", createBezierPath(numbers));
        path.setAttribute("vector-effect", "non-scaling-stroke");
        path.setAttribute("fill", "#00B3FF");
        path.setAttribute("stroke", "#8ABAFF");
        path.setAttribute("stroke-width", "0");
        path.setAttribute("stroke-linecap", "butt");
        
        svg.appendChild(path);
        
        return svg;
        
        function createBezierPath(numbers) {
            // Just like before, create the starting point
            let path = "M" + (0) + " " + (300 - numbers[0] * 10);
        
            // Calculate the control points for the Bezier curves
            for (let i = 1; i < numbers.length - 1; i++) {
                const x0 = (i - 1) * 10;
                const y0 = 300 - numbers[i - 1] * 10;
        
                const x1 = i * 10;
                const y1 = 300 - numbers[i] * 10;
        
                const x2 = (i + 1) * 10;
                const y2 = 300 - numbers[i + 1] * 10;
        
                const x3 = (i + 2) * 10;
                const y3 = 300 - numbers[i + 2] * 10;
                
                if (isNaN(x0) || isNaN(y0) || isNaN(x1) || isNaN(y1) || isNaN(x2) || isNaN(y2) || isNaN(x3) || isNaN(y3)) {
                    continue;
                }
        
                const cp1x = Math.round(x1 + (x2 - x0) / 6);
                const cp1y = Math.round(y1 + (y2 - y0) / 6);
        
                const cp2x = Math.round(x2 - (x3 - x1) / 6);
                const cp2y = Math.round(y2 - (y3 - y1) / 6);
        
                path += "C" + cp1x + " " + cp1y + ", " + cp2x + " " + cp2y + ", " + x2 + " " + y2;
            }
        
            // Add the final line segment to complete the path
            path += "L" + (numbers.length * 10) + " " + (300 - numbers[numbers.length - 1] * 10);
        
            return path;
        }

    }
   
</script>
