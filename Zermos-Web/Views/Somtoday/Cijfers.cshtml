@using Zermos_Web.Models.SomtodayGradesModel
@using System.Globalization
@using Zermos_Web.Models.SomtodayVakgemiddeldenModel
@using Zermos_Web.Utilities
@model Zermos_Web.Models.SortedSomtodayGradesModel.SortedSomtodayGradesModel

@{

    var lastUpdated = Context.Request.Cookies["last-seen-somtoday-grades"] == null
        ? DateTime.MinValue
        : DateTime.Parse(Context.Request.Cookies["last-seen-somtoday-grades"]);
    
    string GetNotificationClass(DateTime lastGradeDate)
    {
        return lastUpdated < lastGradeDate ? "notify-me" : "";
    }
}

<link rel="stylesheet" href="~/css/somtoday.css"/>

<!--  Create 2 equal sized panels, left should be grades and SE grades both with a slider at the top to select which one, the right the last x grades ->
<!- When the screen is less then 100px wide, the all the panels should be combined into one panel, with 3 options at the slider at the top    -->


<div class="grade-controls">
    <div id="togglePanel1" onclick="selectLine(1)">Rapport</div>
    <div id="togglePanel2" onclick="selectLine(2)">Examen</div>
    <div id="togglePanel3" onclick="selectLine(3)">Geschiedenis</div>
    <div id="underline"></div>
</div>
<div class="grades-container">
    <div id="panel1" class="panel"> <!-- Voortgangsdossier -->
        <h1 class="grades-title">Voortgangsdossier</h1>
        @foreach (var grade in Model.items)
        {
            if (grade.cijfer == "-") { continue; }

            <table class="grade-table" @Html.Raw(GetNotificationClass(grade.cijfers.FirstOrDefault()!.datumInvoerEerstePoging))>
                <tr class="grade-table-header">
                    <td colspan="2">@grade.vakNaam</td>
                    <td>@(grade.weging)x</td>
                    <td class="@(grade.cijfer.ToFloat() >= 5.45f ? "sufficient" : "insufficient ")">@grade.cijfer.Replace(",", ".")</td>
                </tr>
                <tr class="grade-table-header">
                    <td colspan="2">Laatste cijfer</td>
                    <td></td>
                    <td class="@(grade.cijfers.FirstOrDefault()!.cijfer >= 5.45 ? "sufficient" : "insufficient ")">@grade.cijfers.Last().formattedResultaat</td>
                </tr>
            </table>
        }

        @* <div class="grade"> *@
        @*     <div class="grade-title">Totaalgemiddelde</div> *@
        @*     <div class="grade-cijfer">~ @Model.voortGangsdossierGemiddelde</div> *@
        @* </div> *@
        
        <table class="grade-table">
            <tr class="grade-table-header">
                <td colspan="2">Totaalgemiddelde</td>
                <td></td>
                <td class="@(Model.voortGangsdossierGemiddelde >= 5.45 ? "sufficient" : "insufficient ")">~ @(Model.voortGangsdossierGemiddelde.ToString().Replace(",", "."))</td>
            </tr>
        </table>
    </div>
    <div id="panel2" class="panel"> <!-- Schoolexamen cijfers -->
        <h1 class="grades-title">Schoolexamen cijfers</h1>
        @foreach (var grade in Model.items)
        {
            if (grade.cijferSE == "-") { continue; }
            
            <div class="grade">
                <div class="grade-title">@grade.vakNaam</div>
                <div class="grade-cijfer">@(grade.wegingSE)x @grade.cijferSE</div>
            </div>
        }
    </div>
    <div id="panel3" class="panel"> <!-- Geschiedenis -->
        <h1 class="grades-title">Geschiedenis</h1>
        @foreach (var grade in Model.lastGrades)
        {
            <div class="grade">
                <div class="grade-title">@grade.additionalObjects.vaknaam</div>
                <div class="grade-desc">@grade.omschrijving</div>
                <div class="grade-cijfer">@(grade.weging)x @grade.cijfer</div>
            </div>
        }
    </div>
</div>
<script>
    var panel1 = document.getElementById('panel1');
    var panel2 = document.getElementById('panel2');
    var panel3 = document.getElementById('panel3');
    var togglePanel1 = document.getElementById('togglePanel1');
    var togglePanel2 = document.getElementById('togglePanel2');
    var togglePanel3 = document.getElementById('togglePanel3');

    function updatePanels() {
        const isWideScreen = window.innerWidth > 1000;
        if (isWideScreen) {
            panel3.style.display = 'flex';
            togglePanel3.style.display = 'none';
            if (panel2.style.display === 'flex') {
                panel1.style.display = 'none';
            } else {
                panel1.style.display = 'flex';
            }
        } else {
            togglePanel3.style.display = 'flex';
            if (panel3.style.display === 'flex') {
                panel1.style.display = 'none';
                panel2.style.display = 'none';
            } else if (panel2.style.display === 'flex') {
                panel1.style.display = 'none';
                panel3.style.display = 'none';
            } else {
                panel1.style.display = 'flex';
                panel2.style.display = 'none';
                panel3.style.display = 'none';
            }
        }
    }

    togglePanel1.addEventListener('click', () => ShowPanel(panel1));
    togglePanel2.addEventListener('click', () => ShowPanel(panel2));
    togglePanel3.addEventListener('click', () => ShowPanel(panel3));
    window.addEventListener('resize', () => {updatePanels(); selectLine(currentSelectedPanel);});
        
    function ShowPanel(panel) {
        panel1.style.display = 'none';
        panel2.style.display = 'none';
        panel3.style.display = 'none';
        panel.style.display = 'flex';
        updatePanels();
    }

    updatePanels();
    
    var currentSelectedPanel = 1;
    var underline = document.getElementById('underline');
    var buttons = document.querySelectorAll('.grade-controls div');

    function selectLine(buttonNumber) {
        
        currentSelectedPanel = buttonNumber;

        const selectedButton = buttons[buttonNumber - 1];
        if (selectedButton) {
            const buttonRect = selectedButton.getBoundingClientRect();
            const containerRect = selectedButton.parentElement.getBoundingClientRect();

            underline.style.width = `${buttonRect.width}px`;
            underline.style.left = `${buttonRect.left - containerRect.left}px`;
        }
    }
    
    selectLine(1);
    
    document.querySelectorAll('.grade-table[notify-me]').forEach((table) => {
        table.innerHTML = "<div class=\"grade-notification\"></div>" + table.innerHTML;
    });

</script>

@* <script minimize> *@
@* @Context.Items["dmjs"] *@
@* *@
@* //get all the sortedGrades.vak.naam and put them in an array with quotes around them *@
@* var vakken = ["@Html.Raw(string.Join("\",\"", sortedGrades.Select(x => x.vak.naam).Distinct()))"]; *@
@* var short = ["@Html.Raw(string.Join("\",\"", sortedGrades.Select(x => x.vak.afkorting).Distinct()))"]; *@
@* *@
@* // share button *@
@* addButtonToPage('fa-share-from-square', () => { *@
@* *@
@*     new ZermosModal() *@
@*     .setTitle("Deel je cijfers") *@
@*     .addText("Deel je cijfers met je vrienden! Kies hieronder een datum tot wanneer je cijfers gedeeld mogen worden, welke cijfers zichtbaar zijn én of ze alleen je gemiddelde mogen zien of ook de individuele cijfers. Pas wel op, nieuwe cijfers blijven niet automatisch gedeeld worden, je moet dus een nieuwe link genereren als je nieuwe cijfers wilt delen.") *@
@*     .addDateInput("Wat is de verval datum?", new Date(Date.now() + 604800000)) *@
@*     .addToggle("Laat individuele cijfers zien", false) *@
@*     .addMultiToggles(vakken, vakken, vakken.map(vak => true)) *@
@*     .setSubmitButtonLabel("Deel") *@
@*     .onSubmit((date, indivd, allowed) => { *@
@* *@
@*         //make date to a dd-mm-yyyy format *@
@*         var expires_at = date.split('-'); *@
@*         expires_at = expires_at[1] + '-' + expires_at[0] + '-' + expires_at[2]; *@
@* *@
@* *@
@* *@
@*         var vakken = []; *@
@*         for (var i = 0; i < allowed.length; i++) { *@
@*             if (allowed[i]) { *@
@*                 vakken.push(short[i]); *@
@*             } *@
@*         } *@
@* *@
@*         console.log(vakken, allowed); *@
@* *@
@*         //return's an plan string url *@
@*         fetch('/Somtoday/Cijfers/GenereerToken?expires_at=' + expires_at + '&vakken=' + vakken.join(',') + '&show_individual_grades=' + document.getElementById('input2').checked) *@
@*         .then(response => response.text()) *@
@*         .then((url) => { *@
@*             new ZermosModal() *@
@*             .setTitle("Deel je cijfers") *@
@*             .addText("Deel je cijfers met je vrienden, zij hoeven geen account hiervoor te hebben.") *@
@*             .addText("De link is: " + url) *@
@*             .hideSubmitButton() *@
@*             .addButton("Kopieer link", () => { *@
@*                 copyToClipboard(url); *@
@*             }) *@
@*             .open(); *@
@*         }); *@
@* *@
@*     }) *@
@*     .open(); *@
@* *@
@* }, VerticalAlignment.TL, Background.Primary); *@
@* *@
@* addButtonToPage("fa-clock-rotate-left", () => { *@
@* *@
@*    //show last 10 grades *@
@*     new ZermosModal() *@
@*     .setTitle("Laatste 10 cijfers") *@
@*     .setSubmitButtonLabel("Sluiten") *@
@*     .addText("Hieronder zie je de laatste 10 cijfers die je hebt gehaald.") *@
@* @{ *@
@*     @foreach (var grade in Model.items.OrderByDescending(x => x.datumInvoer).Take(10)) *@
@*     { *@
@* <text> *@
@*     .addText('@grade.vak.naam - @(grade.weging == 0 ? grade.examenWeging : grade.weging)x - @grade.geldendResultaat - @(grade.omschrijving ?? "")') *@
@* </text> *@
@*     } *@
@* } *@
@* *@
@*     .open(); *@
@* *@
@* }, VerticalAlignment.BL, Background.Accent); *@
@* *@
@* addButtonToPage("fa-refresh", () => { *@
@*     document.cookie = "cached-somtoday-grades=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;"; *@
@*     ReplacePage('/Somtoday/Cijfers'); *@
@* }, VerticalAlignment.TL, Background.Primary); *@
@* </script> *@