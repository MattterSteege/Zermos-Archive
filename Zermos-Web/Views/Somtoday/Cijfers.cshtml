@using Zermos_Web.Models.SomtodayGradesModel
@using Item = Zermos_Web.Models.SomtodayGradesModel.Item
@using System.Globalization
@using System.Text
@using Microsoft.AspNetCore.Http
@using Newtonsoft.Json
@using Zermos_Web.Utilities
@model Zermos_Web.Models.SomtodayGradesModel.SomtodayGradesModel

@{
    //if Model is null, quit rendering
    if (Model == null)
    {
        return;
    }
    
    //Context.Response.Cookies.Append("last-seen-grades", DateTime.Now.ToString("dd-MM-yyyy HH:mm:ss"), new CookieOptions {Expires = DateTime.Now.AddDays(60)});
    //ISO 8601
    Context.Response.Cookies.Append("last-seen-somtoday-grades", DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss"), new CookieOptions {Expires = DateTime.Now.AddDays(60)});
    
    //grade history, make a string and then in the history do the html.raw or smth
    
    var sortedGrades = new List<sortedGrades>();
    foreach (var grade in Model.items)
    {
        var vak = sortedGrades.Find(x => x.vak.naam == grade.vak.naam);
        if (vak == null)
        {
            vak = new sortedGrades();
            vak.vak = grade.vak;
            vak.grades = new List<Item>();
            sortedGrades.Add(vak);
        }
        vak.grades.Add(grade);
    }
    

    sortedGrades.Sort((x, y) => string.Compare(x.vak.naam.ToLower(), y.vak.naam.ToLower(), StringComparison.Ordinal));
    
    var lastUpdated = Context.Request.Cookies["last-seen-somtoday-grades"] == null ? DateTime.MinValue : DateTime.Parse(Context.Request.Cookies["last-seen-somtoday-grades"]);
}

<link rel="stylesheet" href="~/css/somtoday.css" />

@* <div class="grades" style="grid-template-columns: @(DetectionService.Device.Type == Device.Mobile ? "1fr" : "3fr 1fr");"> *@
<div class="grades">
    <div class="grades-container">
        @foreach (var vak in sortedGrades)
        {
            //turn the model into a json string turn it into bytes and encode with base64
            var encoded = Convert.ToBase64String(Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(vak)));

            var sumOfWeightedGrades = 0.0f;
            var sumOfWeights = vak.grades.Sum(gradeItem => gradeItem.weging == 0 ? gradeItem.examenWeging : gradeItem.weging);
            var hasNonZeroWeight = false;
            var gradesArray = new float[vak.grades.Count];
            var gradesWeight = new int[vak.grades.Count];

            for (var i = 0; i < vak.grades.Count; i++)
            {
                var gradeItem = vak.grades[i];
                var geldendResultaat = NumberUtils.ParseFloat(gradeItem.geldendResultaat);

                if ((gradeItem.weging == 0 ? gradeItem.examenWeging : gradeItem.weging) == 0 && sumOfWeights == 0)
                {
                    sumOfWeightedGrades += NumberUtils.ParseFloat(gradeItem.geldendResultaat);
                    continue;
                }

                sumOfWeightedGrades += geldendResultaat * (gradeItem.weging == 0 ? gradeItem.examenWeging : gradeItem.weging);
                hasNonZeroWeight = true;
                
                gradesArray[i] = NumberUtils.ParseFloat(vak.grades[i].geldendResultaat);
                gradesWeight[i] = vak.grades[i].weging == 0 ? vak.grades[i].examenWeging : vak.grades[i].weging;
            }

            if (!hasNonZeroWeight)
            {
                sumOfWeights = vak.grades.Count;
            }

            var gemiddelde = MathF.Round(sumOfWeightedGrades / sumOfWeights, 1, MidpointRounding.AwayFromZero);

            
            var WeightedAverageSnapshots = NumberUtils.CalculateWeightedAverageSnapshots(gradesArray, gradesWeight);
            double gradeChange = 0;
            try
            {
                //var lastGrade = WeightedAverageSnapshots[^2];
                //var currentGrade = WeightedAverageSnapshots[^1];
                gradeChange = Math.Round((double)((WeightedAverageSnapshots[^1] - WeightedAverageSnapshots[^2]) / WeightedAverageSnapshots[^2] * 100), 2);
            }
            catch (Exception)
            {
                gradeChange = 100;
            }

            <div class="vak">
                <a onclick="ReplacePage('@Url.Action("Cijfer", "Somtoday", new {vak = vak.vak.afkorting.Capitalize()})')">
                    @if (lastUpdated < vak.grades[^1].datumInvoer)
                    {
                        <!--Er is een mogelijkheid om tekst toe te voegen-->
                        <div class="grade-notification"></div>
                    }
                    <div class="top-30">
                        <h1>@vak.vak.naam</h1>
                        <p>@(vak.grades.Sum(gradeItem => gradeItem.weging == 0 ? gradeItem.examenWeging : gradeItem.weging))x</p>
                        <p class="@(gemiddelde >= 5.5f ? "sufficient" : "insufficient ")">@(gemiddelde.ToString("0.0", CultureInfo.InvariantCulture))</p>
                    </div>
                    <div class="bottom-70">
                        <p style="flex-grow: 1; text-align: end;">Laatste cijfer:</p>
                        <p style="margin-left: 16px; flex-grow: 1;" class="@(NumberUtils.ParseFloat(vak.grades[^1].geldendResultaat) >= 5.5f ? "sufficient" : "insufficient ")">@vak.grades[^1].geldendResultaat</p>
                        <p style="margin-left: 16px; flex-grow: 1;" class="@(gradeChange > 0 ? "sufficient" : "insufficient ")">@(gradeChange > 0 ? "+" : "")@(gradeChange)%</p>
                    </div>
                </a>
            </div>
        }

    </div>
    @* @if (DetectionService.Device.Type != Device.Mobile) *@
    @* { *@
    @*     <div class="grades-history"> *@
    @*         <div class="history-container"> *@
    @*             @foreach (var grade in Model.items.GetRange(Model.items.Count - 20, 20)) *@
    @*             { *@
    @*                 <div class="history-grade"> *@
    @*                     @grade.vak.naam - @grade.geldendResultaat - @(grade.weging == 0 ? grade.examenWeging : grade.weging) *@
    @*                 </div> *@
    @*             } *@
    @*         </div> *@
    @*     </div> *@
    @* } *@
</div>