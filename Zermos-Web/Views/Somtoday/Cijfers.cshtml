@using Zermos_Web.Models.SomtodayGradesModel
@using Item = Zermos_Web.Models.SomtodayGradesModel.Item
@using System.Globalization
@using System.Text
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Newtonsoft.Json
@using Wangkanai.Detection.Models
@using Zermos_Web.Utilities
@inject Wangkanai.Detection.Services.IDetectionService DetectionService
@model Zermos_Web.Models.SomtodayGradesModel.SomtodayGradesModel

@{
    Context.Response.Cookies.Append("last-seen-grades", DateTime.Now.ToString("dd-MM-yyyy HH:mm:ss"), new CookieOptions {Expires = DateTime.Now.AddDays(60)});

    var sortedGrades = new List<sortedGrades>();
    foreach (var grade in Model.items)
    {
        var vak = sortedGrades.Find(x => x.vak.naam == grade.vak.naam);
        if (vak == null)
        {
            vak = new sortedGrades();
            vak.vak = grade.vak;
            vak.grades = new List<Item>();
            sortedGrades.Add(vak);
        }
        vak.grades.Add(grade);
    }
    

    sortedGrades.Sort((x, y) => string.Compare(x.vak.naam.ToLower(), y.vak.naam.ToLower(), StringComparison.Ordinal));
}
@* <div class="grades" style="grid-template-columns: @(DetectionService.Device.Type == Device.Mobile ? "1fr" : "3fr 1fr");"> *@
<div class="grades">
    <div class="grades-container">
        @foreach (var vak in sortedGrades)
        {
            //turn the model into a json string turn it into bytes and encode with base64
            var encoded = Convert.ToBase64String(Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(vak)));

            float sumOfWeightedGrades = 0.0f;
            int sumOfWeights = vak.grades.Sum(gradeItem => gradeItem.weging == 0 ? gradeItem.examenWeging : gradeItem.weging);
            bool hasNonZeroWeight = false;

            for (int i = 0; i < vak.grades.Count; i++)
            {
                var gradeItem = vak.grades[i];
                var geldendResultaat = NumberUtils.ParseFloat(gradeItem.geldendResultaat);

                if ((gradeItem.weging == 0 ? gradeItem.examenWeging : gradeItem.weging) == 0 && sumOfWeights == 0)
                {
                    sumOfWeightedGrades += NumberUtils.ParseFloat(gradeItem.geldendResultaat);
                    continue;
                }

                sumOfWeightedGrades += (geldendResultaat * (gradeItem.weging == 0 ? gradeItem.examenWeging : gradeItem.weging));
                hasNonZeroWeight = true;
            }

            if (!hasNonZeroWeight)
            {
                sumOfWeights = vak.grades.Count;
            }

            float gemiddelde = MathF.Round(sumOfWeightedGrades / sumOfWeights, 1, MidpointRounding.AwayFromZero);

            <div class="vak">
                <a asp-controller="Somtoday" asp-action="Cijfer" asp-route-content="@encoded">
                    @if (Context.Request.Cookies["last-seen-grades"] == null || DateTime.Parse(Context.Request.Cookies["last-seen-grades"]) < vak.grades[^1].datumInvoer)
                    {
                        <!--Er is een mogelijkheid om tekst toe te voegen-->
                        <div class="notification"></div>
                    }
                    <div class="top-30">
                        <h1>@vak.vak.naam</h1>
                        <p>@(vak.grades.Sum(gradeItem => gradeItem.weging == 0 ? gradeItem.examenWeging : gradeItem.weging))x</p>
                        <p class="@(gemiddelde >= 5.5f ? "sufficient" : "insufficient ")">@(gemiddelde.ToString("0.0", CultureInfo.InvariantCulture))</p>
                    </div>
                    <div class="bottom-70">
                        <p style="flex-grow: 1; text-align: end;">Laatste cijfer:</p>
                        <p style="margin-left: 16px; flex-grow: 1;" class="@(NumberUtils.ParseFloat(vak.grades[^1].geldendResultaat) >= 5.5f ? "sufficient" : "insufficient ")">@vak.grades[^1].geldendResultaat</p>
                    </div>
                </a>
            </div>
        }

    </div>
    @* @if (DetectionService.Device.Type != Device.Mobile) *@
    @* { *@
    @*     <div class="grades-history"> *@
    @*         <div class="history-container"> *@
    @*             @foreach (var grade in Model.items.GetRange(Model.items.Count - 20, 20)) *@
    @*             { *@
    @*                 <div class="history-grade"> *@
    @*                     @grade.vak.naam - @grade.geldendResultaat - @(grade.weging == 0 ? grade.examenWeging : grade.weging) *@
    @*                 </div> *@
    @*             } *@
    @*         </div> *@
    @*     </div> *@
    @* } *@
</div>