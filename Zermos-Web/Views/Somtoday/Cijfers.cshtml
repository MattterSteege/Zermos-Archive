@using Zermos_Web.Models.SomtodayGradesModel
@using System.Globalization
@using Microsoft.AspNetCore.Http
@using Zermos_Web.Models.SomtodayVakgemiddeldenModel
@using Zermos_Web.TagHelpers
@using Zermos_Web.Utilities
@model Zermos_Web.Models.SortedSomtodayGradesModel.SortedSomtodayGradesModel

@{
    Context.Response.Cookies.Append("last-seen-somtoday-grades", DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss"), new CookieOptions {Expires = DateTime.Now.AddDays(60)});

    var lastUpdated = Context.Request.Cookies["last-seen-somtoday-grades"] == null
        ? DateTime.MinValue
        : DateTime.Parse(Context.Request.Cookies["last-seen-somtoday-grades"]);
    
    string GetNotificationClass(DateTime? lastGradeDate)
    {
        if (lastGradeDate == null || lastGradeDate == DateTime.MaxValue) return "";
        return lastUpdated < lastGradeDate ? "notify-me" : "";
    }
    
    float cijferSEAverage = 0;
    int cijferSECount = 0;
}

<link rel="stylesheet" href="/css/somtoday.css" preload/>

<!--  Create 2 equal sized panels, left should be grades and SE grades both with a slider at the top to select which one, the right the last x grades ->
<!- When the screen is less then 100px wide, the all the panels should be combined into one panel, with 3 options at the slider at the top    -->


<div class="grade-controls">
    <div id="togglePanel1" onclick="selectLine(1)">Rapport</div>
    @if (!Model.onlyVoorVoortgang)
    {
        <div id="togglePanel2" onclick="selectLine(2)">Examen</div>
        <div id="togglePanel3" onclick="selectLine(3)">Geschiedenis</div>
    }
    <div id="underline" style="left: -100px; width: 0"></div>
</div>
<div class="grades-container">
    <div id="panel1" class="panel" data-settings=""> <!-- Voortgangsdossier -->
        <h1 class="grades-title">Voortgangsdossier   <span class="icon-container"><i class="fa-solid fa-list-dropdown" onclick="showSettings('voortgang')"></i><i class="fa-solid fa-info-circle" onclick="showInfo('voortgang')"></i></span></h1>
        @foreach (var grade in Model.items)
        {
            if (grade.cijfer == "-") { continue; }

            <table class="grade-table" @Html.Raw(GetNotificationClass(grade.cijfers?[0]?.datumInvoerEerstePoging ?? DateTime.MaxValue)) onclick="ReplacePage('./@grade.vakAfkorting.Capitalize()/@grade.vakuuid.simpleEncodeUUID()/@Model.relevanteCijferLichtingUUID.simpleEncodeUUID()/@Model.leerjaarUUID.simpleEncodeUUID()')">
                <tr class="grade-table-header">
                    <td rowspan="2"><i class="fa-solid fa-book" data-name="@grade.vakNaam.ToLower()" data-name-short="@grade.vakAfkorting.ToLower()"></i></td>
                    <td>@grade.vakNaam.Capitalize()</td>
                    <td>@(grade.weging)x</td>
                    <td class="@(grade.cijfer.ToFloat() >= 5.45f ? "sufficient" : "insufficient ")">@grade.cijfer.Replace(",", ".")</td>
                    <td style="display: none" class="@(grade.cijfer.ToFloat() >= 5.45f ? "sufficient" : "insufficient ")">@grade.cijfer.ToFloat().ExamenAfronding()</td>
                </tr>
                @if (grade.cijfers != null && grade.cijfers.Count > 0)
                {
                    <tr class="grade-table-header">+
                        <td style="display: none"></td>
                        <td>Laatste cijfer</td>
                        <td></td>
                        <td class="@(grade.cijfers[0].cijfer >= 5.45 ? "sufficient" : "insufficient ")">@grade.cijfers[0].formattedResultaat</td>
                    </tr>
                }
                else
                {
                    <tr class="grade-table-header">
                        <td style="display: none"></td>
                        <td></td>
                        <td></td>
                        <td></td>
                    </tr>
                }
            </table>
        }
        
        <table class="grade-table">
            <tr class="grade-table-header">
                <td colspan="2">Totaalgemiddelde</td>
                <td></td>
                <td class="@(Model.voortGangsdossierGemiddelde >= 5.45 ? "sufficient" : "insufficient ")">~ @(Model.voortGangsdossierGemiddelde.ToString().Replace(",", "."))</td>
            </tr>
        </table>
    </div>
    
@if (!Model.onlyVoorVoortgang)
{
    <div id="panel2" class="panel" data-settings="" @(Model.onlyVoorVoortgang ? "style=\"display: flex\"" : "")> <!-- Examen -->
        <h1 class="grades-title">Schoolexamen cijfers <span class="icon-container"><i class="fa-solid fa-list-dropdown" onclick="showSettings('examen')"></i><i class="fa-solid fa-info-circle" onclick="showInfo('examen')"></i></span></h1>
        @foreach (var grade in Model.items)
        {
            if (grade.cijferSE == "-") { continue; }
            
            cijferSEAverage += grade.cijferSE.ToFloat();
            cijferSECount++;
            
            //Combine the data from cijferSE with the structure of cijfer
            <table class="grade-table" @Html.Raw(GetNotificationClass((grade.cijfersSE != null && grade.cijfersSE.Count > 0) ? grade.cijfersSE.FirstOrDefault()!.datumInvoerEerstePoging : DateTime.MinValue)) onclick="ReplacePage('./@grade.vakAfkorting.Capitalize()/@grade.vakuuid.simpleEncodeUUID()/@Model.relevanteCijferLichtingUUID.simpleEncodeUUID()/@Model.leerjaarUUID.simpleEncodeUUID()')">
                <tr class="grade-table-header">
                    <td rowspan="2"><i class="fa-solid fa-book" data-name="@grade.vakNaam.ToLower()" data-name-short="@grade.vakAfkorting.ToLower()"></i></td>
                    <td>@grade.vakNaam</td>
                    <td>@(grade.wegingSE)x</td>
                    <td class="@(grade.cijferSE.ToFloat() >= 5.45f ? "sufficient" : "insufficient ")">@grade.cijferSE.Replace(",", ".")</td>
                    <td style="display: none" class="@(grade.cijferSE.ToFloat() >= 5.45f ? "sufficient" : "insufficient ")">@grade.cijferSE.ToFloat().ExamenAfronding()</td>
                </tr>
                <tr class="grade-table-header">
                    <td style="display: none"></td>
                    <td>Laatste cijfer</td>
                    <td></td>
                    <td class="@(grade.cijfersSE != null && grade.cijfersSE.Count > 0 && (grade.cijfersSE.FirstOrDefault()!.cijfer >= 5.45 || grade.cijfersSE.FirstOrDefault()!.isLabel) ? "sufficient" : "insufficient ")">@grade.cijfersSE?.FirstOrDefault()?.formattedResultaat</td>
                </tr>
            </table>
        }

        <table class="grade-table">
            <tr class="grade-table-header">
                <td colspan="2">Totaalgemiddelde</td>
                <td></td>
                <td class="@(cijferSEAverage / cijferSECount >= 5.45 ? "sufficient" : "insufficient ")">~ @((cijferSEAverage / cijferSECount).ToString("0.0").Replace(",", "."))</td>
            </tr>
        </table>
    </div>
    
    <div id="panel3" class="panel"> <!-- Geschiedenis -->
        <h1 class="grades-title">Geschiedenis</h1>
        @foreach (var grade in Model.lastGrades)
        {
            <table class="grade-table" @Html.Raw(GetNotificationClass(grade.datumInvoerEerstePoging))>
                <tr class="grade-table-header">
                    <td>@(grade.isSE ? "(SE) " : "")@grade.additionalObjects.vaknaam</td>
                    <td style="width: 10%; text-align: end;">@(grade.weging)x</td>
                    <td style="width: 10%; text-align: end;" class="@(grade.cijfer >= 5.45f || grade.isLabel  ? "sufficient" : "insufficient ")">@grade.formattedResultaat
                    @if (grade.isSE)
                    {
                        <i class="fa-solid fa-graduation-cap" aria-hidden="true" onclick="happyCappy(this)"></i>
                    }
                    @if (grade.type == "SamengesteldeToetsKolom")
                    {
                        <i class="fa-solid fa-layer-group" aria-hidden="true" onclick="happyCappy(this)"></i>
                    }
                    </td>
                </tr>
                <tr>
                    <td>@grade.omschrijving</td>
                    <td style="width: 10%; text-align: end;">@grade.datumInvoerEerstePoging.ToString("dd MMMM", new CultureInfo("nl-NL"))</td>
                </tr>
            </table>
        }
    </div>
}
</div>
<script minimize>
@Context.Items["dmjs"]
    var panel1 = document.getElementById('panel1');
    var panel2 = document.getElementById('panel2');
    var panel3 = document.getElementById('panel3');
    var togglePanel1 = document.getElementById('togglePanel1');
    var togglePanel2 = document.getElementById('togglePanel2');
    var togglePanel3 = document.getElementById('togglePanel3');

    function updatePanels() {
        if (panel3) togglePanel3.style.display = 'flex';
        if (panel3 && panel3.style.display === 'flex') {
            panel1.style.display = 'none';
            if (panel2) panel2.style.display = 'none';
        } else if (panel2 && panel2.style.display === 'flex') {
            panel1.style.display = 'none';
            if (panel3) panel3.style.display = 'none';
        } else {
            panel1.style.display = 'flex';
            if (panel2) panel2.style.display = 'none';
            if (panel3) panel3.style.display = 'none';
        }
    }

    togglePanel1.addEventListener('click', () => ShowPanel(panel1));
    if (togglePanel2) togglePanel2.addEventListener('click', () => ShowPanel(panel2));
    if (togglePanel3) togglePanel3.addEventListener('click', () => ShowPanel(panel3));
    window.addEventListener('resize', () => {updatePanels(); selectLine(currentSelectedPanel);});

    function ShowPanel(panel) {
        panel1.style.display = 'none';
        if (panel2) panel2.style.display = 'none';
        if (panel3) panel3.style.display = 'none';
        panel.style.display = 'flex';
        updatePanels();
    }

    updatePanels();

    var currentSelectedPanel = 1;
    var underline = document.getElementById('underline');
    var buttons = document.querySelectorAll('.grade-controls div');

    function selectLine(buttonNumber) {

        currentSelectedPanel = buttonNumber;

        const selectedButton = buttons[buttonNumber - 1];
        if (selectedButton) {
            const buttonRect = selectedButton.getBoundingClientRect();
            const containerRect = selectedButton.parentElement.getBoundingClientRect();

            underline.style.width = `${buttonRect.width}px`;
            underline.style.left = `${buttonRect.left - containerRect.left}px`;
        }
    }

    Zermos.mainAfterLoad = () => {
        currentSelectedPanel = 1;

        const selectedButton = buttons[0];
        if (selectedButton) {
            const buttonRect = selectedButton.getBoundingClientRect();
            const containerRect = selectedButton.parentElement.getBoundingClientRect();

            underline.style.width = `${buttonRect.width}px`;
            underline.style.left = `${buttonRect.left - containerRect.left}px`;
        }
    };
    
    document.querySelectorAll('.grade-table[notify-me]').forEach((table) => {
        table.innerHTML = "<div class=\"grade-notification\"></div>" + table.innerHTML;
    });


    //get all the icons at /vakkenIcons.json
    fetch('/vakkenIcons.json')
        .then(response => response.json())
        .then((icons) => {
            //get all the icons and put them in a map
            var iconMap = new Map();
            icons.forEach(icon => {
                icon.keywords.forEach(keyword => {
                    iconMap.set(keyword, icon.icon);
                });
            });

            //check if the name-short or name is in the iconMap, if it is, set the icon to the iconMap value, if not, set it to the default icon
            document.querySelectorAll('.grade-table-header i').forEach((icon) => {
                icon.outerHTML = iconMap.get(icon.dataset.name.toLowerCase()) ?? iconMap.get(icon.dataset.nameShort.toLowerCase()) ?? "<i class=\"fa-solid fa-book\"></i>";
            });
        });
        
        function toggleSEGradeRounding(panel, afronden){
            //fetch all pairs .grade-table .grade-table-header:first-child td:nth-child(4 | 5) and toggle them
            var gradePairs = panel.querySelectorAll('.grade-table .grade-table-header:first-child td:nth-child(4), .grade-table .grade-table-header:first-child td:nth-child(5)');
            //afronden = true -> show[n + 1], hide[n]
            //afronden = false -> show[n], hide[n + 1]                
            for (var i = 0; i < gradePairs.length; i += 2) {
                gradePairs[i].style.display = afronden ? 'none' : 'table-cell';
                gradePairs[i + 1].style.display = afronden ? 'table-cell' : 'none';
            }
        }
        
        function toggleSuffAndInsuff(panel, hideColor){
            //set the color of the grades that are sufficient or insufficient to var(--text-color)
            var gradePairs = panel.querySelectorAll('.sufficient, .insufficient');
            for (var i = 0; i < gradePairs.length; i++) {
                //if hideColor is true, set the style color to var(--text-color), else remove the style color
                gradePairs[i].style.color = hideColor ? 'var(--text-color)' : '';
            }
        }
        
        Zermos.mainBeforeLoad = () => {
            //when user swipes left or right, change the panel
            var touchstartX = 0;
            var touchendX = 0;
            addEventListenerToMain('touchstart', function(event) {
                touchstartX = event.changedTouches[0].screenX;
            }, false);
            addEventListenerToMain('touchend', function(event) {
                touchendX = event.changedTouches[0].screenX;
                handleGesture();
            }, false);

            function handleGesture() {
                var distance = Math.abs(touchstartX - touchendX);
                if (distance > 100) {
                    var nextPanel = currentSelectedPanel + (touchstartX - touchendX > 0 ? 1 : -1);
                    nextPanel = Math.min(3, Math.max(1, nextPanel));
                    
                    ShowPanel(document.getElementById('panel' + nextPanel));
                    currentSelectedPanel = nextPanel;
                    selectLine(nextPanel);
                }
            }
            
            //set Settings
            var settings = getSettings();
            panel1.dataset.settings = settings[0] ?? '';
            toggleSEGradeRounding(panel1, settings[0] ? settings[0].split(';').find(x => x.startsWith('afronden')).split('=')[1] === 'true' : false);
            toggleSuffAndInsuff(panel1, settings[0] ? settings[0].split(';').find(x => x.startsWith('hideColor')).split('=')[1] === 'true' : false);

            panel2.dataset.settings = settings[1] ?? '';
            toggleSEGradeRounding(panel2, settings[1] ? settings[1].split(';').find(x => x.startsWith('afronden')).split('=')[1] === 'true' : false);
            toggleSuffAndInsuff(panel2, settings[1] ? settings[1].split(';').find(x => x.startsWith('hideColor')).split('=')[1] === 'true' : false);
        }
        
        function saveSettings(rapport, exam)
        {
        
            var save = getSettings();
            if (rapport)
                save[0] = rapport.dataset.settings;
                
            if (exam)
                save[1] = exam.dataset.settings;
                
            localStorage.setItem('gradeSettings', JSON.stringify(save));
        }
        
        function getSettings()
        {
            return localStorage.getItem('gradeSettings') ? JSON.parse(localStorage.getItem('gradeSettings')) : ["",""];
        }


        function showSettings(panel) {
            if (panel === 'voortgang') {
                var parentPanel = document.getElementById('panel1');
                var currentSettings = getSettings()[0]; //setting=value;setting=value;...
                var settings = currentSettings.split(';');
                
                var afronden = settings.find(x => x.startsWith('afronden')) ? settings.find(x => x.startsWith('afronden')).split('=')[1] === 'true' : false;
                var hideColor = settings.find(x => x.startsWith('hideColor')) ? settings.find(x => x.startsWith('hideColor')).split('=')[1] === 'true' : false;
            
                new ZermosModal()
                .addHeading("Voortgangsdossier")
                .addText("Pas de instellingen aan van het voortgangsdossier. Je kan het volgende aanpassen:")
                .addToggle("Afronden op een heel getal", afronden, (ctx, isActive) => {
                    afronden = isActive;
                    toggleSEGradeRounding(parentPanel, isActive);

                    var newSettings = `afronden=${afronden};hideColor=${hideColor};`;
                    parentPanel.dataset.settings = newSettings;

                    var save = getSettings();
                    save[0] = newSettings;
                    localStorage.setItem('gradeSettings', JSON.stringify(save));
                })
                .addToggle("Geen kleur geven aan je cijfer", hideColor, (ctx, isActive) => {
                    hideColor = isActive;
                    toggleSuffAndInsuff(parentPanel, isActive);

                    var newSettings = `afronden=${afronden};hideColor=${hideColor};`;
                    parentPanel.dataset.settings = newSettings;

                    var save = getSettings();
                    save[0] = newSettings;
                    localStorage.setItem('gradeSettings', JSON.stringify(save));
                })
                .open();
            }
            else if (panel === 'examen') {
                var parentPanel = document.getElementById('panel2');
                var currentSettings = getSettings()[1]; //setting=value;setting=value;...
                var settings = currentSettings.split(';');
                
                var afronden = settings.find(x => x.startsWith('afronden')) ? settings.find(x => x.startsWith('afronden')).split('=')[1] === 'true' : false;
                var hideColor = settings.find(x => x.startsWith('hideColor')) ? settings.find(x => x.startsWith('hideColor')).split('=')[1] === 'true' : false;
            
                new ZermosModal()
                .addHeading("Schoolexamen cijfers")
                .addText("Pas de instellingen aan van de schoolexamen cijfers. Je kan het volgende aanpassen:")
                .addToggle("Afronden op een heel getal", afronden, (ctx, isActive) => {
                    afronden = isActive;
                    toggleSEGradeRounding(parentPanel, isActive);

                    var newSettings = `afronden=${afronden};hideColor=${hideColor};`;
                    parentPanel.dataset.settings = newSettings;

                    var save = getSettings();
                    save[1] = newSettings;
                    localStorage.setItem('gradeSettings', JSON.stringify(save));
                })
                .addToggle("Geen kleur geven aan je cijfer", hideColor, (ctx, isActive) => {
                    hideColor = isActive;
                    toggleSuffAndInsuff(parentPanel, isActive);

                    var newSettings = `afronden=${afronden};hideColor=${hideColor};`;
                    parentPanel.dataset.settings = newSettings;

                    var save = getSettings();
                    save[1] = newSettings;
                    localStorage.setItem('gradeSettings', JSON.stringify(save));
                })
                .open();
            }
        }
        
        function showInfo(panel) {
            if (panel === 'voortgang') {
                new ZermosModal()
                .addHeading("Voortgangsdossier")
                .addText("Het voortgangsdossier is een overzicht van alle cijfers die je hebt gehaald die meetellen voor je voortgangsdossier. Dit zijn cijfers van toetsen, opdrachten en andere beoordelingen.")
                .addButton("aight", (ctx) => { ctx.close(); })
                .open();
            }
            else if (panel === 'examen') {
                new ZermosModal()
                .addHeading("Schoolexamen cijfers")
                .addText("De schoolexamen cijfers zijn cijfers die je hebt gehaald voor toetsen die meetellen voor je schoolexamen. Dit zijn cijfers die uiteindelijk meetellen voor je centraal examen. <br><br>Helaas hebben deze cijfers geen pagina waar je alle cijfers kan zien die je hebt gehaald, dit komt omdat de cijfers (vaak) over verschillende leerjaren worden gegeven en ik dat niet in een keer kan opvragen. Hopelijk komt dit in de toekomst nog, maar dat is momenteel niet mijn grootste prioriteit. Als je SE cijfers hebt voor vakken waar je dat jaar ook voorgangsdossier cijfers voor hebt gekregen kun je ze wel bekijken, ga dan naar 'Rapport' en klik op het desbetreffende vak.", true)
                .addButton("Hmm, oké", (ctx) => { ctx.close(); })
                .open();
            }
        }

    var jaarlagen = JSON.parse('@Html.Raw(Json.Serialize(Model.plaatsing.Select(jaargang => new { label = jaargang.stamgroepnaam, value = Model.plaatsing.IndexOf(jaargang) + 1 })))');

    addButtonToPage("fa-history", () => {
        new ZermosModal()
        .addHeading("Vorige jaarlagen")
        .addText("Van welke jaarlagen wil je de cijfers zien?")
        .addDropdown(jaarlagen, true, false)
        .addButton("Start de tijdmachine!", (ctx) => { 
            var value = ctx.getComponentsValue().values[0].value;
            if (value !== "") {
                ReplacePage(`/Somtoday/Cijfers?leerjaar=${value.label}`, true);
            }
            ctx.close(); 
        })
        .open();
    }, VerticalAlignment.BT, Background.Accent);

    // share button
    addButtonToPage('fa-share-from-square', () => {

        new ZermosModal()
            .addHeading("Deel je cijfers")
            .addText("Deel je cijfers met je vrienden! Selecteer uit welk jaar en week je cijfers wilt delen en dan krijg je een persoonlijke link die je kan delen. Je hoeft geen account te hebben om deze link te bekijken.")
            .addDropdown(jaarlagen, true, false)
            .addDatePicker(true, new Date(Date.now() + 604800000))
            .addButton("Deel", (ctx) => {

                var values = ctx.getComponentsValue().values;

                if (values.correct === false) return;

                const leerjaar = values[0].value.label;

                const date = values[1].value;
                const dateObject = new Date(date);
                const currentYear = new Date().getFullYear();
                var expires_at = Math.floor(dateObject.getTime() / 1000);

                //return's an plan string url
                fetch('/Somtoday/Cijfers/genereer-token?leerjaar=' + leerjaar + '&expires_at=' + expires_at)
                    .then(response => response.text())
                    .then((url) => {
                        new ZermosModal()
                            .addHeading("Deel je cijfers")
                            .addText("Hier is de link die je kan delen met je vrienden. Deze link is geldig tot de datum die je hebt gekozen. Bekijk je geldige links op de account pagina.")
                            .addUrl(url, false, true)
                            .open();
                    });
            })
            .open();

    }, VerticalAlignment.TL, Background.Primary);
</script>