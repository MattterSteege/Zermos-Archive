@using System.Globalization
@using Zermos_Web.Utilities
@model Zermos_Web.Models.somtodayHomeworkModel.SomtodayHomeworkModel

@{
    var groupedHomework = Model.items.GroupBy(item => item.datumTijd.Date);
    bool nextHomeworkFound = false;
    int dayId = 0; 
}

<link rel="stylesheet" href="~/css/somtoday.css" />

<div class="homework-container">
    @foreach (var dayGroup in groupedHomework)
    {
        if (dayGroup.Key > SchooljaarUtils.currentSchooljaar.totDatumDate) continue;
        
        //if date is after today and nextHomeworkFound is false
        string id = "";
        if (dayGroup.First().datumTijd.Date > DateTime.Now.Date.AddDays(DateTime.Now.Hour < 17 ? -1 : 0) && !nextHomeworkFound)
        {
            id = "next-homework";
            nextHomeworkFound = true;
        }
        
        <div class="homework-day-parent" id="@(id == "" ? dayId : id)">

            <h1>@(dayGroup.First()?.datumTijd.ToString("dddd dd MMMM", new CultureInfo("nl-NL")) ?? "Geen datum!?")</h1>

            @foreach (var homeworkItem in dayGroup)
            {
                if (homeworkItem.datumTijd.Date > SchooljaarUtils.currentSchooljaar.totDatumDate) continue;
                
                <div class="homeworkItem @homeworkItem.studiewijzerItem.huiswerkType?.ToLower() @(homeworkItem.studiewijzerItem.bijlagen?.Count > 0 ? "bijlagen" : "") @(homeworkItem.huiswerkType)" time="@homeworkItem.datumTijd.ToUnixTime()" vak="@(homeworkItem.lesgroep?.vak.naam ?? "Onbekend")" bijlagen="@homeworkItem.studiewijzerItem.bijlagen?.Count" huiswerkType="@homeworkItem.studiewijzerItem.huiswerkType?.ToLower()">
                    <div class="homeworkItem-top">
                        <p style="width: fit-content;">
                            <b>@(homeworkItem.lesgroep?.vak.naam ?? "onbekend")</b> @(string.IsNullOrEmpty(homeworkItem.studiewijzerItem.onderwerp) ? "" : " - " + homeworkItem.studiewijzerItem.onderwerp)
                        </p>

                        @if (!string.IsNullOrEmpty(homeworkItem.studiewijzerItem.omschrijving))
                        {
                            @* <div class="homework-divider"></div> *@
                            <div class="homework-content">@Html.Raw(homeworkItem.studiewijzerItem.omschrijving)</div>
                        }

                        @if (homeworkItem.studiewijzerItem.bijlagen != null && !homeworkItem.studiewijzerItem.bijlagen.Count.Equals(0))
                        {
                            @* <div class="homework-divider"></div> *@
                            <div class="homework-bijlagen">
                                @foreach (var bijlage in homeworkItem.studiewijzerItem.bijlagen)
                                {
                                    @if (bijlage.assemblyResults[0].fileUrl.EndsWith(".pdf"))
                                    {
                                        <a href="@(bijlage.assemblyResults[0].fileUrl + "#toolbar=0&navpanes=0&scrollbar=0&statusbar=0&messages=0&scrollbar=0")" target="_blank" class="homework-bijlage">
                                            <span class="fa-solid fa-paperclip" style=" vertical-align: middle;"></span>
                                            <p>@bijlage.omschrijving</p>
                                        </a>
                                    }
                                    else
                                    {
                                        <a href="@bijlage.assemblyResults[0].fileUrl" target="_blank" class="homework-bijlage">
                                            <span class="fa-solid fa-paperclip" style=" vertical-align: middle;"></span>
                                            <p>@bijlage.omschrijving</p>
                                        </a>
                                    }
                                    
                                }
                            </div>
                        }

                    </div>
                    
                    @if (homeworkItem.studiewijzerItem.huiswerkType?.ToLower() == "eigen")
                    {
                        <div class="delete-icon" id="custom-homework-@homeworkItem.UUID" onclick="WantToDeleteHomework('@homeworkItem.UUID')">
                            <i class="fa-solid fa-trash"></i>
                        </div>
                        <div class="delete-icon" id="custom-homework-sure-@homeworkItem.UUID" onclick="WantToDeleteHomeworkSure('@homeworkItem.UUID')" style="display: none; color: var(--deny-color);">
                            <i class="fa-solid fa-trash"></i>
                        </div>
                    }
                </div>
            }
        </div>
        
        dayId++;
    }
</div>

@if (Model.items.Count == 0)
{
    <h1 style="position: relative; top: 50%; width: 100%; transform: translate(0, -50%); text-align: center; color: var(--text-color);">Geen huiswerk, nice!</h1>
}


<script>
    //make an array of all the homework items, title, content, bijlagen, date, 
    var allSubjects = ["@Html.Raw(string.Join("\",\"", Model.items.Select(x => x.lesgroep?.vak.naam ?? "Onbekend").OrderBy(x => x).Distinct()))"];
    var allContent = ['huiswerk', 'toets', 'grote toets'];
    
    addButtonToPage('fa-plus', AddHomework)
        
    function AddHomework() {
        new ZermosModal()
        .setTitle("Huiswerk toevoegen")
        .addDateInput("Wanneer moet het huiswerk af zijn?")
        .addInput("Welke titel krijgt het huiswerk?")
        .addMultilineInput("Wat is de beschrijving van het huiswerk?")
        .setSubmitButtonLabel("Huiswerk toevoegen")
        .onSubmit((date, titel, desc) => {
            date = date + "T00:00:00";
            
            fetch('/Somtoday/Huiswerk/Nieuw', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ "deadline": date, "titel": titel, "omschrijving": desc })
            }).then(response => {
                if (response.status === 200) {
                    ReplacePage('/Somtoday/Huiswerk');
                }
            }).catch(error => {
                console.error(error);
            });
        })
        .open();
    }

    function WantToDeleteHomeworkSure(s) {
    
        fetch('/somtoday/huiswerk/nieuw?id=' + s, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        }).then(response => {
            if (response.ok) {
                
                if (document.getElementById("custom-homework-" + s).parentElement.parentElement.childElementCount === 2) {
                    document.getElementById("custom-homework-" + s).parentElement.parentElement.remove();
                }
                else
                {
                    document.getElementById("custom-homework-" + s).parentElement.remove();
                }
            }
        });
    }
    
    function WantToDeleteHomework(s) {
        document.getElementById("custom-homework-" + s).style.display = "none";
        document.getElementById("custom-homework-sure-" + s).style.display = "block";
        try
        {
            new Promise(res => setTimeout(res, 3000)).then(() => {
                document.getElementById("custom-homework-" + s).style.display = "block";
                document.getElementById("custom-homework-sure-" + s).style.display = "none";
            });  
        }
        catch{}
    }
    
    Zermos.mainBeforeLoad = () => {  
        //if the url has the parameter "les" then scroll to that homework item's parent
        var params = '@Html.Raw(Json.Serialize(Context.Request.Query))';
        var les = params.match(/\"les",\"value":\[\"([0-9]*)\"\]/)?.[1];
        if (les !== undefined) {
            const homeworkItem = document.querySelector('[time="' + les + '"]');
            if (homeworkItem !== null) {
                //scroll to the homework item's parent
                doScrolling('[id="' + homeworkItem.parentElement.id + '"]', 500);
                //after 500ms add .blink to the homework item
                setTimeout(function () {
                    homeworkItem.classList.add("blink");
                }, 750);
            }
            else
            {
                addNotification("Huiswerk niet gevonden", "Er is geen huiswerk gevonden bij deze les, balen zeg ;)", "info");
            }
        }
        else
        {
            //scroll to the next homework item
            doScrolling('[id="next-homework"]', 500);
            setTimeout(function () {
                document.getElementById("next-homework").classList.add("blink");
            }, 750);
        }
    }
    
    //========================================HOMEWORK SORTING========================================
    addButtonToPage('fa-search', loadHomeworkSorting)
    
    function loadHomeworkSorting() {            
            var trueFalseArrayForSubjects = [];
            for (var i = 0; i < allSubjects.length; i++) {
                if (vakkenCurrentlyShown.includes(allSubjects[i]))
                    trueFalseArrayForSubjects.push(true);
                else
                    trueFalseArrayForSubjects.push(false);
            }
    
            var trueFalseArrayForTypes = [];
            for (var i = 0; i < allContent.length; i++) {
                if (typesCurrentlyShown.includes(allContent[i]))
                    trueFalseArrayForTypes.push(true);
                else
                    trueFalseArrayForTypes.push(false);
            }
    
    
            new ZermosModal()
            .setTitle("Huiswerk verbergen")
            .addText("Klik op een vak om het huiswerk van dat vak te verbergen of te tonen of te verbergen.")
            .addMultiToggles(allSubjects, trueFalseArrayForSubjects)
            .addText("Klik op een type huiswerk om het huiswerk van dat type te verbergen of te tonen.")
            .addMultiToggles(allContent, trueFalseArrayForTypes)
            .addText("Klik op 'Alles' om alle huiswerk te tonen.")
            .addButton("alles aan", () => {
                ToggleHomework("*", "*", true);
                document.querySelectorAll('.input-container input').forEach(input => {
                    input.checked = true;
                });
            })
            .setSubmitButtonLabel("terug naar huiswerk")
            .onSubmit((vakkenToggled, huiswerkToggled) => {
                var whatShouldBeToggledSubject = [];
                var whatShouldBeToggledType = [];
                
                for (var i = 0; i < vakkenToggled.length; i++) {
                    whatShouldBeToggledSubject.push( [ allSubjects[i], vakkenToggled[i] ] );
                }
                
                for (var i = 0; i < huiswerkToggled.length; i++) {
                    whatShouldBeToggledType.push( [ allContent[i], huiswerkToggled[i] ] );
                }
                
                ToggleHomework(whatShouldBeToggledType, whatShouldBeToggledSubject);
            })                  
            .open();
        }
    
    var vakkenCurrentlyShown = [...allSubjects];
    var typesCurrentlyShown = [...allContent];

    function ToggleHomework(typeToToggle, vakToToggle) {
        
        if (typeToToggle === "*" && vakToToggle === "*")
        {
            vakkenCurrentlyShown = [...allSubjects];
            typesCurrentlyShown = [...allContent];
        }        
        
        //get all the homework items
        var homeworkItems = document.getElementsByClassName("homeworkItem");
        
        //loop through all the homework items
        for (var i = 0; i < homeworkItems.length; i++) {
            //get the homework item
            var homeworkItem = homeworkItems[i];
            
            // Initialize variables to track visibility
            var isVisible = true;
            
            // get the vak and type of the homework item
            var vak = homeworkItem.getAttribute("vak");
            var type = homeworkItem.getAttribute("huiswerktype");
            
            
            // Iterate over typeToToggle and vakToToggle arrays
            for (var j = 0; j < typeToToggle.length; j++) {
                if (type === typeToToggle[j][0]) {
                    isVisible = typeToToggle[j][1];
                    typesCurrentlyShown[j] = isVisible ? typeToToggle[j][0] : "";
                    break;
                }
            }
            
            for (var j = 0; j < vakToToggle.length; j++) {
                if (vak === vakToToggle[j][0] && isVisible) {
                    isVisible = vakToToggle[j][1];
                    vakkenCurrentlyShown[j] = isVisible ? vakToToggle[j][0] : "";
                    break;
                }
            }
            
            // Set the visibility of homeworkItem based on the isVisible variable
            homeworkItem.style.display = isVisible ? "flex" : "none";
        }
        
        //loop through all the homework days, and if there are no homework items in the day that are visible, hide the day
        var homeworkDays = document.getElementsByClassName("homework-day-parent");
        for (var i = 0; i < homeworkDays.length; i++) {
            var homeworkDay = homeworkDays[i];
            var homeworkItems = homeworkDay.getElementsByClassName("homeworkItem");
            
            var visibleHomeworkItems = 0;
            for (var j = 0; j < homeworkItems.length; j++) {
                if (homeworkItems[j].style.display === "flex") {
                    visibleHomeworkItems++;
                    break;
                }
            }
            
            if (visibleHomeworkItems === 0)
                homeworkDay.style.display = "none";
            else
                homeworkDay.style.display = "grid";
        }
    }
</script>
