@using System.Globalization
@using Zermos_Web.Utilities
@model Zermos_Web.Models.somtodayHomeworkModel.SomtodayHomeworkModel

@{
    var groupedHomework = Model.items.GroupBy(item => item.datumTijd.Date);
    bool nextHomeworkFound = false;
    int dayId = 0; 
}

<link rel="stylesheet" href="/css/somtoday.css" preload/>

<div class="homework-container">
    @foreach (var dayGroup in groupedHomework)
    {
        if (dayGroup.Key > SchooljaarUtils.currentSchooljaar.totDatumDate) continue;
        
        //if date is after today and nextHomeworkFound is false
        string id = "";
        if (dayGroup.First().datumTijd.Date > DateTime.Now.Date.AddDays(DateTime.Now.Hour < 17 ? -1 : 0) && !nextHomeworkFound)
        {
            id = "next-homework";
            nextHomeworkFound = true;
        }
        
        <div class="homework-day-parent" id="@(id == "" ? dayId : id)">

            <h1>@(dayGroup.First()?.datumTijd.ToString("dddd dd MMMM", new CultureInfo("nl-NL")) ?? "Geen datum!?")</h1>

            @foreach (var homeworkItem in dayGroup)
            {
                if (homeworkItem.datumTijd.Date > SchooljaarUtils.currentSchooljaar.totDatumDate) continue;
                
                <div class="homeworkItem @homeworkItem.studiewijzerItem.huiswerkType?.ToLower() @(homeworkItem.studiewijzerItem.bijlagen?.Count > 0 ? "bijlagen" : "") @(homeworkItem.huiswerkType)" time="@homeworkItem.datumTijd.ToUnixTime()" vak="@(homeworkItem.lesgroep?.vak.naam ?? "Onbekend")" bijlagen="@homeworkItem.studiewijzerItem.bijlagen?.Count" huiswerkType="@homeworkItem.studiewijzerItem.huiswerkType?.ToLower()" id="@homeworkItem.huiswerkId">
                    <div class="homeworkItem-top">
                        <p style="width: fit-content;">
                            <b>@(homeworkItem.lesgroep?.vak.naam ?? "onbekend")</b> @(string.IsNullOrEmpty(homeworkItem.studiewijzerItem.onderwerp) ? "" : " - " + homeworkItem.studiewijzerItem.onderwerp)
                        </p>

                        @if (!string.IsNullOrEmpty(homeworkItem.studiewijzerItem.omschrijving))
                        {
                            @* <div class="homework-divider"></div> *@
                            <div class="homework-content">@Html.Raw(homeworkItem.studiewijzerItem.omschrijving)</div>
                        }

                        @if (homeworkItem.studiewijzerItem.bijlagen != null && !homeworkItem.studiewijzerItem.bijlagen.Count.Equals(0))
                        {
                            @* <div class="homework-divider"></div> *@
                            <div class="homework-bijlagen">
                                @foreach (var bijlage in homeworkItem.studiewijzerItem.bijlagen)
                                {
                                    @if (bijlage.assemblyResults[0].fileUrl.EndsWith(".pdf"))
                                    {
                                        <a href="@(bijlage.assemblyResults[0].fileUrl + "#toolbar=0&navpanes=0&scrollbar=0&statusbar=0&messages=0&scrollbar=0")" target="_blank" class="homework-bijlage">
                                            <span class="fa-solid fa-paperclip" style=" vertical-align: middle;"></span>
                                            <p>@bijlage.omschrijving</p>
                                        </a>
                                    }
                                    else
                                    {
                                        <a href="@bijlage.assemblyResults[0].fileUrl" target="_blank" class="homework-bijlage">
                                            <span class="fa-solid fa-paperclip" style=" vertical-align: middle;"></span>
                                            <p>@bijlage.omschrijving</p>
                                        </a>
                                    }
                                    
                                }
                            </div>
                        }

                    </div>
                    
                    @if (homeworkItem.studiewijzerItem.huiswerkType?.ToLower() == "eigen")
                    {
                        <div class="delete-icon" id="custom-homework-@homeworkItem.UUID" onclick="WantToDeleteHomework('@homeworkItem.UUID')">
                            <i class="fa-solid fa-trash"></i>
                        </div>
                        <div class="delete-icon" id="custom-homework-sure-@homeworkItem.UUID" onclick="WantToDeleteHomeworkSure('@homeworkItem.UUID')" style="display: none; color: var(--deny-color);">
                            <i class="fa-solid fa-trash"></i>
                        </div>
                    }
                </div>
            }
        </div>
        
        dayId++;
    }
</div>

@if (Model.items.Count == 0)
{
    <h1 style="position: relative; top: 50%; width: 100%; transform: translate(0, -50%); text-align: center; color: var(--text-color);">Geen huiswerk, nice!</h1>
}


<script minimize>
@Context.Items["dmjs"]
    
    addButtonToPage('fa-plus', AddHomework)
        
    function AddHomework() {
        new ZermosModal()
        .addHeading({text: "Huiswerk toevoegen"})
        .addHeading({text: "Wanneer moet het huiswerk af zijn?"})
        .addDatePicker({required: true, initialDate: (new Date( Date.now() + (6.048e+8)))})
        .addLabel({text: "Welke titel krijg het huiswerk?"})
        .addTextInput({required: true, maxLength: 255})
        .addLabel({text: "Welke beschrijving krijg het huiswerk?"})
        .addTextArea()
        .addButton("Huiswerk toevoegen", (ctx) => {
            var values = ctx.getComponentsValue();
            
            console.log(values);
            
            if (values.correct === false) {
                return;
            }
            
            var date = values.values[0].value;
        
            //turn date into string: yyyy-MM-dd HH:mm:ss
            date = date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate() + " 23:59:59";

            const data = new URLSearchParams(new FormData());
            data.append('deadline', date);
            data.append('titel', values.values[1].value);
            data.append('omschrijving', values.values[2].value);
            
            fetch('/Somtoday/Huiswerk/Nieuw', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: data
            }).then(response => {
                if (response.status === 200) {
                    ReplacePage('/Somtoday/Huiswerk', true);
                }
            }).catch(error => {
                console.error(error);
            });
        })
        .open();
    }

    function WantToDeleteHomeworkSure(s) {
    
        fetch('/somtoday/huiswerk/nieuw?id=' + s, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        }).then(response => {
            if (response.ok) {
                
                if (document.getElementById("custom-homework-" + s).parentElement.parentElement.childElementCount === 2) {
                    document.getElementById("custom-homework-" + s).parentElement.parentElement.remove();
                }
                else
                {
                    document.getElementById("custom-homework-" + s).parentElement.remove();
                }
            }
        });
    }
    
    function WantToDeleteHomework(s) {
        document.getElementById("custom-homework-" + s).style.display = "none";
        document.getElementById("custom-homework-sure-" + s).style.display = "block";
        try
        {
            new Promise(res => setTimeout(res, 3000)).then(() => {
                document.getElementById("custom-homework-" + s).style.display = "block";
                document.getElementById("custom-homework-sure-" + s).style.display = "none";
            });  
        }
        catch{}
    }
    
    //========================================SCROLLING========================================
    Zermos.mainBeforeLoad = () => {  
        //if the url has the parameter "les" then scroll to that homework item's parent
        var params = '@Html.Raw(Json.Serialize(Context.Request.Query))';
        var les = params.match(/\"les",\"value":\[\"([0-9]*)\"\]/)?.[1];
        if (les !== undefined) {
            const homeworkItem = document.querySelector('[time="' + les + '"]');
            if (homeworkItem !== null) {
                //scroll to the homework item's parent
                doScrolling('[id="' + homeworkItem.parentElement.id + '"]', 500);
                //after 500ms add .blink to the homework item
                setTimeout(function () {
                    homeworkItem.classList.add("blink");
                }, 750);
            }
        }
        else
        {
            //scroll to the next homework item
            doScrolling('[id="next-homework"]', 500);
            setTimeout(function () {
                document.getElementById("next-homework").classList.add("blink");
            }, 750);
        }
    }
    
    //========================================HOMEWORK SORTING========================================
    //get every homework item and put them in an array {id, subjecy, type}
    var allHomeworkItems = Array.from(document.querySelectorAll(".homeworkItem")).map((item) => {
        return {
            id: item.getAttribute("id"),
            subject: item.getAttribute("vak"),
            type: item.getAttribute("huiswerkType"),
            time: item.getAttribute("time"),
            bijlagen: item.getAttribute("bijlagen"),
        }
    });

    //make an array of all the homework items, title, content, bijlagen, date, 
    var allSubjects = Array.from(new Set(allHomeworkItems.map((item) => item.subject)));
    var allSubjectsShown = new Array(allSubjects.length).fill(true);
    
    var allTypes = Array.from(new Set(allHomeworkItems.map((item) => item.type)));
    var allTypesShown = new Array(allTypes.length).fill(true);
    
    addButtonToPage('fa-search', loadHomeworkSorting)
    
    function loadHomeworkSorting() {            
        new ZermosModal()
        .addHeading({text: "Huiswerk verbergen"})
        .addHeading({text: "Klik op een vak om het huiswerk van dat vak te verbergen of te tonen of te verbergen."})
        .addMultiCheckbox({labels: allSubjects, initialStates: allSubjectsShown, onChange: (_, values) => toggleSubjects(values)})
        .addHeading({text: "Klik op een type huiswerk om het huiswerk van dat type te verbergen of te tonen."})
        .addMultiCheckbox({labels: allTypes, initialStates: allTypesShown, onChange: (_, values) => toggleTypes(values)})
        .open();        
    }


    function toggleSubjects(values) {
        allSubjectsShown = values;
        updateHomeworkVisibility();
    }
    
    function toggleTypes(values) {
        allTypesShown = values;
        updateHomeworkVisibility();
    }
    
    function updateHomeworkVisibility() {
        for (var i = 0; i < allHomeworkItems.length; i++) {
            var homeworkItem = document.getElementById(allHomeworkItems[i].id);
            var vak = homeworkItem.getAttribute("vak");
            var huiswerkType = homeworkItem.getAttribute("huiswerkType");
            if (allSubjectsShown[allSubjects.indexOf(vak)] && allTypesShown[allTypes.indexOf(huiswerkType)]) {
                homeworkItem.style.display = "block";
            }
            else {
                homeworkItem.style.display = "none";
            }
        }
    }
</script>
