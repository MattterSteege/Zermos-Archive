@using Zermos_Web.TagHelpers
@using Zermos_Web.Utilities
@model Zermos_Web.Models.Somtoday.SomtodayStatistiekenModel

@{
    ViewData["Title"] = "Home Page";
    var letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
}

<link rel="stylesheet" href="~/css/somtoday.css"/>

<div class="stats-container">
    <div class="stack2">
        <div class="stats">
            <h1>Vak: @Model.item.vakNaam</h1>
            @if (Model.containsVoortgang)
            {
                <p class="gemiddelde">Gemiddelde: @((Model.som / Model.weging).ToString("0.00").Replace(",", "."))</p>
            }
            @if (Model.containsSE)
            {
            <p class="gemiddelde">Gemiddelde (SE): @((Model.somSE / Model.wegingSE).ToString("0.00").Replace(",", "."))</p>
            }
            <p class="hoogste-cijfer">Hoogste cijfer: @Model.highest.ToString("0.0").Replace(",", ".")</p>
            <p class="laagste-cijfer">Laagste cijfer: @Model.lowest.ToString("0.0").Replace(",", ".")</p>
        </div>

        <div class="stats">
            <div class="horizontal-split" style="padding-right: var(--padding);">
                <div>
                    <h1>percentage voldoende</h1>
                    <p class="gemiddelde">Percentage voldoendes: @(((double) Model.voldoendes / (Model.item.cijfers.Count + Model.item.cijfersSE.Count) * 100).ToString("0.00").Replace(",", "."))%</p>
                    <p class="gemiddelde">aantal cijfers: @Model.item.cijfers.Count</p>
                    <p class="gemiddelde">voldoendes: @Model.voldoendes</p>
                    <p class="gemiddelde">onvoldoendes: @Model.onvoldoendes</p>
                </div>
                <div class="canvas">
                    <div class="chart" id="@letters[0]">
                        <div class="arc"></div>
                        <div class="arc back"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="stack2">

        <div class="stats">
            <h1>Meest voorkomende cijfer</h1>
            <div class="canvas">
                <div class="chart" id="@letters[1]">
                    @{
                    //Model.mostCommonGrade is an list of 10 elements, where the higher a certain index, the more common the grade is (index + 1 is the grade)
                    int highest = Model.mostCommonGrade.Max();
                    }

                    @for (var index = 0; index < Model.mostCommonGrade.Count; index++)
                    {
                    var AfgerondCijfer = Model.mostCommonGrade[index];
                    if (AfgerondCijfer == 0)
                    {
                    continue;
                    }

                    <div class="grade" style="height: @(((float) AfgerondCijfer / highest * 100).ToString("0.00").Replace(",", "."))%;">@(index + 1)</div>
                    }
                </div>
            </div>
        </div>

        <div class="stats">
            <h1>Cijfers over tijd</h1>
            @{
                List<double> grades = Model.item.cijfers.Where(c => c.isVoortgang).Select(c => c.cijfer).Reverse().ToList(); //List<double>
            }
            <div class="canvas">
                <div class="chart" id="@letters[2]">
                    <div class="horizontal-line">
                        @foreach (var grade in grades)
                        {
                            <div class="grade">@grade.ToString("0.0").Replace(",", ".")</div>
                        }
                    </div>
                    <div class="vertical-line">
                        @for (var i = 0; i < 11; i++)
                        {
                            <div class="grade">@i</div>
                        }
                    </div>
                    <div class="read-line">
                        <div class="read-line-child" style="height: 1px; width: 100%;"></div>
                        <div class="read-line-child" style="height: 1px; width: 100%;"></div>
                        <div class="read-line-child" style="height: 1px; width: 100%;"></div>
                        <div class="read-line-child" style="height: 1px; width: 100%;"></div>
                        <div class="read-line-child" style="height: 1px; width: 100%;"></div>
                        <div class="read-line-child" style="height: 1px; width: 100%;"></div>
                        <div class="read-line-child" style="height: 1px; width: 100%;"></div>
                        <div class="read-line-child" style="height: 1px; width: 100%;"></div>
                        <div class="read-line-child" style="height: 1px; width: 100%;"></div>
                        <div class="read-line-child" style="height: 1px; width: 100%;"></div>
                        <div class="read-line-child" style="height: 1px; width: 100%;"></div>
                    </div>
                    <div class="read-line" style="justify-content: space-around; flex-direction: row;">
                        @for (var i = 0; i < grades.Count; i++)
                        {
                            <div class="read-line-child" style="height: 100%; width: 1px;"></div>
                        }
                    </div>
                    <div class="line">
                        @{
                            //the height of the line chart -> 100%, so the height of a bullet is grade * 10%
                        }
                        @for (var i = 0; i < grades.Count; i++)
                        {
                            var grade = grades[i];
                            var height = grade * 10;
                            <div class="point" style="bottom: @((height).ToString("0.000").Replace(",", "."))%"></div>
                        }
                    </div>

                </div>
            </div>
        </div>

    </div>

    <div class="stack2">

        @* a html css (JS) only line chart*@
        <div class="stats">
            <h1>Gemiddelde over tijd</h1>
            <div class="canvas">
                <div class="chart" id="@letters[2]">
                    <div class="horizontal-line">
                        @{
                            List<int> wegingen = Model.item.cijfers.Where(c => c.isVoortgang).Select(c => c.weging).Reverse().ToList(); //List<int>
                            double average = 0;
                            int weging = 0;
                            List<double> snapshots = new List<double>();
                        }

                        @for (var i = 0; i < grades.Count; i++)
                        {
                            average += grades[i] * wegingen[i];
                            weging += wegingen[i];
                            snapshots.Add(average / weging);

                            <div class="grade">@((average / weging).ToString("0.0").Replace(",", "."))</div>
                        }
                    </div>
                    <div class="vertical-line">
                        <div class="grade">0</div>
                        <div class="grade">1</div>
                        <div class="grade">2</div>
                        <div class="grade">3</div>
                        <div class="grade">4</div>
                        <div class="grade">5</div>
                        <div class="grade">6</div>
                        <div class="grade">7</div>
                        <div class="grade">8</div>
                        <div class="grade">9</div>
                        <div class="grade">10</div>
                    </div>
                    <div class="read-line">
                        <div class="read-line-child" style="height: 1px; width: 100%;"></div>
                        <div class="read-line-child" style="height: 1px; width: 100%;"></div>
                        <div class="read-line-child" style="height: 1px; width: 100%;"></div>
                        <div class="read-line-child" style="height: 1px; width: 100%;"></div>
                        <div class="read-line-child" style="height: 1px; width: 100%;"></div>
                        <div class="read-line-child" style="height: 1px; width: 100%;"></div>
                        <div class="read-line-child" style="height: 1px; width: 100%;"></div>
                        <div class="read-line-child" style="height: 1px; width: 100%;"></div>
                        <div class="read-line-child" style="height: 1px; width: 100%;"></div>
                        <div class="read-line-child" style="height: 1px; width: 100%;"></div>
                        <div class="read-line-child" style="height: 1px; width: 100%;"></div>
                    </div>
                    <div class="read-line" style="justify-content: space-around; flex-direction: row;">
                        @for (var i = 0; i < grades.Count; i++)
                        {
                            <div class="read-line-child" style="height: 100%; width: 1px;"></div>
                        }
                    </div>
                    <div class="line">
                        @{
                            //the height of the line chart -> 100%, so the height of a bullet is grade * 10%
                        }
                        @for (var i = 0; i < grades.Count; i++)
                        {
                            var grade = snapshots[i];
                            <div class="point" style="bottom: @((grade * 10).ToString("0.000").Replace(",", "."))%"></div>
                        }
                    </div>

                </div>
            </div>
        </div>
        
    </div>

    <div class="stack2">

        <div class="stats">
            <h1>Wat moet ik halen?</h1>
            <input type="number" id="grade_wmih" placeholder="Welk cijfer wil je staan?" min="0" value="5.5" step="0.1">
            <input type="number" id="weight_wmih" placeholder="Hoe vaak telt de toets mee?" min="0" step="1">
            <h1 style="display: block;text-align: center;font-size: var(--font-size-heading);margin: var(--padding) 0;" id="result_wmih"></h1>
        </div>

        <div class="stats">
            <h1>Wat ga ik staan?</h1>
            <input type="number" id="grade_wgis" placeholder="Welk cijfer ga je halen?" min="0" value="5.5" step="0.1">
            <input type="number" id="weight_wgis" placeholder="Hoe vaak telt de toets mee?" min="0" step="1">
            <h1 style="display: block;text-align: center;font-size: var(--font-size-heading);margin: var(--padding) 0;" id="result_wgis"></h1>
        </div>
    </div>
</div>

<script minimize>
@Context.Items["dmjs"]
//Zermos.mainAfterLoad = () => load();

//@*Html.Raw($"function load() {{{string.Join("", ((List<ChartJSCore.Models.Chart>) Model.charts).Select((m, i) => m.CreateChartCode(letters[i].ToString())))}}}");*@

//WAT MOET IK HALEN
var grade_wmih = document.getElementById("grade_wmih");
var weight_wmih = document.getElementById("weight_wmih");
var result_wmih = document.getElementById("result_wmih");

//when grade value changes
grade_wmih.addEventListener("change", function() {
    wmih();
});

//when weight value changes
weight_wmih.addEventListener("change", function() {
    wmih();
});

//calculation function
function wmih() {

    if (parseInt(weight_wmih.value) === 0) {
        result_wmih.style.display = "none";
        return;
    }

    const totaleWeging = @Model.weging + parseInt(weight_wmih.value);
    const alBehaaldePunten = @Model.som.ToString("0.00").Replace(",", ".");
    const nogTeBehalen = parseFloat(grade_wmih.value) * totaleWeging - alBehaaldePunten;
    const nogTeBehalenPunten = nogTeBehalen / parseInt(weight_wmih.value);

    if (isNaN(nogTeBehalenPunten)) {
        return;
    }


    result_wmih.innerHTML = "Je moet een " + (nogTeBehalen / parseInt(weight_wmih.value)).toFixed(2) + " halen om een " + grade_wmih.value + " te staan.";

    result_wmih.style.display = "block";
}




//WAT GA IK STAAN
var grade_wgis = document.getElementById("grade_wgis");
var weight_wgis = document.getElementById("weight_wgis");
var result_wgis = document.getElementById("result_wgis");

//when grade value changes
grade_wgis.addEventListener("change", function() {
    wgis();
});

//when weight value changes
weight_wgis.addEventListener("change", function() {
    wgis();
});

//calculation function
function wgis() {

    if (parseInt(weight_wgis.value) === 0) {
        result_wgis.style.display = "none";
        return;
    }

    const totaleWeging = @Model.weging + parseInt(weight_wgis.value);
    const alBehaaldePunten = @Model.som.ToString("0.00").Replace(",", ".") + parseFloat(grade_wgis.value) * parseInt(weight_wgis.value);
    const nogTeBehalenPunten = alBehaaldePunten / totaleWeging;

    if (isNaN(nogTeBehalenPunten)) {
        return;
    }

    result_wgis.innerHTML = "Je komt een " + (alBehaaldePunten / totaleWeging).toFixed(2) + " te staan.";

    result_wgis.style.display = "block";
}




//Prevent the input of invalid characters
var inputElements = document.querySelectorAll('input[type="text"]');

inputElements.forEach(function(inputElement) {
    inputElement.addEventListener('keypress', function(event) {
        const allowedCharacters = /[0-9.,]/; // Define the allowed characters using a regular expression

        const inputCharacter = String.fromCharCode(event.charCode);

        if (!allowedCharacters.test(inputCharacter)) {
            event.preventDefault(); // Prevent the input of invalid characters
        }
    });
});


setBarGraph(@Model.voldoendes, @Model.onvoldoendes);


function setBarGraph(optionA, optionB) {
    var total = optionA + optionB;
    var percentA = (optionA / total) * 100;

    //get .arc element
    var arc = document.querySelector('#@letters[0] .arc');
    var currentA = arc.style.getPropertyValue('--a').replace('deg', '');

    ease(currentA, percentA * 3.6, 1000, function(value) {
        arc.style.setProperty('--a', value + 'deg');
    });
}

function ease(start, end, time, callback) {
    start = Number(start);
    end = Number(end);
    const startTime = Date.now();
    const duration = time;

    function update() {
        const currentTime = Date.now();
        const elapsed = currentTime - startTime;

        if (elapsed >= duration) {
            clearInterval(interval);
            callback(end);
        } else {
            const progress = elapsed / duration;
            const easedValue = start + (end - start) * (progress * (2 - progress));
            callback(easedValue);
        }
    }

    const interval = setInterval(update, 10); // Update approximately every 16 milliseconds
}
</script>