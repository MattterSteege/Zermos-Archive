@using System.Globalization
@model System.Collections.Generic.List<Zermos_Web.Models.Datum>

@{
    var groupedByMonth = Model.GroupBy(item => item.startsAt.ToDateTime().Year).SelectMany(group => group.GroupBy(item => item.startsAt.ToDateTime().Month));
    var culture = new CultureInfo("nl-NL");
}

<link rel="stylesheet" href="~/css/infowijs.css" />

<div class="calander-group">
    <div class="calendar-container">
        @foreach (var dayGroup in groupedByMonth)
        {
            <div class="calendar-month-parent" id="@(dayGroup.First()?.startsAt.ToDateTime().ToString("M-yy") ?? "Geen datum!?")">

                <h1>@(dayGroup.First()?.startsAt.ToDateTime().ToString("MMMM yyyy", new CultureInfo("nl-NL")) ?? "Geen datum!?")</h1>

                @foreach (var homeworkItem in dayGroup)
                {
                    //utc, convert to dutch time with daylight saving
                    var startsAt = homeworkItem.startsAt.ConvertUnixTimestampToDutchTime();
                    var endsAt = homeworkItem.endsAt.ConvertUnixTimestampToDutchTime();
                    
                    <div class="calendar-item" style="@(endsAt < DateTime.Now ? "opacity: 0.5;" : "opacity: 1;")">
                        @homeworkItem.title <br/>

                        @if (startsAt.Date == endsAt.Date && homeworkItem.isAllDay == false)
                        {
                            @(startsAt.ToString("dddd d MMMM HH:mm", culture) + " - " + endsAt.ToString("HH:mm", culture))
                        }
                        else if (startsAt.Date != endsAt.Date && homeworkItem.isAllDay == false)
                        {
                            @(startsAt.ToString("dddd d MMMM", culture) + " t/m " + endsAt.AddDays(-1).ToString("dddd d MMMM", culture))
                        }
                        else if (homeworkItem.isAllDay)
                        {
                            @startsAt.ToString("dddd d MMMM", culture)
                        }
                        <br/>
                        
                    </div>
                }
            </div>
        }
    </div>
    <div class="dates-container">
        @foreach (var dayGroup in groupedByMonth)
        {
            var startsAt = dayGroup.First().startsAt.ToDateTime();
            <div class="month" onclick="doScrolling(`[id='@startsAt.ToString("M-yy")']`, 1000)" href="?@startsAt.ToString("M-yy")">
                @startsAt.ToString("MMMM", culture)
            </div>
        }
    </div>
</div>


<script>
    // Function to extract the target element ID from the URL
    function getTargetElementId() {
        var d = new Date();
        return d.getMonth() + 1 + "-" + d.getFullYear().toString().slice(-2);
    }

    // Check if the URL contains a target element ID and scroll to it
    Zermos.mainBeforeLoad = () => {
        const targetElementId = getTargetElementId();
        if (targetElementId) {
            const targetElement = document.getElementById(targetElementId);
            if (targetElement) {
                doScrolling(`[id='` + targetElementId + `']`, 1000);
            }
        }

        var indexItems = document.querySelectorAll('.dates-container div');
        var items = document.querySelectorAll('.calendar-month-parent');

        //add the 'active' class to the item who's top is the closest to the top of the mainElement
        function setActive() {
          var closest = items[0];
          var closestDistance = Math.abs(items[0].getBoundingClientRect().top - main.getBoundingClientRect().top - 96);
        
          for (var i = 1; i < items.length; i++) {
            var distance = Math.abs(items[i].getBoundingClientRect().top - main.getBoundingClientRect().top - 96);
            if (distance < closestDistance) {
              closest = items[i];
              closestDistance = distance;
            }
          }
        
          for (var i = 0; i < indexItems.length; i++) {
            indexItems[i].classList.remove('active');
          }
        
          for (var i = 0; i < indexItems.length; i++) {
            if (indexItems[i].getAttribute('href') === '?' + closest.getAttribute('id')) {
              indexItems[i].classList.add('active');
              break;
            }
          }
        }

        //add the 'active' class to the item who's top is the closest to the top of the mainElement
        setActive();

        //add the 'active' class to the item who's top is the closest to the top of the mainElement when scrolling
        main.addEventListener('scroll', function() {
            setActive();
        });
    }
</script>
