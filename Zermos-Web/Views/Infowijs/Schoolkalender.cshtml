@using System.Globalization
@model System.Collections.Generic.List<Zermos_Web.Models.Datum>

@{
    var items = Model;
    var groupedByMonth = items
        .GroupBy(item => item.startsAt.ToDateTime().Year)
        .SelectMany(yearGroup => yearGroup
        .GroupBy(item => item.startsAt.ToDateTime().Month));

    var culture = new CultureInfo("nl-NL");
}

<link rel="stylesheet" href="~/css/infowijs.css" />

<div class="calander-group">
    <div class="calendar-container">
        @foreach (var monthGroup in groupedByMonth)
        {
            if (monthGroup.Last().endsAt.ToDateTime() < DateTime.Now)
                continue;
            
            
            var monthYear = monthGroup.First().startsAt.ToDateTime().ToString("M-yy");
            var startsAtMonthYear = monthGroup.First().startsAt.ToDateTime();
            var monthName = startsAtMonthYear.ToString("MMMM yyyy", culture);

            <div class="calendar-month-parent" id="@monthYear">
                <h1>@monthName</h1>

                @foreach (var calenderItem in monthGroup)
                {
                    if (calenderItem.endsAt.ToDateTime() < DateTime.Now)
                        continue;
                    
                    var startsAt = calenderItem.startsAt.ConvertUnixTimestampToDutchTime();
                    var endsAt = calenderItem.endsAt.ConvertUnixTimestampToDutchTime();
                    var itemDate = startsAt.Date;

                    <div class="calendar-item" style="@(endsAt < DateTime.Now ? "opacity: 0.5;" : "opacity: 1;")">
                        @calenderItem.title <br/>

                        @if (itemDate == endsAt.Date && !calenderItem.isAllDay)
                        {
                            @(startsAt.ToString("dddd d MMMM HH:mm", culture) + " - " + endsAt.ToString("HH:mm", culture))
                        }
                        else if (itemDate != endsAt.Date && !calenderItem.isAllDay)
                        {
                            @(startsAt.ToString("dddd d MMMM", culture) + " t/m " + endsAt.AddDays(-1).ToString("dddd d MMMM", culture))
                        }
                        else if (calenderItem.isAllDay)
                        {
                            @startsAt.ToString("dddd d MMMM", culture)
                        }
                        <br/>
                    </div>
                }
            </div>
        }
    </div>

    <div class="dates-container">
        @* @foreach (var monthGroup in groupedByMonth) *@
        @* { *@
        @*     var startsAtMonthYear = monthGroup.First().startsAt.ToDateTime(); *@
        @*     var monthYear = startsAtMonthYear.ToString("M-yy"); *@
        @* *@
        @*     <div class="month" onclick="doScrolling('[id=\'@monthYear\']', 1000)" href="?@monthYear"> *@
        @*         @startsAtMonthYear.ToString("MMMM", culture) *@
        @*     </div> *@
        @* } *@
    </div>
</div>


<script>
    function createDatesContainer() {
        var datesContainer = document.querySelector('.dates-container');
        var items = document.querySelectorAll('.calendar-month-parent');
        
        for (var i = 0; i < items.length; i++) {
            var month = document.createElement('div');
            month.classList.add('month');
            month.setAttribute('href', '?' + items[i].getAttribute('id'));
            month.innerHTML = items[i].querySelector('h1').innerHTML.split(' ')[0];
            datesContainer.appendChild(month);
            
            month.addEventListener('click', function() {
                doScrolling(`[id='` + this.getAttribute('href').replace('?', '') + `']`, 1000);
            });
        }
    }

    // Function to extract the target element ID from the URL
    function getTargetElementId() {
        var d = new Date();
        return d.getMonth() + 1 + "-" + d.getFullYear().toString().slice(-2);
    }

    // Check if the URL contains a target element ID and scroll to it
    Zermos.mainBeforeLoad = () => {
        createDatesContainer();
        
        const targetElementId = getTargetElementId();
        if (targetElementId) {
            const targetElement = document.getElementById(targetElementId);
            if (targetElement) {
                doScrolling(`[id='` + targetElementId + `']`, 1000);
            }
        }

        var indexItems = document.querySelectorAll('.dates-container div');
        var items = document.querySelectorAll('.calendar-month-parent');

        //add the 'active' class to the item who's top is the closest to the top of the mainElement
        function setActive() {
          var closest = items[0];
          var closestDistance = Math.abs(items[0].getBoundingClientRect().top - main.getBoundingClientRect().top - 96);
        
          for (var i = 1; i < items.length; i++) {
            var distance = Math.abs(items[i].getBoundingClientRect().top - main.getBoundingClientRect().top - 96);
            if (distance < closestDistance) {
              closest = items[i];
              closestDistance = distance;
            }
          }
        
          for (var i = 0; i < indexItems.length; i++) {
            indexItems[i].classList.remove('active');
          }
        
          for (var i = 0; i < indexItems.length; i++) {
            if (indexItems[i].getAttribute('href') === '?' + closest.getAttribute('id')) {
              indexItems[i].classList.add('active');
              break;
            }
          }
        }

        //add the 'active' class to the item who's top is the closest to the top of the mainElement
        setActive();

        //add the 'active' class to the item who's top is the closest to the top of the mainElement when scrolling
        main.addEventListener('scroll', function() {
            setActive();
        });
    }
</script>
