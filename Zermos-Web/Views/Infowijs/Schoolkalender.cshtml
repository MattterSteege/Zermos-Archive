@model dynamic

<link rel="stylesheet" href="/css/infowijs.css" preload/>

<div class="calendar-container">
    <div class="calendar-header">
        <button class="prev-month" onclick="changeMonth(-1)">&#10094;</button>
        <h2 id="calendar-title">Data is aan het laden...</h2>
        <button class="next-month" onclick="changeMonth(1)">&#10095;</button>
    </div>

    <div class="calendar-grid">
        <div class="day-header">M</div>
        <div class="day-header">D</div>
        <div class="day-header">W</div>
        <div class="day-header">D</div>
        <div class="day-header">V</div>
        <div class="day-header">Z</div>
        <div class="day-header">Z</div>

        <!-- Calendar Days will be dynamically inserted here -->
        <div id="calendar-days" class="calendar-days"></div>
    </div>

    <div class="event-list">
        <h3>Evenementen van deze maand</h3>
        <div id="event-items">
            <!-- Event items will be dynamically inserted here -->
        </div>
    </div>
</div>


<script minimize>
@Context.Items["dmjs"]

var events = [];
var last_save = 0;

InfowijsCalenderItem = function (title, startsAt, endsAt, isAllDay, timeFormat) {
    this.title = title;
    this.startsAt = startsAt;
    this.endsAt = endsAt;
    this.isAllDay = isAllDay;
    this.timeFormat = timeFormat;
}

Zermos.mainBeforeLoad = async () => {
    const savedData = localStorage.getItem("infowijs-schoolkalender");
    if (savedData) {
        const parsedData = JSON.parse(savedData);
        events = parsedData.events;
        last_save = new Date(parsedData.last_save);
        renderCalendar(last_save.getMonth(), last_save.getFullYear());
    }
    else {
        await fetchCalendarData();  // Make sure fetchCalendarData completes before proceeding
    }
}

async function fetchCalendarData() {
    const response = await fetch('/Infowijs/Schoolkalender?no-framework');
    const data = await response.json();
    const today = new Date();
    events = data.map(event => new InfowijsCalenderItem(event.title, event.startsAt, event.endsAt, event.isAllDay, event.timeFormat));
    last_save = new Date();
    renderCalendar(today.getMonth(), today.getFullYear());

    // Save to localStorage
    localStorage.setItem("infowijs-schoolkalender", JSON.stringify({ events: events, last_save: last_save }));
}

function renderCalendar(month, year) {
    const daysElement = document.getElementById("calendar-days");
    daysElement.innerHTML = "";

    // Adjust firstDay to start from Monday (Mo-Su)
    let firstDay = new Date(year, month, 1).getDay();
    firstDay = (firstDay === 0) ? 6 : firstDay - 1; // Adjust so Monday is 0 and Sunday is 6

    const totalDays = new Date(year, month + 1, 0).getDate(); // Total days in the current month
    const prevMonthTotalDays = new Date(year, month, 0).getDate(); // Total days in the previous month

    // Empty cells for days from the previous month
    for (let i = firstDay - 1; i >= 0; i--) {
        const emptyDiv = document.createElement("div");
        emptyDiv.classList.add("prev-month-day");
        emptyDiv.textContent = prevMonthTotalDays - i;
        daysElement.appendChild(emptyDiv);
    }

    // Populate days with events for the current month
    for (let day = 1; day <= totalDays; day++) {
        const dayDiv = document.createElement("div");
        dayDiv.classList.add("day");
        dayDiv.textContent = day;

        const date = new Date(year, month, day);
        const unixDate = Math.floor(date.getTime() / 1000);

        // Check for events on this day
        const eventOnDay = events.find(event => {
            return event.startsAt <= unixDate && unixDate <= event.endsAt;
        });

        if (eventOnDay) {
            dayDiv.classList.add("has-events");
        }

        daysElement.appendChild(dayDiv);
    }

    // Remaining cells for next month's days
    const totalCells = firstDay + totalDays; // Total cells filled so far
    const nextMonthDays = 7 - (totalCells % 7); // Remaining cells to fill the week

    if (nextMonthDays < 7) {
        for (let day = 1; day <= nextMonthDays; day++) {
            const nextMonthDiv = document.createElement("div");
            nextMonthDiv.classList.add("next-month-day");
            nextMonthDiv.textContent = day;
            daysElement.appendChild(nextMonthDiv);
        }
    }

    document.getElementById("calendar-title").textContent = (new Date(year, month).toLocaleString('default', { month: 'long', year: 'numeric' })).charAt(0).toUpperCase() + (new Date(year, month).toLocaleString('default', { month: 'long', year: 'numeric' })).slice(1);

    renderEvents(month, year);
}

function renderEvents(month, year) {
    const eventsElement = document.getElementById("event-items");
    eventsElement.innerHTML = "";

    events.forEach(event => {
        const eventStart = new Date(event.startsAt * 1000);
        if (eventStart.getMonth() === month && eventStart.getFullYear() === year) {
            const eventDiv = document.createElement("div");
            eventDiv.classList.add("event-item");

            event.isAllDay ?  eventDiv.classList.add('all-day') :  eventDiv.classList.add('event-time')

            eventDiv.innerHTML = `
                <span>${event.title}</span>
                <span>${event.timeFormat}</span>
            `;
            eventsElement.appendChild(eventDiv);
        }
    });
}

var _currentMonth = new Date().getMonth();
var _currentYear = new Date().getFullYear();

function changeMonth(direction) {
    _currentMonth += direction;
    if (_currentMonth < 0) {
        _currentMonth = 11;
        _currentYear--;
    }
    else if (_currentMonth > 11) {
        _currentMonth = 0;
        _currentYear++;
    }
    
    const currentMonth = new Date(_currentYear, _currentMonth);
    const newMonth = currentMonth.getMonth();
    const year = currentMonth.getFullYear();

    renderCalendar(newMonth, year);
}

//calendar-container
//when user swipes left or right, change the panel
var touchstartX = 0;
var touchendX = 0;
addEventListenerToMain('touchstart', function(event) {
    touchstartX = event.changedTouches[0].screenX;
}, false);
addEventListenerToMain('touchend', function(event) {
    touchendX = event.changedTouches[0].screenX;
    handleGesture();
}, false);

function handleGesture() {
    var distance = Math.abs(touchstartX - touchendX);
    if (distance > 100) {
        var nextPanel = (touchstartX - touchendX > 0 ? 1 : -1);
        changeMonth(nextPanel);        
    }
}
</script>
