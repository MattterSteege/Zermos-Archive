@using System.Security.Claims
@using Zermos_Web.Utilities
@model Infrastructure.Entities.user

<link rel="stylesheet" href="/css/account.css">

<div class="account-container">
    <div class="account-item">
        <h1>BELANGRIJK!</h1>
        <p>Deze pagina is bedoeld om dingen te testen en is voor de normale gebruiker niet bedoeld. Als je problemen ondervindt met Zermos en je is verteld om deze pagina te openen. Blijf dan lekker rondhangen :)</p>
    </div>
    
    <h4>refresh</h4>
    
    <div class="account-item" onclick="RefreshCSS()">
        <h1>CSS refreshen</h1>
        <p>Als Zermos er niet helemaal tof uitziet, dan kan je hier de CSS refreshen. Ik kan je ook aanraden om gelijk de JS te refreshen, maar dat hoeft niet.</p>
    </div>
    
    <div class="account-item" onclick="RefreshJS()">
        <h1>JS refreshen</h1>
        <p>Als Zermos niet helemaal lekker werkt, dan kan je hier de JS refreshen. Ik kan je ook aanraden om gelijk de CSS te refreshen, maar dat hoeft niet.</p>
    </div>
    
    <h4>previews</h4>
    
    <div class="account-item" data-preview-id="zermelo_not_current_week" onclick="TogglePreview('zermelo_not_current_week')">
        <h1>Zermelo 'niet deze week' notificatie</h1>
        <p>Zet hier de optie om de notificatie te laten zien als je niet op de huidige week zit aan of uit.</p>
    </div>
    
    <h4>device info</h4>
    
    <div class="account-item">
        <h1>Device info</h1>
        <p>Deze informatie kan handig zijn als je problemen ondervindt met Zermos.</p>
        <p>Device: @Context.Request.Headers["User-Agent"]</p>
        <p>Account ID: @User.FindFirstValue("email").StringToBase64String()</p>
        <p id="screen_size">Scrren Size: 000x000</p>
        <p id="internet_connection">Internet Connection: 0mbps</p>
    </div>
    
    <h4>LOGS</h4>
    
    <div class="account-item" id="logs">
        <h1>Logs</h1>
    </div>
</div>

<script>
    Zermos.mainAfterLoad = () => {
        document.getElementById("screen_size").innerText = "Screen Size: " + window.innerWidth + "x" + window.innerHeight;
        var connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection || navigator.msConnection;
        if (connection !== undefined) {
            document.getElementById("internet_connection").innerText = "Internet Connection: " + (connection.downlink / 8) + "MB per second";
        }
        
        //loop over consoleArray and write to logs
        var logs = document.getElementById("logs");
        for (var i = 0; i < consoleArray.length; i++) {
            var log = consoleArray[i][1] + " - " + consoleArray[i][0][0];
            var logElement = document.createElement("p");
            logElement.innerText = log;
            logs.appendChild(logElement);
        }
    }

    function RefreshCSS() {
        var links = document.getElementsByTagName("link");
        for (var cl in links) {
            var link = links[cl];
            if (link.rel === "stylesheet") {
                //replace the ?v= with a random string of 10 long
                link.href = link.href.replace(/\?v=.*$/, "?v=" + Math.random().toString(36).substring(2, 12));
            }
        }
    }
    
    function RefreshJS() {
        var scripts = document.getElementsByTagName("script");
        for (var cl in scripts) {
            var script = scripts[cl];
            if (script.src !== undefined) {
                //replace the ?v= with a random string of 10 long
                script.src = script.src.replace(/\?v=.*$/, "?v=" + Math.random().toString(36).substring(2, 12));
            }
        }
    }
    
    CheckPreviews();
    
    function CheckPreviews() {
        var previews = document.getElementsByClassName("account-item");
        for (var i = 0; i < previews.length; i++) {
            var preview = previews[i];
            if (preview.dataset.previewId !== undefined) {
                var previewId = preview.dataset.previewId;
                var previewValue = HasPreview(previewId);
                if (previewValue === true) {
                    preview.classList.add("active");
                }
            }
        }
    }
</script>
