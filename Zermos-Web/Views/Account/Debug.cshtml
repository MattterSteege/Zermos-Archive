@using System.Security.Claims
@using Zermos_Web.Utilities
@model Infrastructure.Entities.user

<link rel="stylesheet" href="/css/account.css" preload>

<div class="account-container">
    <div class="account-item">
        <h1>BELANGRIJK!</h1>
        <p>Deze pagina is bedoeld om dingen te testen en is voor de normale gebruiker niet bedoeld. Als je problemen ondervindt met Zermos en je is verteld om deze pagina te openen. Blijf dan lekker rondhangen :)</p>
    </div>
    
    <h4>refresh</h4>
    
    <div class="account-item" onclick="RefreshCSS()">
        <h1>CSS refreshen</h1>
        <p>Als Zermos er niet helemaal tof uitziet, dan kan je hier de CSS refreshen. Ik kan je ook aanraden om gelijk de JS te refreshen, maar dat hoeft niet.</p>
    </div>
    
    <div class="account-item" onclick="RefreshJS()">
        <h1>JS refreshen</h1>
        <p>Als Zermos niet helemaal lekker werkt, dan kan je hier de JS refreshen. Ik kan je ook aanraden om gelijk de CSS te refreshen, maar dat hoeft niet.</p>
    </div>

    <div class="account-item" onclick="RefreshCache()">
        <h1>Cache refreshen</h1>
        <p>Mocht je problemen ondervinden met de cache, dan kan je hier de cache (bijv. cijfers, huiswerk etc.) verwijderen, Zermos vraagt dan alles de eerstvolgende keer opnieuw aan.</p>
    </div>

    <div class="account-item" onclick="newSidebar()">
        <h1>sidebar refreshen</h1>
        <p>Refresh de sidebar, duidelijk toch?</p>
    </div>
    
    <h4>previews</h4>
    
    <div class="account-item" data-preview-id="zermelo_not_current_week" onclick="TogglePreview('zermelo_not_current_week')">
        <h1>Zermelo 'niet deze week' notificatie</h1>
        <p>Zet hier de optie om de notificatie te laten zien als je niet op de huidige week zit aan of uit.</p>
    </div>
    
    <div class="account-item" data-preview-id="zermelo_smartwatch" onclick="TogglePreview('zermelo_smartwatch')">
        <h1>Zermos watch</h1>
        <p>Zet hier de optie om het rooster te laten zien in smartwatch modus aan of uit.</p>
    </div>
    
    <div class="account-item" onclick='document.querySelector("html").style.filter = "blur(" + Math.floor(Math.random() * 5) + "px)"'>
        <h1>C#?</h1>
        <p>Fuck around and find out?</p>
    </div>

    <h4>DEV settings</h4>
    
    <div class="account-item" data-preview-id="Dont_minimize_js" onclick="TogglePreview('Dont_minimize_js')">
        <h1>Zet de JS minizer uit</h1>
        <p>Als je problemen ondervindt met de JS minimizer, zet deze Preview dan aan</p>
    </div>
    
    <div class="account-item" data-preview-id="incognito" onclick="TogglePreview('incognito')">
        <h1>Incognito</h1>
        <p>Is het een Ninja, is het een Hacker? Nee, ik zie het niet!</p>
    </div>

    <div class="account-item" onclick="var script = document.createElement('script'); script.src='https://cdn.jsdelivr.net/npm/eruda'; document.body.append(script); script.onload = function () { eruda.init(); }">
        <h1>Debug Instance</h1>
        <p>Open an eruda debug instance</p>
    </div>
    
    <div class="account-item" onclick="testAPI()">
        <h1>Test API latency</h1>
        <p>Klik om basic API data te ontvangen</p>
    </div>

    <h4>GOTO's</h4>
    
    @if(Environment.GetEnvironmentVariable("ZERMOS-WEB-VERSION") == "DEV") {
    <div class="account-item" onclick="ReplacePage('@Url.Action("LoginAs", "Authentication")')">
        <h1>Login als</h1>
        <p>Ga naar de login als pagina</p>
    </div>
    }

    <div class="account-item" onclick="ReplacePage('/Intro')">
        <h1>Introduction required!</h1>
        <p>Ga naar de intro pagina</p>
    </div>
    
    <h4>device info</h4>
    
    <div class="account-item">
        <h1>Device info</h1>
        <p>Deze informatie kan handig zijn als je problemen ondervindt met Zermos.</p>
        <p>Device: @Context.Request.Headers["User-Agent"]</p>
        <p>Account ID: @User.FindFirstValue("email").StringToBase64String()</p>
        <p id="screen_size">Scrren Size: 000x000</p>
        <p id="internet_connection">Internet Connection: 0mbps</p>
    </div>
    
    <h4>LOGS</h4>
    
    <div class="account-item" id="logs">
        <h1>Logs</h1>
    </div>
</div>

<script minimize>
Zermos.mainAfterLoad = () => {
    document.getElementById("screen_size").innerText = "Screen Size: " + window.innerWidth + "x" + window.innerHeight;
    var connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection || navigator.msConnection;
    if (connection !== undefined) {
        document.getElementById("internet_connection").innerText = "Internet Connection: " + (connection.downlink / 8) + "MB per second";
    }

    refreshLogs();
}

addEventListenerToMain("onerror", function(e) {
    refreshLogs();
});

addButtonToPage("fa-refresh", () => {
    refreshLogs()
}, VerticalAlignment.TL, Background.Primary);

function refreshLogs() {
    //loop over consoleArray and write to logs
    var logs = document.getElementById("logs");

    logs.innerHTML = "<h1>Logs</h1>";

    for (var i = 0; i < consoleArray.length; i++) {
        var type = consoleArray[i][0];
        var stack = consoleArray[i][1];
        var args = consoleArray[i][2];

        var log = document.createElement("div");
        log.classList.add("log");
        log.style.marginTop = "5px";
        log.classList.add("type-" + type);

        if (stack) {
            var stackElement = document.createElement("p");
            stackElement.classList.add("stack");
            //turn every line of the stack into a : ⤷ [stack line]
            stackElement.innerHTML = "&nbsp;⤷&nbsp;&nbsp;&nbsp;&nbsp;" + stack.replace("Error\n", "").split("\n").join("\n&nbsp;⤷&nbsp;&nbsp;&nbsp;&nbsp;");
        }

        var argsElement = document.createElement("p");
        argsElement.classList.add("args");
        argsElement.innerText = "[" + type + "] - "  + args;

        log.appendChild(argsElement);
        if (stack) {
            log.appendChild(stackElement);
        }

        logs.appendChild(log);
    }
}

function RefreshCSS() {
    var links = document.getElementsByTagName("link");
    for (var cl in links) {
        var link = links[cl];
        if (link.rel === "stylesheet") {
            //replace the ?v= with a random string of 10 long
            link.href = link.href.replace(/\?v=.*$/, "?v=" + Math.random().toString(36).substring(2, 12));
        }
    }
}

function RefreshJS() {
    var scripts = document.getElementsByTagName("script");
    for (var cl in scripts) {
        var script = scripts[cl];
        if (script.src !== undefined) {
            //replace the ?v= with a random string of 10 long
            script.src = script.src.replace(/\?v=.*$/, "?v=" + Math.random().toString(36).substring(2, 12));
        }
    }
}

function RefreshCache() {
    //verwijder alle cookies die 'cached' in de naam hebben
    var cookies = document.cookie.split(";");
    for (var i = 0; i < cookies.length; i++) {
        var cookie = cookies[i];
        if (cookie.includes("cached")) {
            document.cookie = cookie + "; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
        }
    }
    
    localStorage.clear();
}

function testAPI() {
    
    fetch("/api/test", {
        method: "POST",
        body: "timesend=" + new Date().getTime(),
        headers: {
            "Content-Type": "application/x-www-form-urlencoded"
        }
    }).then(response => response.json()).then(data => {
        var timeRequestRecieved = new Date(data.timeRequestRecieved);
        var timeRequestSend = new Date(data.timeRequestSend);
        var timeResponseSend = new Date(data.timeResponseSend);
        var timeResponseRecieved = new Date();
        var timeQuery = data.timeQuery;
        
        var timeRequest = timeRequestRecieved - timeRequestSend;
        var timeResponse = timeResponseRecieved - timeResponseSend;
        var total = timeResponseRecieved - timeRequestSend;
        
        new ZermosModal()
        .addHeading("API test resulaten")
        .addText("Request tijd: ~" + timeRequest + "ms (" + (Math.round(timeRequest  / total * 100 * 100) / 100).toFixed(2) + "%)")
        .addText("Response tijd: ~" + timeResponse + "ms (" + (Math.round(timeResponse / total * 100 * 100) / 100).toFixed(2) + "%)")
        .addText("Query tijd: ~" + timeQuery + "ms (" + (Math.round(timeQuery / total * 100 * 100) / 100).toFixed(2) + "%)")
        .addSeparator()
        .addText("Totaal tijd: ~" + (total) + "ms")
        .addSeparator()
        .addText("De tijd kan afwijken met een maximum van +/-1ms door afrondingen. Als de totale tijd onder de 100ms is, dan is de snelheid van de API op een goed niveau.")
        .open();                
    });

}

CheckPreviews();

function CheckPreviews() {
    var previews = document.getElementsByClassName("account-item");
    for (var i = 0; i < previews.length; i++) {
        var preview = previews[i];
        if (preview.dataset.previewId !== undefined) {
            var previewId = preview.dataset.previewId;
            var previewValue = HasPreview(previewId);
            if (previewValue === true) {
                preview.classList.add("active");
            }
        }
    }
}
</script>
