@using System.Security.Claims
@using Zermos_Web.Utilities
@model Infrastructure.Entities.user

<link rel="stylesheet" href="/css/account.css" preload>

<div class="account-container">
    <div class="account-item">
        <h1>BELANGRIJK!</h1>
        <p>Deze pagina is bedoeld om dingen te testen en is voor de normale gebruiker niet bedoeld. Als je problemen ondervindt met Zermos en je is verteld om deze pagina te openen. Blijf dan lekker rondhangen :)</p>
    </div>
    
    <h4>refresh</h4>
    
    <div class="account-item" onclick="RefreshCSS()">
        <h1>CSS refreshen</h1>
        <p>Als Zermos er niet helemaal tof uitziet, dan kan je hier de CSS refreshen. Ik kan je ook aanraden om gelijk de JS te refreshen, maar dat hoeft niet.</p>
    </div>
    
    <div class="account-item" onclick="RefreshJS()">
        <h1>JS refreshen</h1>
        <p>Als Zermos niet helemaal lekker werkt, dan kan je hier de JS refreshen. Ik kan je ook aanraden om gelijk de CSS te refreshen, maar dat hoeft niet.</p>
    </div>

    <div class="account-item" onclick="RefreshCache()">
        <h1>Cache refreshen</h1>
        <p>Mocht je problemen ondervinden met de cache, dan kan je hier de cache (bijv. cijfers, huiswerk etc.) verwijderen, Zermos vraagt dan alles de eerstvolgende keer opnieuw aan.</p>
    </div>

    <div class="account-item" onclick="newSidebar()">
        <h1>sidebar refreshen</h1>
        <p>Refresh de sidebar, duidelijk toch?</p>
    </div>
    
    <h4>previews</h4>
    
    <div class="account-item" data-preview-id="zermelo_not_current_week" onclick="TogglePreview('zermelo_not_current_week')">
        <h1>Zermelo 'niet deze week' notificatie</h1>
        <p>Zet hier de optie om de notificatie te laten zien als je niet op de huidige week zit aan of uit.</p>
    </div>
    
    <div class="account-item" data-preview-id="zermelo_smartwatch" onclick="TogglePreview('zermelo_smartwatch')">
        <h1>Zermos watch</h1>
        <p>Zet hier de optie om het rooster te laten zien in smartwatch modus aan of uit.</p>
    </div>
    
    <div class="account-item" onclick='document.querySelector("html").style.filter = "blur(" + Math.floor(Math.random() * 5) + "px)"'>
        <h1>C#?</h1>
        <p>Fuck around and find out?</p>
    </div>

    <h4>Tests</h4>
    
    <div class="account-item" onclick='openTestModal()'>
        <h1>Open een modal op te testen of alles werkt</h1>
        <p>Gewoon leuk, doet verder niks</p>
    </div>
    
    <div class="account-item" onclick='openTypographyModal()'>
        <h1>Kijk of alle font types werken</h1>
        <p>Hoi :)</p>
    </div>

    <h4>DEV settings</h4>
    
    <div class="account-item" data-preview-id="Dont_minimize_js" onclick="TogglePreview('Dont_minimize_js')">
        <h1>Zet de JS minizer uit</h1>
        <p>Als je problemen ondervindt met de JS minimizer, zet deze Preview dan aan</p>
    </div>
    
    <div class="account-item" data-preview-id="old_ooo" onclick="TogglePreview('old_ooo')">
        <h1>Zet de voorgaande OOO (order of operation) aan/uit</h1>
        <p>Hier mee zet je de volgorde van laadpagina/pagina opvragen aan/uit. De oude methode deed alles per stap: laadscherm fadeIn > fetch > laadscherm Fadeout. De nieuwe methode doet: laadscherm FadeIn & fetch > wait till fetch is done > laadscherm fadeOut</p> 
    </div>
    
    <div class="account-item" data-preview-id="incognito" onclick="TogglePreview('incognito')">
        <h1>Incognito</h1>
        <p>Is het een Ninja, is het een Hacker? Nee, ik zie het niet!</p>
    </div>

    <div class="account-item" onclick="var script = document.createElement('script'); script.src='https://cdn.jsdelivr.net/npm/eruda'; document.body.append(script); script.onload = function () { eruda.init(); }">
        <h1>Debug Instance</h1>
        <p>Open an eruda debug instance</p>
    </div>
    
    <div class="account-item" onclick="testAPI()">
        <h1>Test API latency</h1>
        <p>Klik om basic API data te ontvangen</p>
    </div>

    <div class="account-item" data-preview-id="enable_cache" onclick="TogglePreview('enable_cache')">
        <h1>Zet het cahce systeem aan/uit</h1>
        <p>Het systeem werkte niet goed genoeg voor main branch, dus je kunt het hier aanzetten, maar verwacht wat vreemde dingen.</p>
    </div>

    <h4>GOTO's</h4>
    
    @if(Environment.GetEnvironmentVariable("ZERMOS-WEB-VERSION") == "DEV") {
    <div class="account-item" onclick="ReplacePage('@Url.Action("LoginAs", "Authentication")')">
        <h1>Login als</h1>
        <p>Ga naar de login als pagina</p>
    </div>
    }

    <div class="account-item" onclick="ReplacePage('/Intro')">
        <h1>Introduction required!</h1>
        <p>Ga naar de intro pagina</p>
    </div>
    
    <div class="account-item" onclick="openURLModal()">
        <h1>Go to URL</h1>
        <p>Ga naar een opgegeven URL (voor native app handig)</p>
    </div>
    
    <h4>device info</h4>
    
    <div class="account-item">
        <h1>Device info</h1>
        <p>Deze informatie kan handig zijn als je problemen ondervindt met Zermos.</p>
        <p id="device_data"></p>
        <p>Account ID: @User.FindFirstValue("email").StringToBase64String()</p>
        <p id="screen_size">Screen Size: 000x000</p>
        <p id="internet_connection">Internet Connection: 0mbps</p>
    </div>
    
    <div class="account-item">
        <h1>Opslag info</h1>
        <p>Deze informatie kan handig zijn als je problemen ondervindt bijv. cache</p>
        <p id="ls_size">localstorage size: [CALC...]</p>
        <p id="co_size">cookies size: [CALC...]</p>
        <p id="ss_size">sessionstorage size: [CALC...]</p>
    </div>
    
    <h4>LOGS</h4>
    
    <div class="account-item" id="Clogs">
        <h1>Console Logs</h1>
    </div>
    
    <div class="account-item" id="Nlogs">
        <h1>Network Logs</h1>
    </div>
</div>

<script minimize>
Zermos.mainAfterLoad = () => {
    document.getElementById("screen_size").innerText = "Screen Size: " + window.innerWidth + "x" + window.innerHeight;
    var connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection || navigator.msConnection;
    if (connection !== undefined) {
        document.getElementById("internet_connection").innerText = "Internet Connection: " + (connection.downlink / 8) + "MB per second";
    }
    
    //add useragent, if the app is standalone etc. as match data as possible
    document.getElementById("device_data").innerText = "Device: " + navigator.userAgent + "\n" + "Standalone: " + window.matchMedia('(display-mode: standalone)').matches + "\n" + "Dark Mode: " + window.matchMedia('(prefers-color-scheme: dark)').matches;

    refreshConsoleLogs();
    refreshNetworkLogs();

    var localstorageSize = 0,_xLen, _x;for (_x in localStorage) {if (!localStorage.hasOwnProperty(_x)) {continue;}_xLen = ((localStorage[_x].length + _x.length) * 2);localstorageSize += _xLen;} //Bytes
    var cookiesSize = 0;var cookies = document.cookie.split(";");for (var i = 0; i < cookies.length; i++) {cookiesSize += cookies[i].length;} //Bytes
    var sessionstorageSize = 0,_yLen, _y;for (_y in sessionStorage) {if (!sessionStorage.hasOwnProperty(_y)) {continue;}_yLen = ((sessionStorage[_y].length + _y.length) * 2);sessionstorageSize += _yLen;} //Bytes
    
    document.getElementById("ls_size").innerText = "localstorage size: " + (localstorageSize / 1024).toFixed(2) + "KB";
    document.getElementById("co_size").innerText = "cookies size: " + (cookiesSize / 1024).toFixed(2) + "KB";
    document.getElementById("ss_size").innerText = "sessionstorage size: " + (sessionstorageSize / 1024).toFixed(2) + "KB";
}

addEventListenerToMain("onerror", function(e) {
    refreshConsoleLogs();
});

addButtonToPage("fa-refresh", () => {
    refreshConsoleLogs()
    refreshNetworkLogs();
}, VerticalAlignment.TL, Background.Primary);

function refreshConsoleLogs() {
    //loop over consoleArray and write to logs
    var logs = document.getElementById("Clogs");

    logs.innerHTML = "<h1>Console Logs</h1>";

    for (var i = 0; i < consoleArray.length; i++) {
        var type = consoleArray[i][0];
        var stack = consoleArray[i][1];
        var args = consoleArray[i][2];

        var log = document.createElement("div");
        log.classList.add("log");
        log.style.marginTop = "5px";
        log.classList.add("type-" + type);

        if (stack) {
            var stackElement = document.createElement("p");
            stackElement.classList.add("stack");
            //turn every line of the stack into a : ⤷ [stack line]
            stackElement.innerHTML = "&nbsp;⤷&nbsp;&nbsp;&nbsp;&nbsp;" + stack.replace("Error\n", "").split("\n").join("\n&nbsp;⤷&nbsp;&nbsp;&nbsp;&nbsp;");
        }

        var argsElement = document.createElement("p");
        argsElement.classList.add("args");
        argsElement.innerText = "[" + type + "] - "  + args;

        log.appendChild(argsElement);
        if (stack) {
            log.appendChild(stackElement);
        }

        logs.appendChild(log);
    }
}

function refreshNetworkLogs() {
    var logs = document.getElementById("Nlogs");
    logs.innerHTML = "<h1>Network Logs</h1>";

    for (var i = 0; i < networkArray.length; i++) {
        var method = networkArray[i][0];
        var url = networkArray[i][1];
        var status = networkArray[i][2];
        var fetchTime = networkArray[i][3];
        var errorMessage = networkArray[i][4];

        var log = document.createElement("div");
        log.classList.add("log");
        log.style.marginTop = "5px";
        log.classList.add("status-" + (status < 400 ? "success" : "error"));

        var argsElement = document.createElement("p");
        argsElement.classList.add("args");
        argsElement.innerHTML = `[${method}] (${status}) ${fetchTime.toFixed()}ms - ${url}`;

        log.appendChild(argsElement);

        if (errorMessage) {
            var errorElement = document.createElement("p");
            errorElement.classList.add("error-message");
            errorElement.style.color = "red";
            errorElement.innerHTML = `&nbsp;⤷&nbsp;Error: ${errorMessage}`;
            log.appendChild(errorElement);
        }

        logs.appendChild(log);
    }
}

function RefreshCSS() {
    var links = document.getElementsByTagName("link");
    for (var cl in links) {
        var link = links[cl];
        if (link.rel === "stylesheet") {
            //replace the ?v= with a random string of 10 long
            link.href = link.href.replace(/\?v=.*$/, "?v=" + Math.random().toString(36).substring(2, 12));
        }
    }
}

function RefreshJS() {
    var scripts = document.getElementsByTagName("script");
    for (var cl in scripts) {
        var script = scripts[cl];
        if (script.src !== undefined) {
            //replace the ?v= with a random string of 10 long
            script.src = script.src.replace(/\?v=.*$/, "?v=" + Math.random().toString(36).substring(2, 12));
        }
    }
}

function RefreshCache() {
    //verwijder alle cookies die 'cached' in de naam hebben
    var cookies = document.cookie.split(";");
    for (var i = 0; i < cookies.length; i++) {
        var cookie = cookies[i];
        if (cookie.includes("cached")) {
            document.cookie = cookie + "; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
        }
    }
    
    localStorage.clear();
}

function testAPI() {
    
    fetch("/api/test", {
        method: "POST",
        body: "timesend=" + new Date(new Date().getTime() + new Date().getTimezoneOffset() * 60000).getTime(),
        headers: {
            "Content-Type": "application/x-www-form-urlencoded"
        }
    }).then(response => response.json()).then(data => {
        var timeRequestRecieved = new Date(data.timeRequestRecieved);
        var timeRequestSend = new Date(data.timeRequestSend);
        var timeResponseSend = new Date(data.timeResponseSend);
        var now = new Date();
        var timeResponseRecieved = new Date(now.getTime() + now.getTimezoneOffset() * 60000);
        var timeQuery = data.timeQuery;
        
        var timeRequest = timeRequestRecieved - timeRequestSend + now.getTimezoneOffset() * 60000;
        var timeResponse = timeResponseRecieved - timeResponseSend - now.getTimezoneOffset() * 60000;
        var total = timeResponseRecieved - timeRequestSend;
        
        new ZermosModal()
        .addHeading({text: "API test resulaten"})
        .addText({text: "Request tijd: ~" + timeRequest + "ms (" + (Math.round(timeRequest  / total * 100 * 100) / 100).toFixed(2) + "%)"})
        .addText({text: "Response tijd: ~" + timeResponse + "ms (" + (Math.round(timeResponse / total * 100 * 100) / 100).toFixed(2) + "%)"})
        .addText({text: "Query tijd: ~" + timeQuery + "ms (" + (Math.round(timeQuery / total * 100 * 100) / 100).toFixed(2) + "%)"})
        .addSeparator({})
        .addText({text: "Totaal tijd: ~" + (total) + "ms"})
        .addSeparator({})
        .addText({text: "De tijd kan afwijken met een maximum van +/-1ms door afrondingen. Als de totale tijd onder de 100ms is, dan is de snelheid van de API op een goed niveau."})
        .open();                
    });
}

CheckPreviews();

function CheckPreviews() {
    var previews = document.getElementsByClassName("account-item");
    for (var i = 0; i < previews.length; i++) {
        var preview = previews[i];
        if (preview.dataset.previewId !== undefined) {
            var previewId = preview.dataset.previewId;
            var previewValue = HasPreview(previewId);
            if (previewValue === true) {
                preview.classList.add("active");
            }
        }
    }
}

function openTestModal(){
// Create a new modal and chain all the components
    new ZermosModal(false)
        .addHeading({text: "Create User Profile", subheading: "Please fill out all the details below", level: 1})
        .addTextInput({required: true, initialValue: "", maxLength: 50, onChange: (ctx, value) => console.log("Name:", value)})
        .addLabel({text: "Date of Birth"})
        .addDatePicker({required: true, initialDate: new Date(), onChange: (ctx, value) => console.log("Birthday:", value)})
        .addDropdown({
            options: [
                {label: "Male", value: "male"},
                {label: "Female", value: "female"},
                {label: "Non-binary", value: "non-binary"},
                {label: "Prefer not to say", value: "not-specified"}
            ],
            required: true,
            multiSelect: false,
            onChange: (ctx, value) => console.log("Gender:", value)
        })
        .addNumberInput({
            required: true,
            initialValue: 18,
            min: 13,
            max: 120,
            step: 1,
            onChange: (ctx, value) => console.log("Age:", value)
        })
        .addTextArea({
            required: false,
            initialValue: "",
            maxLength: 500,
            onChange: (ctx, value) => console.log("Bio:", value)
        })
        .addSeparator({text: "Contact Information"})
        .addTextInput({
            required: true,
            initialValue: "",
            maxLength: 100,
            onChange: (ctx, value) => console.log("Email:", value)
        })
        .addPasswordInput({
            required: true,
            maxLength: 50,
            onChange: (ctx, value) => console.log("Password:", value)
        })
        .addColorPicker({
            required: false,
            initialColor: "#000000",
            onChange: (ctx, value) => console.log("Favorite Color:", value)
        })
        .addSlider({
            min: 0,
            max: 50,
            step: 1,
            initialValue: 0,
            onChange: (ctx, value) => console.log("Years of Experience:", value)
        })
        .addRating({
            required: false,
            maxRating: 5,
            initialRating: 3,
            onChange: (ctx, value) => console.log("Skill Level:", value)
        })
        .addMultiToggles({
            labels: ["Sports", "Music", "Movies", "Travel", "Food"],
            initialStates: [false, false, false, false, false],
            onChange: (ctx, values) => console.log("Interests:", values)
        })
        .addSeparator({text: "Terms and Conditions"})
        .addHTML({
            html: "<p>By creating an account, you agree to our <a href='#'>Terms of Service</a> and <a href='#'>Privacy Policy</a>.</p>"
        })
        .addCheckbox({
            initialState: false,
            onChange: (ctx, value) => console.log("Agreed to Terms:", value)
        })
        .addSpacer({height: "20px"})
        .addButton({
            text: "Create Profile",
            onClick: (ctx) => {
                console.log("Profile creation attempted");
                const formData = ctx.getComponentsValue();
                if (formData.correct) {
                    console.log("Profile created successfully:", formData.values);
                    ctx.close();
                } else {
                    console.log("Please fill all required fields");
                }
            }
        })
        .addText("Wil je dit modal systeem nou ook gebruiken, kijk dan op https://github.com/matttersteegem/ZermosModal!")
        .open();
    }
    
    function openTypographyModal() {
        new ZermosModal()
        .addHeading({text: "Typography", subheading: "All the different font types", level: 1})
        .addHeading({text: "Heading 1", level: 1})
        .addHeading({text: "Heading 2", level: 2})
        .addHeading({text: "Heading 3", level: 3})
        .addHeading({text: "Heading 4", level: 4})
        .addHeading({text: "Heading 5", level: 5})
        .addHeading({text: "Heading 6", level: 6})
        .addText({text: "This is a paragraph of text (default)"})
        .addText({text: "<div style='font-weight: 700; font-style: italic;'>This is a paragraph of text with font-weight: 700 and font-style: italic (Bold Italic)</div>", asHtml: true})
        .addText({text: "<div style='font-weight: 400; font-style: italic;'>This is a paragraph of text with font-weight: 400 and font-style: italic (Regular Italic)</div>", asHtml: true})
        .addText({text: "<div style='font-weight: 300; font-style: italic;'>This is a paragraph of text with font-weight: 300 and font-style: italic (Light Italic)</div>", asHtml: true})
        .addText({text: "<div style='font-weight: 700; font-style: normal;'>This is a paragraph of text with font-weight: 700 and font-style: normal (Bold)</div>", asHtml: true})
        .addText({text: "<div style='font-weight: 500; font-style: italic;'>This is a paragraph of text with font-weight: 500 and font-style: italic (Medium Italic)</div>", asHtml: true})
        .addText({text: "<div style='font-weight: 300; font-style: normal;'>This is a paragraph of text with font-weight: 300 and font-style: normal (Light)</div>", asHtml: true})
        .addText({text: "<div style='font-weight: 500; font-style: normal;'>This is a paragraph of text with font-weight: 500 and font-style: normal (Medium)</div>", asHtml: true})
        .addText({text: "<div style='font-weight: 400; font-style: normal;'>This is a paragraph of text with font-weight: 400 and font-style: normal (Regular)</div>", asHtml: true})
        .addText({text: "<div style='font-weight: 600; font-style: italic;'>This is a paragraph of text with font-weight: 600 and font-style: italic (SemiBold Italic)</div>", asHtml: true})
        .addText({text: "<div style='font-weight: 600; font-style: normal;'>This is a paragraph of text with font-weight: 600 and font-style: normal (SemiBold)</div>", asHtml: true})
        .open();
    }
    
    function openURLModal() {
        new ZermosModal()
        .addHeading({text: "Go to URL", subheading: "Enter the URL you want to go to", level: 1})
        .addTextInput({required: true, initialValue: "", maxLength: 10000, onChange: (ctx, value) => {
            document.getElementById("url").href = value;
        }})
        .addHTML({html: "<a id='url' href='#' target='_blank'>Open URL</a>"})
        .open();
    }
</script>
