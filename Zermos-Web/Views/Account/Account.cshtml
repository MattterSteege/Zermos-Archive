@using System.Security.Claims
@using Zermos_Web.Utilities
@using Infrastructure.Entities
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Zermos_Web.TagHelpers
@model dynamic


<link rel="stylesheet" href="/css/account.css" preload>

<div class="account-container">
    <div class="account-item" onclick="ReplacePage('@Url.Action("Debug", "Account")')" id="profile">
        <h1>Profiel</h1>
        <p>@Model.user.email - @Model.user.name</p>
    </div>
    
    <div id="absence" onclick="ShowAbscence()" class="account-item clickable">
        <h1>Afwezigheid</h1>
        <p>Je bent dit jaar <b>een paar keer</b> keer afwezig geweest.</p>
    </div>
    
    <div class="account-item">
        <h1>Gedeelde links</h1>
        @foreach(share share in Model.shares)
        {
            <p><b>@share.page</b> - geldig tot: @share.expires_at.ToString("d/M/yyyy") - <a href="@share.url">Bekijk hier</a></p>
        }
    </div>
    
    <div onclick="ReplacePage('@Url.Action("Settings", "Account")')" class="account-item clickable">
        <h1>Instellingen</h1>
        <p>Hier kan je verschillende instellingen aanpassen</p>
    </div>

    <div class="account-item" id="info">
        <div class="overlay-account-info-grid">
            <div class="left">
                <h1>Opgeslagen informatie</h1>
                <p>De volgende dingen zijn opgeslagen om Zermos goed te kunnen gebruiken (klik om te openen)</p>
            </div>
            <div class="right"><i class="fa-solid fa-angle-down" id="openCloseArrow" style="transition: all 0.5s ease 0s;"></i></div>
        </div>
        <div class="account-info-grid hidden">
            @{
                //Loop trough all the properties of the user object and display them like this: [name]: [value (capt at 25 characters)]
                foreach (var property in ((user) Model.user).GetType().GetProperties())
                {
                    //if property is not { get; set; } then skip it
                    if (property.GetMethod == null || property.SetMethod == null || property.GetValue((user) Model.user, null) == null || property.Name == "settings")
                    {
                        continue;
                    }

                    <p><b>@property.Name</b></p>
                }
            }
        </div>
    </div>

    <div class="account-item" onclick="OpenSuggestionOrBugModal()">
        <h1>suggesties/problemen</h1>
        <p>Heb je een suggestie of een probleem? Laat het me weten!</p>
    </div>

    <div class="account-item">
        <h1 onclick="ReplacePage('@Url.Action("Index", "Koppelingen")')" style="text-decoration: underline; cursor: pointer;">Koppelingen</h1>
        <div class="account-info-grid">
            <div class="infowijs">
                @if (TokenUtils.CheckToken(((user) Model.user).infowijs_access_token))
                {
                    <p><b>Infowijs</b>, geldig tot: @(TokenUtils.GetTokenExpiration(((user) Model.user).infowijs_access_token).ToString("d/M/yyyy"))</p>
                    <button id="infowijs-first" onclick="AreYouSure('infowijs')" class="koppel-knop ontkoppelen">Ontkoppelen</button>
                    <button id="infowijs-second" onclick="Ontkoppel('infowijs')" class="koppel-knop zeker" style="display: none">Zeker?</button>
                }
                else
                {
                    <p><b>Infowijs</b> is niet gekoppeld</p>
                    <button style="color: var(--text-color);" onclick="ReplacePage('@Url.Action("Infowijs", "Koppelingen")')" class="koppel-knop koppelen">Koppelen</button>
                }
            </div>
            <div class="zermelo">
                @if (((user) Model.user).zermelo_access_token_expires_at > DateTime.Now)
                {
                    <p><b>Zermelo</b>, geldig tot: @(((user) Model.user).zermelo_access_token_expires_at?.ToString("d/M/yyyy"))</p>
                    <button id="zermelo-first" onclick="AreYouSure('zermelo')" class="koppel-knop ontkoppelen">Ontkoppelen</button>

                    <form method="POST" asp-controller="Koppelingen" asp-action="Ontkoppel" asp-route-app="zermelo">
                        <button id="zermelo-second" class="koppel-knop zeker" style="display: none">Zeker?</button>
                    </form>
                }
                else
                {
                    <p><b>Zermelo</b> is niet gekoppeld</p>
                    <button style="color: var(--text-color);" onclick="ReplacePage('@Url.Action("Zermelo", "Koppelingen")')" class="koppel-knop koppelen">Koppelen</button>
                }
            </div>

            <div class="somtoday">
                @if (TokenUtils.CheckToken(((user) Model.user).somtoday_refresh_token))
                {
                    <p><b>Somtoday</b>, geldig tot: @(TokenUtils.GetTokenExpiration(((user) Model.user).somtoday_refresh_token).ToString("d/M/yyyy"))</p>
                    <button id="somtoday-first" onclick="AreYouSure('somtoday')" class="koppel-knop ontkoppelen">Ontkoppelen</button>
                    <button id="somtoday-second" onclick="Ontkoppel('somtoday')" class="koppel-knop zeker" style="display: none">Zeker?</button>
                }
                else
                {
                    <p><b>Somtoday</b> is niet gekoppeld</p>
                    <button style="color: var(--text-color);" onclick="ReplacePage('@Url.Action("Somtoday", "Koppelingen")')" class="koppel-knop koppelen">Koppelen</button>
                }
            </div>
            
        </div>
    </div>

    <div class="account-item">
        <h1>Uitloggen?</h1>
        <button onclick="ReplacePage('/logout')" class="koppel-knop ontkoppelen">Wil je uitloggen?</button>
    </div>

    <div class="account-item clickable" onclick="window.location.href='https://zermos-docs.kronk.tech/'">
        <h1>Vragen over Zermos? (zermos-docs.kronk.tech)</h1>
        <a>Kijk hier of je vraag beantwoord kan worden</a>
    </div>

    <div class="account-item clickable" onclick="window.location.href='https://discord.gg/krP9se64TD'">
        <h1>Nogsteeds vragen over Zermos? (discord)</h1>
        <a>Kijk hier of je vraag hier dan beantwoord kan worden</a>
    </div>

    <div class="account-item clickable" onclick="window.location.href='https://zermos-docs.kronk.tech/PWA%20installeren'">
        <h1>Zermos installeren</h1>
        <a>Klik hier voor de uitleg</a>
    </div>
</div>

<script minimize>
@Context.Items["dmjs"]

    function AreYouSure(app) {
        document.getElementById(app + '-first').style.display = 'none';
        document.getElementById(app + '-second').style.display = 'block';
        
         new Promise(res => setTimeout(res, 3000)).then(() => {
            document.getElementById(app + '-first').style.display = 'block';
            document.getElementById(app + '-second').style.display = 'none';
        });
    }

    function Ontkoppel(app) {
        //<form method="POST" asp-controller="Koppelingen" asp-action="Ontkoppel" asp-route-app="{app}">
        //   <button id="somtoday-second" class="koppel-knop zeker" style="display: none">Zeker?</button>
        //</form>
        
        fetch('/Koppelingen/ontkoppel/' + app, { method: 'POST' })
        .then(response => {
            if (response.ok) { 
                newSidebar();
                
                var element = document.querySelector('.' + app);
                element.innerHTML = '<p><b>' + app.charAt(0).toUpperCase() + app.slice(1) + '</b> is niet gekoppeld</p>';
                element.innerHTML += '<button onclick="ReplacePage(\'/Koppelingen/' + app.charAt(0).toUpperCase() + app.slice(1) + '\')" class="koppel-knop koppelen">Koppelen</button>';
            }
        });
    }
    
     Zermos.mainBeforeLoad = () => {   
        //when clicking on #info, toggle the hidden class on the opgeslagen-informatie-grid
        document.getElementById('info').addEventListener('click', function() {
            document.querySelector('.account-info-grid').classList.toggle('hidden');
            document.getElementById('openCloseArrow').style.transform = document.getElementById('openCloseArrow').style.transform === 'rotate(180deg)' ? 'rotate(0deg)' : 'rotate(180deg)';
        });
    };

    if (isUserOnline) {
        var abscence = null;

        //fetch /Refresh the absence data
        fetch('/Somtoday/Afwezigheid')
        .then(response => response.text())
        .then(data => {
            abscence = JSON.parse(data);
            document.getElementById('absence').innerHTML = '<h1>Afwezigheid</h1><p>Je bent dit jaar <b>' + abscence.items.length + '</b> keer afwezig geweest.</p>';
        });

        function ShowAbscence() {
            var abscenceModal = new ZermosModal()
            .addHeading({text: 'Afwezigheid'})
            
            abscence.items.forEach(absence => {
                abscenceModal
                .addSeparator({})
                .addText({text: absence.absentieReden.omschrijving})
                .addText({text: absence.opmerkingen});
                var dateStart = new Date(absence.beginDatumTijd);
                var dateEnd = new Date(absence.eindDatumTijd);
                abscenceModal.addText({text: dateStart.toLocaleDateString() + ' ' + dateStart.toLocaleTimeString() + ' - ' + dateEnd.toLocaleTimeString() + ' ' + dateEnd.toLocaleDateString()});
            })
            .addButton({text: 'Sluiten', onClick: (ctx) => ctx.close()})
            .open();

        }
    }
    else {
        document.getElementById('absence').innerHTML = '<h1>Afwezigheid</h1><p>Om je afwezigheid te kunnen zien moet je online zijn.</p>';
    }


function OpenSuggestionOrBugModal() {

    const ideaSubmissionSubModal = new ZermosSubModal()
        .addHeading({text: "Vertel eens, wat is jouw idee?", level: 2})
        .addTextArea({required: true})

    const bugSubmissionSubModal = new ZermosSubModal()
        .addHeading({text: "Vertel eens, wat is het probleem?", level: 2})
        .addTextArea({required: true})
        .addText({text: "Met je bug report wordt de volgende informatie meegestuurd:\n- De omgeving waarin je Zermos gebruikt\n- De opslag informatie die Zermos heeft opgeslagen in je browser (alleen de statistieken, niet de informatie zelf)\n- De console log van Zermos\n- De netwerk log van Zermos"})

    const modal = new ZermosModal();

    modal.addHeading({text: "Bug of idee?"})
        .addText({text: "Heb je een bug gevonden in Zermos of heb je een baanbrekend idee, vul de korte vragenlijst hieronder!"})
        .addDropdown({options: [
            { label: "Ik wil een bug rapporteren", value: "bug" },
            { label: "Ik heb een idee voor Zermos", value: "idee" }
        ], required: true, onChange: (ctx, value) => modal.setCondition("type", value.value)})
        .addSubmenu({showCondition: "type == \"idee\"", subModal: ideaSubmissionSubModal})
        .addSubmenu({showCondition: "type == \"bug\"", subModal: bugSubmissionSubModal})
        .addText({text: "kan ik je via je mail (@User.FindFirstValue("email")) bereiken op als ik extra vragen heb of ontwikkelingen?"})
        .addToggle({label: "Ja dat mag", initialState: false})
        .addButton({text: "versturen", onClick: (ctx) => {
            var values = ctx.getComponentsValue();
            if (values.values[0].correct && values.values[2].correct) {
                //send the bug report
                
                var deviceInfo = "Deze informatie kan handig zijn als je problemen ondervindt met Zermos.\n\nDevice: " + navigator.userAgent + "\nAccount ID: " + btoa('@User.FindFirstValue("email")') + "\nScreen Size: " + window.screen.width + "x" + window.screen.height + "\nInternet Connection: " + navigator.connection.downlink + "mbps";
                    var localstorageSize = 0,_xLen, _x;for (_x in localStorage) {if (!localStorage.hasOwnProperty(_x)) {continue;}_xLen = ((localStorage[_x].length + _x.length) * 2);localstorageSize += _xLen;} //Bytes
                    var cookiesSize = 0;var cookies = document.cookie.split(";");for (var i = 0; i < cookies.length; i++) {cookiesSize += cookies[i].length;} //Bytes
                    var sessionstorageSize = 0,_yLen, _y;for (_y in sessionStorage) {if (!sessionStorage.hasOwnProperty(_y)) {continue;}_yLen = ((sessionStorage[_y].length + _y.length) * 2);sessionstorageSize += _yLen;} //Bytes
                var storageInfo = "localstorage size: " + (localstorageSize / 1024).toFixed(2) + "KB\ncookies size: " + (cookiesSize / 1024).toFixed(2) + "KB\nsessionstorage size: " + (sessionstorageSize / 1024).toFixed(2) + "KB";
                var consoleLog = "";consoleLog += "[log] - Zermos-web versie: " + Zermos.version + "\n";consoleLog += "[log] - Zermos-framework is geladen\n";consoleLog += "[log] - Page load took " + performance.now() + "ms\n";consoleLog += "[log] - Page load took " + (performance.now() - performance.timeOrigin) + "ms";
                var networkLog = networkArray.map(([method, url, status, fetchTime, errorMessage]) => `[${method}] (${status}) ${fetchTime.toFixed()}ms - ${url}${errorMessage ? `\n  ⤷ Error: ${errorMessage}` : ""}`).join("\n");
                var description = values.values[2].value;
                
                description += (values.values[3].value ? "\n\nIk mag benaderd worden via mijn mail" : "\n\nIk mag niet benaderd worden via mijn mail");
                
                fetch("/report/bug", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        "Enviroment": deviceInfo,
                        "OpslagInfo": storageInfo,
                        "ConsoleLog": consoleLog,
                        "NetworkLog": networkLog,
                        "Description": description
                    })
                })
                .then(response => {
                    if (response.ok) {
                        ctx.close();
                    }
                });
            }
            else if (values.values[0].correct && values.values[1].correct) {
                var description = values.values[1].value;
                //send the idea
                fetch("/report/idea", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        "Description": description
                    })
                })
                .then(response => {
                    if (response.ok) {
                        ctx.close();
                    }
                });
            }
        }})
        .open();
}
</script>