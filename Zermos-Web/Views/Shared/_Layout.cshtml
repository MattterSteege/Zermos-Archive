@using Zermos_Web.TagHelpers
@using Zermos_Web.Utilities
@{
    var version = Environment.GetEnvironmentVariable("ZERMOS-WEB-VERSION");
    version = version == "DEV" ? TokenUtils.RandomString(10) : version;
    string preferedFont = (Context.Response.GetCookie("prefers_font") ?? Context.Request.Cookies["prefers_font"] ?? "normal") + "-font";
}
<!DOCTYPE html>
<html lang="nl" class="@(Context.Response.GetCookie("theme") ?? Context.Request.Cookies["theme"] ?? "light") @(Context.Response.GetCookie("hand_side") ?? Context.Request.Cookies["hand_side"] ?? "right") @(Context.Response.GetCookie("font_size") ?? Context.Request.Cookies["font_size"] ?? "font-scale-1") @preferedFont">
<head>
    <meta charset="UTF-8">
    <title>Zermos</title>
    <link rel="stylesheet" href="https://fa.kronk.tech">
    <meta name="viewport" content="user-scalable=no, width=device-width, initial-scale=1, maximum-scale=1">
    <link rel="manifest" href="/manifest.json"/>
    <meta name="theme-color" content="@(Context.Request.Cookies["theme"] == "light" || Context.Request.Cookies["theme"] == "blue" ? "#f8f9fa" : Context.Request.Cookies["theme"] == "dark" || Context.Request.Cookies["theme"] == "red" ? "#1a1a1a" : Context.Request.Cookies["theme"] == "pink" ? "#ffebf2" : "#f8f9fa")">
    <link rel="stylesheet" href="~/css/style.css?v=@version">
    <script defer src="/js/Zermos-framework.min.js?v=@version"></script>
    <script src="/js/Zermos-accessibility.min.js?v=@version" defer></script>
    <script src="/js/Zermos-modal.min.js?v=@version"></script>
    <link rel="stylesheet" href="/css/modal.css?v=@version">
    
    @if (preferedFont == "euclid-font" || preferedFont == "normal-font")
    {
    <link rel="stylesheet" href="/Fonts/EuclidCircularA/EuclidCircularA.css">
    } 
    else if (preferedFont == "inter-font")
    {
    <link rel="stylesheet" href="Fonts/Inter Web/inter.css">
    }
    else if (preferedFont == "dyslexic-font")
    {
    <link rel="stylesheet" href="Fonts/OpenDyslexic/OpenDyslexic.css">
    }
    else if (preferedFont == "roboto-font")
    {
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,600,700" rel="stylesheet">
    }
    else if (preferedFont == "open-sans-font")
    {
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700" rel="stylesheet">
    }
    else if (preferedFont == "monospace-font")
    {
        @*already preinstalled*@
    }
</head>
<body>

<div class="status">ZERMOS IS OFFLINE, JE ZIET MOGELIJK VEROUDERDE DATA!</div>

<!-- ((!1+"")[1] + ("" + [][0])[1]).repeat(2) + (!1+"")[1] + (!1+"")[3] outputs 'ananas' :) check it for yourself: ctrl+shift+j -->
<div id="sidebar">
    @await Html.PartialAsync("sidebar", ViewData)
</div>

<div id="splash-container">
    <!--suppress CssUnresolvedCustomProperty -->
    <style>
        #splash-container{--splash-duration:2s;width:100%;height:100%;display:grid;grid-template-columns:1fr;grid-template-rows:30% 1fr 30%;grid-column-gap:0;grid-row-gap:0;position:fixed;z-index:100000;background:var(--background-color);animation:fade var(--splash-duration) forwards;box-shadow:var(--box-shadow)}.outer_z,.inner_z{grid-area:2 / 1 / 3 / 3;width:100%;height:100%}.outer_z text{stroke-dasharray:300;stroke-dashoffset:300;animation:draw var(--splash-duration) forwards}@@keyframes draw{66.66%{stroke-dashoffset:0}}@@keyframes fade{0%,75%{translate:0% 0%}100%{translate:0% -100%}}svg+.inner_z{animation:fadeIn;animation-duration:var(--splash-duration)}@@keyframes fadeIn{0%,53.33%{opacity:0}66.66%{opacity:1}100%{opacity:1}}
    </style>
    <svg class="outer_z" width="500" height="500">
        <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="none" stroke="var(--text-color)" stroke-width="1" font-size="50">ZERMOS</text>
    </svg>
    <svg class="inner_z" width="500" height="500">
        <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="var(--text-color)" stroke="var(--text-color)" stroke-width="1" font-size="50">ZERMOS</text>
    </svg>
</div>

<div class="top-bar">
    <button class="top-right-profile-picture" id="account-1">
        <a onclick="ReplacePage('@Url.Action("Account", "Account")')" tabindex="19">
            <i class="fa-solid fa-user menu-icons fa-fw"></i>
        </a>
    </button>

    <button class="backbutton" onclick="window.history.back()" tabindex="20">
        <i class="fa-solid fa-angle-left"></i>
    </button>

    <button class="forewardbutton" onclick="window.history.forward()" tabindex="21">
        <i class="fa-solid fa-angle-right"></i>
    </button>

</div>

<div id="content" tabindex="-1" disabled>
    <div class="loader-text">
        De pagina wordt geladen
    </div>
    <div class="loading-dots-container">
        <div class="loading-dots"></div>
        <div class="loading-dots"></div>
        <div class="loading-dots"></div>
    </div>
</div>
<main class="main" id="main">
    @RenderBody()
</main>
<script id="vital-script" defer="defer" minimize>
//@Context.Items["dmjs"]

let main = document.getElementById("main");
const content = document.getElementById("content");
let loadingScreenPromise;
let isRunning = false;
let timerStart;

window.onload = () => {

    waitForObject(Zermos, function () {
        Zermos.CurrentVersion = "@Environment.GetEnvironmentVariable("ZERMOS-WEB-VERSION")";
        console.log(`Zermos-web versie: ${Zermos.CurrentVersion}`);
        console.log(`Zermos-framework is geladen`);
        history.replaceState(null, null, "/");
        ReplacePage('@Html.Raw(ViewData["url"])');
    }, 500);
    
    setTimeout(() => {
        document.getElementById("splash-container").remove();
        @Html.Raw(Context.User.Identity!.IsAuthenticated && (Context.Request.Cookies["preview"] != null ? !Context.Request.Cookies["preview"].Contains("incognito") : true) ? "Zermos.checkForUpdates();" : "")
    }, 2000);
}

function showLoadingScreen() {
    return new Promise((resolve) => {
        document.getElementsByClassName("loader-text")[0].innerHTML = loadingTexts[Math.floor(Math.random() * loadingTexts.length)];
        document.querySelectorAll(".loading-dots").forEach(function(dot) {
            dot.style.background = "";
            dot.style.animation = "";
            dot.style.transform = "";
        });

        content.style.opacity = "1";
        // Assuming a 250ms fade-in animation
        setTimeout(resolve, 250);
    });
}

function hideLoadingScreen() {
    return new Promise((resolve) => {
        content.style.opacity = "0";
        // Assuming a 250ms fade-out animation
        setTimeout(resolve, 250);
    });
}

async function ReplacePage(url, force) {
    if (isRunning && !force) {
        return;
    }

    timerStart = performance.now();

    if (url === window.location.pathname && !force) {
        return;
    }

    isRunning = true;

    try {
        Zermos.mainUnload();
    } catch (e) {}
    unloadModal();
    Zermos.mainUnload = () => {};

    if (HasPreview("Dont_minimize_js")) {
        url += url.includes("?") ? "&" : "?";
        url += "dmjs";
    }

    if (url.startsWith("./")) {
        url = window.location.pathname.endsWith("/") ? window.location.pathname + url.substring(2) : window.location.pathname + url.substring(1);
    }

    @*if (!isUserOnline && HasPreview("enable_cache")) {
        await getCachePage(url);
        isRunning = false;
        await hideLoadingScreen();
        return;
    }*@

    await showLoadingScreen();

    try {
        const response = await fetch(url, { cache: "no-cache", method: "GET", headers: {'X-Requested-With': 'XMLHttpRequest'} });

        if (!response.ok) {
            throw response;
        }
        
        const data = await response.text();
        
        if (response.status === 299) {
            window.location.href = data
            await hideLoadingScreen();
            return;
        }

        if (data.startsWith('<!DOCTYPE html>')) {
            // Full page reload required
            window.location.href = url;
            return;
        }

        await doPageReplace(data, url);

        if (!HasPreview("disable_accessibility")) {
            try {
                Zermos.mainProcessAccessibility();
            } catch(e) {
                console.error("Error processing accessibility:", e);
            }
        }

        await hideLoadingScreen();

        // Final check to ensure page integrity
        if (!isPageStructureComplete()) {
            console.warn("Page structure is incomplete after replace, reloading...");
            window.location.reload();
        }

    } catch (xhr) {
        if (xhr.status === 401) {
            isRunning = false;
            ReplacePage("/Login");
        } else {
            document.getElementsByClassName("loader-text")[0].innerHTML = "De pagina kon niet worden opgevraagd.";
            document.querySelectorAll(".loading-dots").forEach(function(dot) {
                dot.style.background = "var(--deny-color)";
                dot.style.animation = "unset";
                dot.style.transform = "scale(1)";
            });
            history.replaceState(null, " Zermos", url);
        }
    } finally {
        isRunning = false;
    }
}

async function doPageReplace(data, url) {
    const elements = document.querySelectorAll("#added-by-fetch");
    for (let element of elements) {
        element.remove();
    }

    main.outerHTML = '<main class="main" id="main"></main>';
    main = document.getElementById("main");
    main.innerHTML = stripTag("link", stripTag("script", data));

    let html = document.createElement("html");
    html.innerHTML = data;

    const scripts = html.getElementsByTagName("script");
    let amountOfScripts = scripts.length;
    let scriptPromises = [];

    for (let script of scripts) {
        if (script.src) {
            appendScript(document.head, script, true);
            new Promise((resolve) => {
                script.onload = resolve;
            }).then(() => {
                amountOfScripts--;
            });
        } else {
            appendScript(document.body, script, false);
            amountOfScripts--;
        }
    }

    const hrefs = Array.from(html.getElementsByTagName("link")).map(link => link.href.replace(window.location.origin, ""));
    let amountOfStylesheets = hrefs.length;

    for (let href of hrefs) {
        @*if (!isUserOnline && HasPreview("enable_cache")) {
            getCacheCSS(href);
            amountOfStylesheets--;
            continue;
        }*@

        const cssData = await fetch(href + "?v=@version").then(response => response.text());
        //await cacheCSS(href, cssData);
        appendStylesheet(cssData);
        amountOfStylesheets--;
    }

    while (amountOfStylesheets > 0 || amountOfScripts > 0 || scriptPromises.length > 0) {
        await new Promise(res => setTimeout(res, 50));
    }

    html.remove();

    history.pushState(null, " Zermos", url);

    try {
        Zermos.mainBeforeLoad();
    } catch (e) {}
    Zermos.mainBeforeLoad = () => {};

    isRunning = false;

    const timerEnd = performance.now();
    console.log(`Page load took ${timerEnd - timerStart}ms`);

    //cachePage(data, url);

    try {
        Zermos.mainAfterLoad();
    } catch (e) {}
    Zermos.mainAfterLoad = () => {};

    return true;
}

window.onbeforeunload = function() {
    if (!isNativeApp)
        //save the current url in a cookie
        document.cookie = "this_session_last_page=" + window.location.pathname + "; path=/";
}

window.addEventListener("popstate", function(e) {
    //check if the user has just hit the next or previous button OR if the user inputed a new url
    if (e.state === null) { 
        ReplacePage(window.location.pathname, true);
    }

});

@*document.addEventListener("visibilitychange", async (e) => {
  if (document.visibilityState === "visible") {
    console.log("App became visible");
    
    // Short delay to allow for any pending operations to complete
    await new Promise(resolve => setTimeout(resolve, 100));

    if (!isPageStructureComplete()) {
      console.warn("Page structure is incomplete, reloading...");
      window.location.reload();
      return;
    }

    // Check if this is a reopen scenario
    const lastPageUrl = document.cookie.split(";").find(c => c.trim().startsWith("this_session_last_page="))?.split("=")[1];
    if (lastPageUrl && lastPageUrl !== window.location.pathname) {
      console.log("Detected page mismatch, replacing page...");
      await ReplacePage(lastPageUrl, true);
    } else {
      console.log("Page is up-to-date");
    }
  } else {
    console.log("App became hidden");
    // Save the current state if needed
    document.cookie = "this_session_last_page=" + window.location.pathname + "; path=/";
  }
});*@

//check if the user can install the app (PWA)
let deferredPrompt;
let installable = false;

window.addEventListener("beforeinstallprompt", (e) => {
    e.preventDefault();
    deferredPrompt = e;
    installable = true;
});

@*if ('serviceWorker' in navigator) {
    navigator.serviceWorker.register('/serviceworker.js?v=@version', { scope: '/' })
        .then((registration) => {
            console.log('Service Worker registered with scope:', registration.scope);
        })
        .catch((error) => {
            console.error('Service Worker registration failed:', error);
        });
}*@

</script>
</body>
</html>
