@using System.Security.Claims
@using Zermos_Web.TagHelpers
@using Zermos_Web.Utilities
@{
    var version = Environment.GetEnvironmentVariable("ZERMOS-WEB-VERSION");
    version = version == "DEV" ? TokenUtils.RandomString(10) : version;
}
<!DOCTYPE html>
<html lang="nl" class="@(Context.Response.GetCookie("theme") ?? Context.Request.Cookies["theme"] ?? "light") @(Context.Response.GetCookie("hand_side") ?? Context.Request.Cookies["hand_side"] ?? "right") @(Context.Response.GetCookie("font_size") ?? Context.Request.Cookies["font_size"] ?? "font-scale-1")">
<head>
    <meta charset="UTF-8">
    <title>Zermos</title>
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700" crossorigin="anonymous" rel="stylesheet"/>
    <link rel="stylesheet" href="https://fa.kronk.tech">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
    <meta name="viewport" content="user-scalable=no, width=device-width, initial-scale=1, maximum-scale=1">
    <link rel="manifest" href="/manifest.webmanifest"/>
    <meta name="theme-color" content="@(Context.Request.Cookies["theme"] == "light" || Context.Request.Cookies["theme"] == "blue" ? "#f8f9fa" : Context.Request.Cookies["theme"] == "dark" || Context.Request.Cookies["theme"] == "red" ? "#1a1a1a" : Context.Request.Cookies["theme"] == "pink" ? "#ffebf2" : "#f8f9fa")">
    <link rel="stylesheet" href="~/css/style.css?v=@version">
    <script defer src="/js/zermos-framework.min.js?v=@version"></script>
    <script src="/js/Zermos-modal.min.js?v=@version"></script>
    <link rel="stylesheet" href="/css/modal.css?v=@version">
</head>
<body>

<div class="status">ZERMOS IS OFFLINE, JE ZIET MOGELIJK VEROUDERDE DATA!</div>

<!-- get data from sidebar.cshtml -->
<div id="sidebar">
    @await Html.PartialAsync("sidebar", ViewData)
</div>

<div id="splash-container">
    <style>
        #splash-container{--splash-duration:2s;width:100%;height:100%;display:grid;grid-template-columns:1fr;grid-template-rows:30% 1fr 30%;grid-column-gap:0;grid-row-gap:0;position:fixed;z-index:100000;background:var(--background-color);animation:fade var(--splash-duration) forwards;box-shadow:var(--box-shadow)}.outer_z,.inner_z{grid-area:2 / 1 / 3 / 3;width:100%;height:100%}.outer_z text{stroke-dasharray:300;stroke-dashoffset:300;animation:draw var(--splash-duration) forwards}@@keyframes draw{66.66%{stroke-dashoffset:0}}@@keyframes fade{0%,75%{translate:0% 0%}100%{translate:0% -100%}}svg+.inner_z{animation:fadeIn;animation-duration:var(--splash-duration)}@@keyframes fadeIn{0%,53.33%{opacity:0}66.66%{opacity:1}100%{opacity:1}}
    </style>
    <svg class="outer_z" width="500" height="500">
        <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="none" stroke="var(--text-color)" stroke-width="1" font-size="50">ZERMOS</text>
    </svg>
    <svg class="inner_z" width="500" height="500">
        <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="var(--text-color)" stroke="var(--text-color)" stroke-width="1" font-size="50">ZERMOS</text>
    </svg>
</div>

<div class="top-bar">
    <div class="top-right-profile-picture" id="account-1">
        <a onclick="ReplacePage('@Url.Action("Account", "Account")')">
            <i class="fa-solid fa-user menu-icons fa-fw"></i>
        </a>
    </div>

    <div class="backbutton" onclick="window.history.back()">
        <i class="fa-solid fa-angle-left"></i>
    </div>

    <div class="forewardbutton" onclick="window.history.forward()">
        <i class="fa-solid fa-angle-right"></i>
    </div>

</div>

<div id="content">
    <div class="loader-text">
        De pagina wordt geladen
    </div>
    <div class="loading-dots-container">
        <div class="loading-dots"></div>
        <div class="loading-dots"></div>
        <div class="loading-dots"></div>
    </div>
</div>
<main class="main" id="main">
    @RenderBody()
</main>
<script id="vital-script" defer="defer" minimize>
//@Context.Items["dmjs"]

let main = document.getElementById("main");
const content = document.getElementById("content");
let isRunning = false;
let timerStart;

window.onload = () => {

    waitForObject(Zermos, function () {
        Zermos.CurrentVersion = "@Environment.GetEnvironmentVariable("ZERMOS-WEB-VERSION")";
        console.log(`Zermos-web versie: ${Zermos.CurrentVersion}`);
        console.log(`Zermos-framework is geladen`);
        history.replaceState(null, null, "/");
        ReplacePage('@Html.Raw(ViewData["url"])');
    }, 500);
    
    setTimeout(() => {
        document.getElementById("splash-container").remove();
        @Html.Raw(Context.User.Identity!.IsAuthenticated && (Context.Request.Cookies["preview"] != null ? !Context.Request.Cookies["preview"].Contains("incognito") : true) ? "Zermos.checkForUpdates();" : "")
    }, 2000);
}

function ReplacePage(url, force) {
    if (isRunning && !force) {
        return;
    }

    //start timer
    timerStart = performance.now();

    //check if the url is the same as the current url
    if (url === window.location.pathname && !force) {
        return;
    }

    try{
        Zermos.mainUnload();
    } catch (e) {}
        unloadModal();
        Zermos.mainUnload = () => {};


    document.getElementsByClassName("loader-text")[0].innerHTML = loadingTexts[Math.floor(Math.random() * loadingTexts.length)];
    document.querySelectorAll(".loading-dots").forEach(function(dot) {
        dot.style.background = "";
        dot.style.animation = "";
        dot.style.transform = "";
    });

    //set loading-text to one of the following

    if (HasPreview("Dont_minimize_js")) {
        //add url parameter to disable js minimization
        //check if the url already has a query string
        url += url.includes("?") ? "&" : "?";
        url += "dmjs";
    }

    if (url.startsWith("./")) {
        // get current path and add the url to it
        url = window.location.pathname + url.substring(1);
    }

    content.style.opacity = "1";
    // Make an AJAX request
    isRunning = true;
    
    if (!isUserOnline) {
        getCachePage(url);
        isRunning = false;
        return;
    }

    fetch(url, { cache: "no-cache", method: "GET", headers: {'X-Requested-With': 'XMLHttpRequest'}, })
    .then(async response => {

        if(!response.ok)
        {
            return Promise.reject(response);
        }
    
        if (response.status === 299) {
            const data = await response.text();
            window.open(data, "_blank");
            content.style.opacity = "0";
            isRunning = false;
            return;
        }

        const contentType = response.headers.get("Content-Type");
        if (contentType === "application/json; charset=utf-8") {
            isRunning = false;
            ReplacePage("/Error");
            return;
        }

        const data = await response.text();
        if (data.startsWith('<!DOCTYPE html>')) {
            isRunning = false;
            ReplacePage("/Zermelo/Rooster");
            return;
        }

        doPageReplace(data, url);
    })
    .catch(xhr => {
        //if it is a 401, replace /login
        if (xhr.status === 401) {
            isRunning = false;
            ReplacePage("/Login");
            
        } else {
            document.getElementsByClassName("loader-text")[0].innerHTML = "De pagina kon niet worden opgevraagd.";
            document.querySelectorAll(".loading-dots").forEach(function(dot) {
                dot.style.background = "var(--deny-color)";
                dot.style.animation = "unset";
                dot.style.transform = "scale(1)";
            });
            history.replaceState(null, " Zermos", url);
            isRunning = false;
        }
    });
}

function doPageReplace(data, url){
    setTimeout(async function() {

        let i;
        //remove all items with id added-by-fetch
        const elements = document.querySelectorAll("#added-by-fetch");
        for (i = 0; i < elements.length; i++) {
            elements[i].remove();
        }

        // Update main content
        main.outerHTML = '<main class="main" id="main"></main>';
        main = document.getElementById("main");
        main.innerHTML = stripTag("link", stripTag("script", data));

        let html = document.createElement("html");
        html.innerHTML = data;

        const scripts = html.getElementsByTagName("script");

        for (i = 0; i < scripts.length; i++) {
            if (scripts[i].src) {
                appendScript(document.head, scripts[i], true);
            } else {
                appendScript(document.body, scripts[i], false);
            }
        }
        
        const hrefs = Array.from(html.getElementsByTagName("link")).map(link => link.href.replace(window.location.origin, ""));
        let amountOfStylesheets = hrefs.length;
        for (i = 0; i < amountOfStylesheets; i++) {
        
            if (!isUserOnline) {
                getCacheCSS(hrefs[i]);
                amountOfStylesheets--;
                continue;
            }
        
            cacheCSS(hrefs[i], await fetch(hrefs[i] + "?v=@version").then(response => response.text()))
            .then(data => {
                amountOfStylesheets--;
                appendStylesheet(data);
            });
        }

        while (amountOfStylesheets > 0) {
            await new Promise(res => setTimeout(res, 50));
        }

        html.remove();

        //history.replaceState(null, " Zermos", url);
        history.pushState(null, " Zermos", url);

        try {
            Zermos.mainBeforeLoad();
        } catch (e) {}
        Zermos.mainBeforeLoad = () => {};

        content.style.opacity = "0";
        isRunning = false;

        setTimeout(function() {
            //log the time it took to load the page
            const timerEnd = performance.now();
            console.log(`Page load took ${timerEnd - timerStart}ms`);
            
            cachePage(data, url);

            try {
                Zermos.mainAfterLoad();
            } catch (e) {}
            Zermos.mainAfterLoad = () => {};

            return true;
        }, 250);
    }, 250);
}

window.onbeforeunload = function() {
    //save the current url in a cookie
    document.cookie = "this_session_last_page=" + window.location.pathname + "; path=/";
}

window.addEventListener("popstate", function(e) {
    ReplacePage(e.target.location.pathname, true);
});
</script>
</body>
</html>
