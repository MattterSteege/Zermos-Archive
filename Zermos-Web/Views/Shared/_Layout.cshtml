@using System.Security.Claims
@using Zermos_Web.TagHelpers
@using Zermos_Web.Utilities
@{
    var version = Environment.GetEnvironmentVariable("ZERMOS-WEB-VERSION");
    version = version == "DEV" ? TokenUtils.RandomString(10) : version;
    bool isZermeloGekoppeld = (bool) ViewData["isZermeloGekoppeld"];
    bool isInfowijsGekoppeld = (bool) ViewData["isInfowijsGekoppeld"];
    bool isSomtodayGekoppeld = (bool) ViewData["isSomtodayGekoppeld"];
}
<!DOCTYPE html>
<html lang="nl" class="@(Context.Response.GetCookie("theme") ?? Context.Request.Cookies["theme"] ?? "light") @(Context.Response.GetCookie("hand_side") ?? Context.Request.Cookies["hand_side"] ?? "right") @(Context.Response.GetCookie("font_size") ?? Context.Request.Cookies["font_size"] ?? "font-scale-1")">
<head>
    <meta charset="UTF-8">
    <title>Zermos</title>
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700" crossorigin="anonymous" rel="stylesheet"/>
    <link rel="stylesheet" href="https://fa.kronk.tech">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
    <meta name="viewport" content="user-scalable=no, width=device-width, initial-scale=1, maximum-scale=1">
    <link rel="manifest" href="/manifest.webmanifest"/>
    <meta name="theme-color" content="@(Context.Request.Cookies["theme"] == "light" || Context.Request.Cookies["theme"] == "blue" ? "#f8f9fa" : Context.Request.Cookies["theme"] == "dark" || Context.Request.Cookies["theme"] == "red" ? "#1a1a1a" : Context.Request.Cookies["theme"] == "pink" ? "#ffebf2" : "#f8f9fa")">
    <link rel="stylesheet" href="~/css/style.css?v=@version">
    <script defer src="/js/zermos-framework.min.js?v=@version"></script>
    <script src="/js/Zermos-modal.min.js?v=@version"></script>
    <link rel="stylesheet" href="/css/modal.css?v=@version">
</head>
<body>

<!-- get data from sidebar.cshtml -->
<div id="sidebar">
    @await Html.PartialAsync("sidebar", ViewData)
</div>

<div class="top-bar">
    <div class="top-right-profile-picture" id="account-1">
        <a onclick="ReplacePage('@Url.Action("Account", "Account")')">
            <i class="fa-solid fa-user menu-icons fa-fw"></i>
        </a>
    </div>

    <div class="backbutton" onclick="window.history.back()">
        <i class="fa-solid fa-angle-left"></i>
    </div>

    <div class="forewardbutton" onclick="window.history.forward()">
        <i class="fa-solid fa-angle-right"></i>
    </div>

</div>

<div id="content">
    <div class="loader-text">
        De pagina wordt geladen
    </div>
    <div class="loading-dots-container">
        <div class="loading-dots"></div>
        <div class="loading-dots"></div>
        <div class="loading-dots"></div>
    </div>
</div>
<main class="main" id="main">
    @RenderBody()
</main>

<script id="vital-script" defer="defer" minimize>
//@Context.Items["dmjs"]

let main = document.getElementById("main");
const content = document.getElementById("content");
let isRunning = false;
let timerStart;

window.onload = () => {
    waitForObject(Zermos, function () {
        Zermos.CurrentVersion = "@Environment.GetEnvironmentVariable("ZERMOS-WEB-VERSION")";
        console.log(`Zermos-web versie: ${Zermos.CurrentVersion}`);
        console.log(`Zermos-framework is geladen`);
        history.replaceState(null, null, "/");
        ReplacePage('@ViewData["url"]');
        @Html.Raw(Context.User.Identity!.IsAuthenticated && (Context.Request.Cookies["preview"] != null ? !Context.Request.Cookies["preview"].Contains("incognito") : true) ? "Zermos.checkForUpdates();" : "")
    }, 500);
}

function ReplacePage(url) {
    if (isRunning) {
        return;
    }
    
    //start timer
    timerStart = performance.now();   

    //check if the url is the same as the current url
    if (url === window.location.pathname) {
        return;
    }

    try{
        Zermos.mainUnload();
    } catch (e) {}
        unloadModal();
        Zermos.mainUnload = () => {};
    

    // Define a function to append a script to either the head or body
    function appendScript(element, scriptToWorkWith, isSrc) {
        const script = document.createElement("script");
        if (isSrc) {
            script.src = scriptToWorkWith.src;
            if (script.integrity)
                script.integrity = scriptToWorkWith.integrity;
            if (script.crossOrigin)
                script.crossOrigin = scriptToWorkWith.crossOrigin;
            if (script.referrerPolicy)
                script.referrerPolicy = scriptToWorkWith.referrerPolicy;
        } else {
            script.innerHTML = scriptToWorkWith.innerHTML;
        }

        if (scriptToWorkWith.defer) {
            script.defer = true;
        }

        script.id = "added-by-fetch";
        element.appendChild(script);
    }

    // Define a function to append a stylesheet link to the head
    function appendStylesheet(href) {
        const link = document.createElement("link");
        link.rel = "stylesheet";
        link.href = href + '?v=@version';
        link.id = "added-by-fetch";
        document.head.appendChild(link);
        return link;
    }

    document.getElementsByClassName("loader-text")[0].innerHTML = loadingTexts[Math.floor(Math.random() * loadingTexts.length)];
    document.querySelectorAll(".loading-dots").forEach(function(dot) {
        dot.style.background = "";
        dot.style.animation = "";
        dot.style.transform = "";
    });

    //set loading-text to one of the following

    if (HasPreview("Dont_minimize_js")) {
        //add url parameter to disable js minimization
        //check if the url already has a query string
        url += url.includes("?") ? "&" : "?";
        url += "dmjs";
    }
    
    if (url.startsWith("./")) {
        // get current hash and append the url to it
        url = window.location.hash.replace("#", "") + url.replace(".", "");
    }

    content.style.opacity = "1";
    // Make an AJAX request
    isRunning = true;
    $.ajax({
        url: url,
        success: function(data, textStatus, xhr) {

            if (xhr.status === 299) {
                window.open(data, "_blank");
                content.style.opacity = "0";
                isRunning = false;
                return;
            }
            
            if (xhr.getResponseHeader("Content-Type") === "application/json; charset=utf-8") {
                isRunning = false;
                ReplacePage("/Error");
                return;
            }

            if (data.startsWith('<!DOCTYPE html>')) {
                isRunning = false;
                ReplacePage("/Zermelo/Rooster");
                return;
            }

            setTimeout(async function() {

                let i;
                //remove all items with id added-by-fetch
                const elements = document.querySelectorAll("#added-by-fetch");
                for (i = 0; i < elements.length; i++) {
                    elements[i].remove();
                }

                // Update main content
                main.outerHTML = '<main class="main" id="main"></main>';
                main = document.getElementById("main");
                main.innerHTML = stripTag("link", stripTag("script", data));

                let html = document.createElement("html");
                html.innerHTML = data;

                const scripts = html.getElementsByTagName("script");

                for (i = 0; i < scripts.length; i++) {
                    if (scripts[i].src) {
                        appendScript(document.head, scripts[i], true);
                    } else {
                        appendScript(document.body, scripts[i], false);
                    }
                }

                const links = html.getElementsByTagName("link");
                let amountOfStylesheets = links.length;
                for (i = 0; i < links.length; i++) {
                    if (links[i].rel === "stylesheet") {
                        const link = appendStylesheet(links[i].href);
                        watchForLoading(link);
                    }
                }

                function watchForLoading(link) {

                    const interval = setInterval(function() {
                        try {
                            if (link.sheet != null && link.sheet.cssRules.length > 0) {
                                //if it is, the stylesheet is loaded
                                clearInterval(interval);
                                amountOfStylesheets--;
                            }
                        } catch (e) {}
                    }, 50);
                }

                while (amountOfStylesheets > 0) {
                    await new Promise(res => setTimeout(res, 50));
                }

                html.remove();

                window.location.hash = url;

                try{
                    Zermos.mainBeforeLoad();
                } catch (e) {}
                Zermos.mainBeforeLoad = () => {};

                content.style.opacity = "0";
                isRunning = false;
                
                setTimeout(function() {
                    //log the time it took to load the page
                    try{
                        Zermos.mainAfterLoad();
                    } catch (e) {}
                    Zermos.mainAfterLoad = () => {};
                    const timerEnd = performance.now();
                    console.log(`Page load took ${timerEnd - timerStart}ms`);
                    return true;
                }, 250);
            }, 250);
        },
        error: function(xhr) {
            //if it is a 401, replace /login
            if (xhr.status === 401) {
                isRunning = false;
                ReplacePage("/Login");
            } else {
                document.getElementsByClassName("loader-text")[0].innerHTML = "De pagina kon niet worden opgevraagd.";
                document.querySelectorAll(".loading-dots").forEach(function(dot) {
                    dot.style.background = "var(--deny-color)";
                    dot.style.animation = "unset";
                    dot.style.transform = "scale(1)";
                });
                window.location.hash = url;
                isRunning = false;
            }
        },
        cache: false,
        type: 'GET'
    });


    function stripTag(tag, data) {
        const div = document.createElement('div');
        div.innerHTML = data;
        const scripts = div.getElementsByTagName(tag);
        let i = scripts.length;
        while (i--) {
            scripts[i].parentNode.removeChild(scripts[i]);
        }
        return div.innerHTML;
    }
    

}

window.onbeforeunload = function() {
    //save the current url in a cookie
    document.cookie = "this_session_last_page=" + window.location.hash.slice(1) + ";path=/";
}

window.onpopstate = function() {
    //if the hash is empty, don't replace the page
    if (window.location.hash === "") return;
    ReplacePage(window.location.hash.replace("#", ""));
}
</script>
</body>
</html>
