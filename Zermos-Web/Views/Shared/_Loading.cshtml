<style id="style">

    #content {
        width: 100%;
        height: 100%;
        transition: 0.3s;
    }

    .loader-text {
      left: 50%;
      top: 45%;
      position: absolute;
      transform: translate(-45%, -50%);
    }
    
    .loading-dots {
      display: inline-block;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background: var(--active-color);
      animation: loading-dots 1.5s infinite ease-in-out;
      transform: scale(0);
    }
    
    .loading-dots:nth-child(2) {
      animation-delay: .2s;
    }
    
    .loading-dots:nth-child(3) {
      animation-delay: .4s;
    }
    
    @@keyframes loading-dots {
      0% {
        transform: scale(0);
      }
      50% {
        transform: scale(1);
      }
      100% {
        transform: scale(0);
      }
    }
    
    .loader-text {
      font-size: 20px;
      font-weight: 600;
      color: var(--text-color);
    }
    
    .loader-text .loading-dots {
      margin: 0 2px;
    }
    
    .loading-dots-container {
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
    }   
    
    @@keyframes fade-in {
      0% {
        opacity: 0;
      }
      100% {
        opacity: 1;
      }
    }
    
    @@media only screen and (max-width: 700px) {
      .loader-text {
        display: none;
      }
    }

  
</style>

<div id="content">
    <div class="loader-text">
        @(ViewData["laad_tekst"] ?? Context.Items["laad_tekst"] ?? "De pagina wordt geladen")
    </div>
    <div class="loading-dots-container">
        <div class="loading-dots"></div>
        <div class="loading-dots"></div>
        <div class="loading-dots"></div>
    </div>
</div>

@section Scripts
{
  <script id="loading-script">
$(function() {

    const urlParams = new URLSearchParams(window.location.search);

    if ("@(ViewData["url"] ?? Context.Items["url"])" === "") { return; }

    // Define a function to append a script to either the head or body
    function appendScript(element, codeOrSrc, isSrc) {
        var script = document.createElement("script");
        if (isSrc) {
            script.src = codeOrSrc;
        } else {
            script.innerHTML = codeOrSrc;
        }
        script.id = "added-by-fetch";
        element.appendChild(script);
    }
    
    // Define a function to append a stylesheet link to the head
    function appendStylesheet(href) {
        var link = document.createElement("link");
        link.rel = "stylesheet";
        link.href = href;
        link.id = "added-by-fetch";
        document.head.appendChild(link);
    }
    
    // Get the URL parameter
    var url = urlParams.get('url');
    
    // Make an AJAX request
    $.ajax({
        url: url,
        success: function(data) {
            var el = document.createElement('html');
            el.innerHTML = data;
    
            var mainElement = document.getElementById("main");
            var contentElement = document.getElementById("content");
    
            // Fade out main and content
            mainElement.style.opacity = "0";
            contentElement.style.opacity = "0";
    
            setTimeout(function() {
                var cleanedData = stripScripts("link", stripScripts("script", data));
    
                // Update main content
                mainElement.innerHTML = cleanedData;
    
                var scripts = el.getElementsByTagName("script");
                var head = document.head;
                var body = document.body;
    
                for (var i = 0; i < scripts.length; i++) {
                    if (scripts[i].src) {
                        appendScript(head, scripts[i].src, true);
                    } else {
                        appendScript(body, scripts[i].innerHTML, false);
                    }
                }
    
                var links = el.getElementsByTagName("link");
                for (var i = 0; i < links.length; i++) {
                    if (links[i].rel === "stylesheet") {
                        appendStylesheet(links[i].href);
                    }
                }
    
                // Remove loading script
                document.getElementById("loading-script").remove();
    
                // Set opacity back to 1
                mainElement.style.opacity = "1";
                contentElement.style.opacity = "1";
            }, 250);
        },
        error: function(xhr, status, error) {
            alert("An error occurred: " + error);
            window.location.href = "/";
        },
        cache: false,
        type: 'GET'
    });

    
    function stripScripts(tag, data) {
        var div = document.createElement('div');
        div.innerHTML = data;
        var scripts = div.getElementsByTagName(tag);
        var i = scripts.length;
        while (i--) {
          scripts[i].parentNode.removeChild(scripts[i]);
        }
        return div.innerHTML;
      }

    function modifyUrl(title, url) {
        if (typeof(history.pushState) != "undefined") {
            var obj = {
                Title: title,
                Url: url
            };
            history.pushState(obj, obj.Title, obj.Url);
        }
    }
  });
</script>
}